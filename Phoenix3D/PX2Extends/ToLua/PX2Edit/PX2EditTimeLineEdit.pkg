// PX2Edits.hpp

	class TimeLineEdit
	{
	public:
		void SetTimeLineRenderStep_UIGroup(RenderStep *renderStep);
		RenderStep *GetTimeLineRenderStep_UIGroup() const;

		void SetTimeLineRenderStep_Grid(RenderStep *renderStep);
		RenderStep *GetTimeLineRenderStep_Grid() const;

		Node *GetCurveEditNode_Grid() { return mCurveEditNode_Grid; }
		PX2::Polysegment *GetGridPoly() { return mGridPoly; }

	public:
		void SetCtrlsScale(const Float2 &scale);
		const Float2 &GetCtrlsScale() const;

		void GetInRange(float &inMin, float &inMax);
		void GetOutRange(float &outMin, float &outMax);

	public:
		void CreateAddCurveGroup(PX2::Object *obj);
		void ReCreateAddCurveGroup(PX2::Object *obj);
		bool HasCurveGroup(PX2::Object *obj);
		void RemoveGroup(PX2::Object *obj);
		CurveGroup *GetCurveGroup(PX2::Object *obj);
		CurveGroup *GetCurveGroup(Curve *curve);
		void UpdateCurve(PX2::Object *obj, bool addRemovePoint = false);

		void ClearGroup(PX2::UICurveGroup *uiGroup);
		void ClearAllGroups();

		bool HasCurve(Curve *curve);
		void AddCurve(Curve *curve);
		void RemoveCurve(Curve *curve);
		int GetNumCurves() const;
		Curve *GetCurve(int i);

		void SetActiveCurve(Curve *curve);
		Curve *GetActiveCurve() { return mActiveCurve; }

		CurveCtrl *TrySelectCurve(PX2::Movable *mov);
		void SetSelectedCurveCtrl(CurveCtrl *ctrl);
		CurveCtrl *GetSelectedCurveCtrl() { return mSelectedCurveCtrl; }

		void SetSelectedUICurveGroup(PX2::UICurveGroup *group);
		PX2::UICurveGroup *GetSelectedUICurveGroup() { return mSelectedCruveGroup; }
		
	public:
		void Fit_Hor();
		void Fit_Ver();
		void Fit_All();
		void Fit_Selected();
		void Pan();
		void Zoom();
		void Auto();
		void Clamp();
		void User();
		void Break();
		void Linear();
		void Constant();
	};