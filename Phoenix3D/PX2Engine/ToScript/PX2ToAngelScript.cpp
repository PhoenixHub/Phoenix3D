// PX2ToAngelScript.cpp

#include <PX2ToAngelScript.hpp>
#include "angelscript.h"
using namespace std;

void FakeAddRef(void* ptr) {}
void FakeReleaseRef(void* ptr) {}

template<class A, class B>
B* RefCast(A* a)
{
	if( !a )
		return 0;
	B* b = dynamic_cast<B*>(a);
	return b;
}

static XMLData * fXMLData0()
{
	XMLData* pointer = new0 XMLData();
	pointer->IncrementReferences();
	return pointer;
}
static void Ctor_XMLNode0(XMLNode* _pointer)
{
	new(_pointer) XMLNode();
}
static void Ctor_XMLNode1(const XMLNode & rhs, XMLNode* _pointer)
{
	new(_pointer) XMLNode(rhs);
}
static void DCtor_XMLNode(XMLNode* _pointer)
{
	_pointer->~XMLNode();
}
static JSONData * fJSONData0()
{
	JSONData* pointer = new0 JSONData();
	pointer->IncrementReferences();
	return pointer;
}
static void Ctor_JSONValue0(JSONValue* _pointer)
{
	new(_pointer) JSONValue();
}
static void Ctor_JSONValue1(const JSONValue & rhs, JSONValue* _pointer)
{
	new(_pointer) JSONValue(rhs);
}
static void DCtor_JSONValue(JSONValue* _pointer)
{
	_pointer->~JSONValue();
}
static void Ctor_StringHelp0(StringHelp* _pointer)
{
	new(_pointer) StringHelp();
}
static void DCtor_StringHelp(StringHelp* _pointer)
{
	_pointer->~StringHelp();
}
static void Ctor_HPoint0(HPoint* _pointer)
{
	new(_pointer) HPoint();
}
static void Ctor_HPoint1(const HPoint & pnt, HPoint* _pointer)
{
	new(_pointer) HPoint(pnt);
}
static void Ctor_HPoint2(float x, float y, float z, float w, HPoint* _pointer)
{
	new(_pointer) HPoint(x, y, z, w);
}
static void DCtor_HPoint(HPoint* _pointer)
{
	_pointer->~HPoint();
}
static void Ctor_APoint0(APoint* _pointer)
{
	new(_pointer) APoint();
}
static void Ctor_APoint1(const APoint & pnt, APoint* _pointer)
{
	new(_pointer) APoint(pnt);
}
static void Ctor_APoint2(float x, float y, float z, APoint* _pointer)
{
	new(_pointer) APoint(x, y, z);
}
static void DCtor_APoint(APoint* _pointer)
{
	_pointer->~APoint();
}
static void Ctor_AVector0(AVector* _pointer)
{
	new(_pointer) AVector();
}
static void Ctor_AVector1(const AVector & vec, AVector* _pointer)
{
	new(_pointer) AVector(vec);
}
static void Ctor_AVector2(float x, float y, float z, AVector* _pointer)
{
	new(_pointer) AVector(x, y, z);
}
static void Ctor_AVector3(const Float3 & tuple, AVector* _pointer)
{
	new(_pointer) AVector(tuple);
}
static void DCtor_AVector(AVector* _pointer)
{
	_pointer->~AVector();
}
static void Ctor_HPlane0(HPlane* _pointer)
{
	new(_pointer) HPlane();
}
static void Ctor_HPlane1(const HPlane & plane, HPlane* _pointer)
{
	new(_pointer) HPlane(plane);
}
static void Ctor_HPlane2(float normal0, float normal1, float normal2, float constant, HPlane* _pointer)
{
	new(_pointer) HPlane(normal0, normal1, normal2, constant);
}
static void Ctor_HPlane3(const AVector & normal, float constant, HPlane* _pointer)
{
	new(_pointer) HPlane(normal, constant);
}
static void Ctor_HPlane4(const AVector & normal, const APoint & p, HPlane* _pointer)
{
	new(_pointer) HPlane(normal, p);
}
static void Ctor_HPlane5(const APoint & p0, const APoint & p1, const APoint & p2, HPlane* _pointer)
{
	new(_pointer) HPlane(p0, p1, p2);
}
static void Ctor_HPlane6(const HPoint & tuple, HPlane* _pointer)
{
	new(_pointer) HPlane(tuple);
}
static void DCtor_HPlane(HPlane* _pointer)
{
	_pointer->~HPlane();
}
static void Ctor_Float20(Float2* _pointer)
{
	new(_pointer) Float2();
}
static void Ctor_Float21(float f0, float f1, Float2* _pointer)
{
	new(_pointer) Float2(f0, f1);
}
static void Ctor_Float22(const Float2 & tuple, Float2* _pointer)
{
	new(_pointer) Float2(tuple);
}
static void DCtor_Float2(Float2* _pointer)
{
	_pointer->~Float2();
}
static void Ctor_Float30(Float3* _pointer)
{
	new(_pointer) Float3();
}
static void Ctor_Float31(float f0, float f1, float f2, Float3* _pointer)
{
	new(_pointer) Float3(f0, f1, f2);
}
static void Ctor_Float32(const Float3 & tuple, Float3* _pointer)
{
	new(_pointer) Float3(tuple);
}
static void DCtor_Float3(Float3* _pointer)
{
	_pointer->~Float3();
}
static void Ctor_Float40(Float4* _pointer)
{
	new(_pointer) Float4();
}
static void Ctor_Float41(float f0, float f1, float f2, float f3, Float4* _pointer)
{
	new(_pointer) Float4(f0, f1, f2, f3);
}
static void Ctor_Float42(const Float4 & tuple, Float4* _pointer)
{
	new(_pointer) Float4(tuple);
}
static void DCtor_Float4(Float4* _pointer)
{
	_pointer->~Float4();
}
static void Ctor_HMatrix0(HMatrix* _pointer)
{
	new(_pointer) HMatrix();
}
static void DCtor_HMatrix(HMatrix* _pointer)
{
	_pointer->~HMatrix();
}
static void Ctor_Size0(Sizef* _pointer)
{
	new(_pointer) Sizef();
}
static void Ctor_Size1(const float & width, const float & height, Sizef* _pointer)
{
	new(_pointer) Sizef(width, height);
}
static void Ctor_Size2(const Sizef & size, Sizef* _pointer)
{
	new(_pointer) Sizef(size);
}
static void DCtor_Size(Sizef* _pointer)
{
	_pointer->~Sizef();
}
static void Ctor_Rect0(Rectf* _pointer)
{
	new(_pointer) Rectf();
}
static void Ctor_Rect1(const float & left, const float & bottom, const float & right, const float & top, Rectf* _pointer)
{
	new(_pointer) Rectf(left, bottom, right, top);
}
static void Ctor_Rect2(const Rectf & rct, Rectf* _pointer)
{
	new(_pointer) Rectf(rct);
}
static void DCtor_Rect(Rectf* _pointer)
{
	_pointer->~Rectf();
}
static void Ctor_Transform0(Transform* _pointer)
{
	new(_pointer) Transform();
}
static void DCtor_Transform(Transform* _pointer)
{
	_pointer->~Transform();
}
static void Ctor_Bound0(Bound* _pointer)
{
	new(_pointer) Bound();
}
static void DCtor_Bound(Bound* _pointer)
{
	_pointer->~Bound();
}
static InterpCurveController * fInterpCurveController0()
{
	InterpCurveController* pointer = new0 InterpCurveController();
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveFloatController * fInterpCurveFloatController0(float initValue)
{
	InterpCurveFloatController* pointer = new0 InterpCurveFloatController(initValue);
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveFloat3Controller * fInterpCurveFloat3Controller0(const Float3 & initValue)
{
	InterpCurveFloat3Controller* pointer = new0 InterpCurveFloat3Controller(initValue);
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveUniformScaleController * fInterpCurveUniformScaleController0()
{
	InterpCurveUniformScaleController* pointer = new0 InterpCurveUniformScaleController();
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveAlphaController * fInterpCurveAlphaController0()
{
	InterpCurveAlphaController* pointer = new0 InterpCurveAlphaController();
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveScaleController * fInterpCurveScaleController0()
{
	InterpCurveScaleController* pointer = new0 InterpCurveScaleController();
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveRotateController * fInterpCurveRotateController0()
{
	InterpCurveRotateController* pointer = new0 InterpCurveRotateController();
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveTranslateController * fInterpCurveTranslateController0()
{
	InterpCurveTranslateController* pointer = new0 InterpCurveTranslateController();
	pointer->IncrementReferences();
	return pointer;
}
static InterpCurveColorController * fInterpCurveColorController0()
{
	InterpCurveColorController* pointer = new0 InterpCurveColorController();
	pointer->IncrementReferences();
	return pointer;
}
static Shine * fShine0()
{
	Shine* pointer = new0 Shine();
	pointer->IncrementReferences();
	return pointer;
}
static Node * fNode0()
{
	Node* pointer = new0 Node();
	pointer->IncrementReferences();
	return pointer;
}
static SizeNode * fSizeNode0()
{
	SizeNode* pointer = new0 SizeNode();
	pointer->IncrementReferences();
	return pointer;
}
static SwitchNode * fSwitchNode0()
{
	SwitchNode* pointer = new0 SwitchNode();
	pointer->IncrementReferences();
	return pointer;
}
static Camera * fCamera0(bool isPerspective)
{
	Camera* pointer = new0 Camera(isPerspective);
	pointer->IncrementReferences();
	return pointer;
}
static CameraNode * fCameraNode0(Camera * camera)
{
	CameraNode* pointer = new0 CameraNode(camera);
	pointer->IncrementReferences();
	return pointer;
}
static Canvas * fCanvas0()
{
	Canvas* pointer = new0 Canvas();
	pointer->IncrementReferences();
	return pointer;
}
static void Ctor_TexPackElement0(TexPackElement* _pointer)
{
	new(_pointer) TexPackElement();
}
static void DCtor_TexPackElement(TexPackElement* _pointer)
{
	_pointer->~TexPackElement();
}
static void Ctor_TexPack0(TexPack* _pointer)
{
	new(_pointer) TexPack();
}
static void DCtor_TexPack(TexPack* _pointer)
{
	_pointer->~TexPack();
}
static ScriptController * fScriptController0()
{
	ScriptController* pointer = new0 ScriptController();
	pointer->IncrementReferences();
	return pointer;
}
static BeamEmitter * fBeamEmitter0()
{
	BeamEmitter* pointer = new0 BeamEmitter();
	pointer->IncrementReferences();
	return pointer;
}
static Billboard * fBillboard0()
{
	Billboard* pointer = new0 Billboard();
	pointer->IncrementReferences();
	return pointer;
}
static CameraShake * fCameraShake0()
{
	CameraShake* pointer = new0 CameraShake();
	pointer->IncrementReferences();
	return pointer;
}
static EffectModel * fEffectModel0()
{
	EffectModel* pointer = new0 EffectModel();
	pointer->IncrementReferences();
	return pointer;
}
static EffectModelNode * fEffectModelNode0()
{
	EffectModelNode* pointer = new0 EffectModelNode();
	pointer->IncrementReferences();
	return pointer;
}
static ParticleEmitter * fParticleEmitter0()
{
	ParticleEmitter* pointer = new0 ParticleEmitter();
	pointer->IncrementReferences();
	return pointer;
}
static RibbonEmitter * fRibbonEmitter0()
{
	RibbonEmitter* pointer = new0 RibbonEmitter();
	pointer->IncrementReferences();
	return pointer;
}
static Soundable * fSoundable0(const string & filename)
{
	Soundable* pointer = new0 Soundable(filename);
	pointer->IncrementReferences();
	return pointer;
}
static EffectableController * fEffectableController0()
{
	EffectableController* pointer = new0 EffectableController();
	pointer->IncrementReferences();
	return pointer;
}
static RawTerrain * fRawTerrain0()
{
	RawTerrain* pointer = new0 RawTerrain();
	pointer->IncrementReferences();
	return pointer;
}
static LODTerrain * fLODTerrain0()
{
	LODTerrain* pointer = new0 LODTerrain();
	pointer->IncrementReferences();
	return pointer;
}
static void Ctor_UIInputData0(UIInputData* _pointer)
{
	new(_pointer) UIInputData();
}
static void DCtor_UIInputData(UIInputData* _pointer)
{
	_pointer->~UIInputData();
}
static UIFrame * fUIFrame0()
{
	UIFrame* pointer = new0 UIFrame();
	pointer->IncrementReferences();
	return pointer;
}
static UIPicBox * fUIPicBox0(const string & filename, int isDynamicBuffer)
{
	UIPicBox* pointer = new0 UIPicBox(filename, isDynamicBuffer);
	pointer->IncrementReferences();
	return pointer;
}
static UIPicBox * fUIPicBox1(const string & packName, const string & eleName, int isDynamicBuffer)
{
	UIPicBox* pointer = new0 UIPicBox(packName, eleName, isDynamicBuffer);
	pointer->IncrementReferences();
	return pointer;
}
static UIButton * fUIButton0()
{
	UIButton* pointer = new0 UIButton();
	pointer->IncrementReferences();
	return pointer;
}
static UIFPicBox * fUIFPicBox0()
{
	UIFPicBox* pointer = new0 UIFPicBox();
	pointer->IncrementReferences();
	return pointer;
}
static UIText * fUIText0()
{
	UIText* pointer = new0 UIText();
	pointer->IncrementReferences();
	return pointer;
}
static UIFText * fUIFText0()
{
	UIFText* pointer = new0 UIFText();
	pointer->IncrementReferences();
	return pointer;
}
static UICanvas * fUICanvas0()
{
	UICanvas* pointer = new0 UICanvas();
	pointer->IncrementReferences();
	return pointer;
}
static Scene * fScene0()
{
	Scene* pointer = new0 Scene();
	pointer->IncrementReferences();
	return pointer;
}
int toAS_PX2_open(asIScriptEngine* asEngine)
{
	int r = 0;
	// Enum: InterpCurveMode
	r = asEngine->RegisterEnum("InterpCurveMode");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_LINEAR", InterpCurveMode::ICM_LINEAR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_CONSTANT", InterpCurveMode::ICM_CONSTANT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_CURVE_AUTO", InterpCurveMode::ICM_CURVE_AUTO);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_CURVE_AUTOCLAMPED", InterpCurveMode::ICM_CURVE_AUTOCLAMPED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_CURVE_USER", InterpCurveMode::ICM_CURVE_USER);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_CURVE_BREAK", InterpCurveMode::ICM_CURVE_BREAK);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("InterpCurveMode", "ICM_MAX_MODE", InterpCurveMode::ICM_MAX_MODE);
	assert(r >= 0);
	// Enum: UICallType
	r = asEngine->RegisterEnum("UICallType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_NONE", UICallType::UICT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_PRESSED", UICallType::UICT_PRESSED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_RELEASED", UICallType::UICT_RELEASED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_PRESSED_NOTPICK", UICallType::UICT_PRESSED_NOTPICK);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_RELEASED_NOTPICK", UICallType::UICT_RELEASED_NOTPICK);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_DOUBLECLICK", UICallType::UICT_DOUBLECLICK);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_PROGRESSCHANGED", UICallType::UICT_PROGRESSCHANGED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_SLIDERCHANGED", UICallType::UICT_SLIDERCHANGED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_EDITBOX_ATTACHWITHIME", UICallType::UICT_EDITBOX_ATTACHWITHIME);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_EDITBOX_DETACHWITHIME", UICallType::UICT_EDITBOX_DETACHWITHIME);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_EDITBOX_TEXTCHANGED", UICallType::UICT_EDITBOX_TEXTCHANGED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_EDITBOX_ENTER", UICallType::UICT_EDITBOX_ENTER);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_CHECKED", UICallType::UICT_CHECKED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_DISCHECKED", UICallType::UICT_DISCHECKED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_LIST_SELECTED", UICallType::UICT_LIST_SELECTED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_TABFRAME_DRAG_BEGIN", UICallType::UICT_TABFRAME_DRAG_BEGIN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_TABFRAME_DRAG_END", UICallType::UICT_TABFRAME_DRAG_END);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_COMBOBOX_CHOOSED", UICallType::UICT_COMBOBOX_CHOOSED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_TABFRAME_SETACTIVE", UICallType::UICT_TABFRAME_SETACTIVE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_SPLITTER_DRAGING", UICallType::UICT_SPLITTER_DRAGING);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UICallType", "UICT_MAX_TYPE", UICallType::UICT_MAX_TYPE);
	assert(r >= 0);
	// Enum: UIPickType
	r = asEngine->RegisterEnum("UIPickType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UIPickType", "UIPT_NONE", UIPickType::UIPT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UIPickType", "UIPT_PRESSED", UIPickType::UIPT_PRESSED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UIPickType", "UIPT_RELEASED", UIPickType::UIPT_RELEASED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UIPickType", "UIPT_MOVED", UIPickType::UIPT_MOVED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UIPickType", "UIPT_WHELLED", UIPickType::UIPT_WHELLED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UIPickType", "UIPT_MAX_TYPE", UIPickType::UIPT_MAX_TYPE);
	assert(r >= 0);
	// Enum: UILayoutPosType
	r = asEngine->RegisterEnum("UILayoutPosType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_LEFT", UILayoutPosType::UILPT_LEFT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_RIGHT", UILayoutPosType::UILPT_RIGHT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_BOTTOM", UILayoutPosType::UILPT_BOTTOM);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_TOP", UILayoutPosType::UILPT_TOP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_CENTER", UILayoutPosType::UILPT_CENTER);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_ALL", UILayoutPosType::UILPT_ALL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("UILayoutPosType", "UILPT_MAX_TYPE", UILayoutPosType::UILPT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("RefObject", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Rtti", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Object", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Time", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Logger", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("XMLData", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("XMLNode", sizeof(XMLNode), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("JSONData", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("JSONValue", sizeof(JSONValue), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("StringHelp", sizeof(StringHelp), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("HPoint", sizeof(HPoint), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("APoint", sizeof(APoint), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("AVector", sizeof(AVector), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("HPlane", sizeof(HPlane), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Float2", sizeof(Float2), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Float3", sizeof(Float3), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Float4", sizeof(Float4), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("HMatrix", sizeof(HMatrix), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Sizef", sizeof(Sizef), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Rectf", sizeof(Rectf), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Transform", sizeof(Transform), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Bound", sizeof(Bound), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Controlledable", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Controller", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveFloatController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveFloat3Controller", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveUniformScaleController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveAlphaController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveScaleController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveRotateController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveTranslateController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("InterpCurveColorController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Buffer", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Texture", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Texture2D", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Shine", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Movable", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("VertexFormat", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Renderable", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Triangles", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("TriMesh", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Node", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("SizeNode", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("SwitchNode", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Camera", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("CameraNode", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Renderer", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Canvas", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("TexPackElement", sizeof(TexPackElement), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("TexPack", sizeof(TexPack), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("ResourceManager", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("LanguageManager", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("ScriptContext", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("LuaContext", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("ASContext", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("ScriptManager", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("ScriptController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Effectable", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("BeamEmitter", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Billboard", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("CameraShake", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("EffectModel", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("EffectModelNode", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("ParticleEmitter", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("RibbonEmitter", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Soundable", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("EffectableController", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Terrain", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("RawTerrain", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("LODTerrain", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIInputData", sizeof(UIInputData), asOBJ_VALUE | asOBJ_APP_CLASS);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIFrame", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIPicBox", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIButtonBase", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIButton", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIFPicBox", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIText", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UIFText", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("UICanvas", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Project", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Scene", 0, asOBJ_REF); 
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Application", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	r = asEngine->RegisterObjectType("Creater", 0,  asOBJ_REF | asOBJ_NOCOUNT);
	assert(r >= 0);
	// Class: RefObject
	r = asEngine->RegisterObjectBehaviour("RefObject", asBEHAVE_ADDREF, "void f()", asMETHOD(RefObject, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("RefObject", asBEHAVE_RELEASE, "void f()", asMETHOD(RefObject, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "void IncrementReferences()", asMETHODPR(RefObject, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "void DecrementReferences()", asMETHODPR(RefObject, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "int GetReferences() const", asMETHODPR(RefObject, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Rtti
	r = asEngine->RegisterObjectMethod("Rtti", "string GetName()", asMETHODPR(Rtti, GetName, (), std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rtti", "uint16 GetVersion() const", asMETHODPR(Rtti, GetVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rtti", "bool IsExactly(const Rtti & type) const", asMETHODPR(Rtti, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rtti", "bool IsDerived(const Rtti & type) const", asMETHODPR(Rtti, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Object
	r = asEngine->RegisterObjectBehaviour("Object", asBEHAVE_ADDREF, "void f()", asMETHOD(Object, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Object", asBEHAVE_RELEASE, "void f()", asMETHOD(Object, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Object, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Object@+ opCast()", asFUNCTION((RefCast<RefObject, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void IncrementReferences()", asMETHODPR(Object, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void DecrementReferences()", asMETHODPR(Object, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "int GetReferences() const", asMETHODPR(Object, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void Enable(bool enable)", asMETHODPR(Object, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsEnable() const", asMETHODPR(Object, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void SetActivate(bool act)", asMETHODPR(Object, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsActivated() const", asMETHODPR(Object, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "const Rtti & GetRttiType() const", asMETHODPR(Object, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "uint16 GetRttiVersion() const", asMETHODPR(Object, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsExactly(const Rtti & type) const", asMETHODPR(Object, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsDerived(const Rtti & type) const", asMETHODPR(Object, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Object, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Object, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Object, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Object, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "const string & GetResourcePath() const", asMETHODPR(Object, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void SetName(const string & name)", asMETHODPR(Object, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "const string & GetName() const", asMETHODPR(Object, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Object, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void SetID(int id)", asMETHODPR(Object, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "int GetID() const", asMETHODPR(Object, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Object @+ GetObjectByID(int id)", asMETHODPR(Object, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void ComeInEventWorld()", asMETHODPR(Object, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "void GoOutEventWorld()", asMETHODPR(Object, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "bool IsInEventWorld()", asMETHODPR(Object, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Object_TYPE", (void*)&Object::TYPE); 
	assert(r >= 0);
	// Class: Time
	r = asEngine->RegisterObjectMethod("Time", "double GetTimeInMicroseconds()", asFUNCTIONPR(Time::GetTimeInMicroseconds, (), double), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Time", "double GetTimeInSeconds()", asFUNCTIONPR(Time::GetTimeInSeconds, (), double), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Time", "void ResetTime()", asFUNCTIONPR(Time::ResetTime, (), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("double Time_FrameElapsedSeconds", (void*)&Time::FrameElapsedSeconds); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("double Time_FrameRunnedSeconds", (void*)&Time::FrameRunnedSeconds); 
	assert(r >= 0);
	// Class: Logger
	r = asEngine->RegisterObjectMethod("Logger", "void SetBlock(bool isBlock)", asMETHODPR(Logger, SetBlock, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Logger", "bool IsBlock()", asMETHODPR(Logger, IsBlock, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Logger", "void SetLogFileInfo(bool logFileInfo)", asMETHODPR(Logger, SetLogFileInfo, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Logger", "bool IsLogFileInfo() const", asMETHODPR(Logger, IsLogFileInfo, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Logger", "void LogInfo(const string & tag, const string & info)", asMETHODPR(Logger, LogInfo, (const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Logger", "void LogError(const string & tag, const string & info)", asMETHODPR(Logger, LogError, (const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Logger", "void LogUser(const string & tag, const string & info)", asMETHODPR(Logger, LogUser, (const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	// Class: XMLData
	r = asEngine->RegisterObjectBehaviour("XMLData", asBEHAVE_FACTORY, "XMLData @ f()", asFUNCTION(fXMLData0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("XMLData", asBEHAVE_ADDREF, "void f()", asMETHOD(XMLData, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("XMLData", asBEHAVE_RELEASE, "void f()", asMETHOD(XMLData, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "RefObject@+ opImplCast()", asFUNCTION((RefCast<XMLData, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "XMLData@+ opCast()", asFUNCTION((RefCast<RefObject, XMLData>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "void IncrementReferences()", asMETHODPR(XMLData, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "void DecrementReferences()", asMETHODPR(XMLData, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "int GetReferences() const", asMETHODPR(XMLData, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "bool LoadFile(const string & fileName)", asMETHODPR(XMLData, LoadFile, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "bool LoadBuffer(const int8 & buffer, int size)", asMETHODPR(XMLData, LoadBuffer, (const char * , int), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "bool SaveFile(const string & fileName)", asMETHODPR(XMLData, SaveFile, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "void Create()", asMETHODPR(XMLData, Create, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "XMLNode GetRootNode()", asMETHODPR(XMLData, GetRootNode, (), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "XMLNode NewChild(const string & name)", asMETHODPR(XMLData, NewChild, (const std::string & ), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "XMLNode GetNodeByPath(const string & path)", asMETHODPR(XMLData, GetNodeByPath, (const std::string & ), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLData", "void LinkEndChild(XMLNode node)", asMETHODPR(XMLData, LinkEndChild, (XMLNode), void), asCALL_THISCALL);
	assert(r >= 0);
	// Class: XMLNode
	r = asEngine->RegisterObjectBehaviour("XMLNode", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_XMLNode0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("XMLNode", asBEHAVE_CONSTRUCT, "void f(const XMLNode & rhs)", asFUNCTION(Ctor_XMLNode1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("XMLNode", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_XMLNode), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool IsNull()", asMETHODPR(XMLNode, IsNull, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "XMLNode NewChild(string name)", asMETHODPR(XMLNode, NewChild, (std::string), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "string GetName()", asMETHODPR(XMLNode, GetName, (), std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "string GetText()", asMETHODPR(XMLNode, GetText, (), std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool HasChild(const string & name)", asMETHODPR(XMLNode, HasChild, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "XMLNode GetChild(const string & name)", asMETHODPR(XMLNode, GetChild, (const std::string & ), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "XMLNode IterateChild()", asMETHODPR(XMLNode, IterateChild, (), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "XMLNode IterateChild(XMLNode previous)", asMETHODPR(XMLNode, IterateChild, (XMLNode), XMLNode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool HasAttribute(const string & name)", asMETHODPR(XMLNode, HasAttribute, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "int AttributeToInt(const string & name)", asMETHODPR(XMLNode, AttributeToInt, (const std::string & ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "float AttributeToFloat(const string & name)", asMETHODPR(XMLNode, AttributeToFloat, (const std::string & ), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool AttributeToBool(const string & name)", asMETHODPR(XMLNode, AttributeToBool, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "string AttributeToString(const string & name)", asMETHODPR(XMLNode, AttributeToString, (const std::string & ), std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool AttribToInt(const string & name, int & value)", asMETHODPR(XMLNode, AttribToInt, (const std::string & , int & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool AttribToFloat(const string & name, float & value)", asMETHODPR(XMLNode, AttribToFloat, (const std::string & , float & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool AttribToBool(const string & name, bool & value)", asMETHODPR(XMLNode, AttribToBool, (const std::string & , bool & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "bool AttribToString(const string & name, string & value)", asMETHODPR(XMLNode, AttribToString, (const std::string & , std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "void SetAttributeInt(const string & name, int value)", asMETHODPR(XMLNode, SetAttributeInt, (const std::string & , int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "void SetAttributeFloat(const string & name, float value)", asMETHODPR(XMLNode, SetAttributeFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "void SetAttributeBool(const string & name, bool value)", asMETHODPR(XMLNode, SetAttributeBool, (const std::string & , bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("XMLNode", "void SetAttributeString(const string & name, const string & str)", asMETHODPR(XMLNode, SetAttributeString, (const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	// Class: JSONData
	r = asEngine->RegisterObjectBehaviour("JSONData", asBEHAVE_FACTORY, "JSONData @ f()", asFUNCTION(fJSONData0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("JSONData", asBEHAVE_ADDREF, "void f()", asMETHOD(JSONData, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("JSONData", asBEHAVE_RELEASE, "void f()", asMETHOD(JSONData, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "RefObject@+ opImplCast()", asFUNCTION((RefCast<JSONData, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "JSONData@+ opCast()", asFUNCTION((RefCast<RefObject, JSONData>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "void IncrementReferences()", asMETHODPR(JSONData, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "void DecrementReferences()", asMETHODPR(JSONData, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "int GetReferences() const", asMETHODPR(JSONData, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool LoadBuffer(const int8 & buffer, int size)", asMETHODPR(JSONData, LoadBuffer, (const char * , int), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool LoadBuffer(const string & strBuffer)", asMETHODPR(JSONData, LoadBuffer, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool IsNull()", asMETHODPR(JSONData, IsNull, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "int ToInt()", asMETHODPR(JSONData, ToInt, (), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "float ToFloat()", asMETHODPR(JSONData, ToFloat, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool ToBool()", asMETHODPR(JSONData, ToBool, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "string ToString()", asMETHODPR(JSONData, ToString, (), std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool ToIntVal(int & value)", asMETHODPR(JSONData, ToIntVal, (int & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool ToFloatVal(float & value)", asMETHODPR(JSONData, ToFloatVal, (float & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool ToBoolVal(bool & value)", asMETHODPR(JSONData, ToBoolVal, (bool & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool ToStringVal(string & value)", asMETHODPR(JSONData, ToStringVal, (std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool IsArray()", asMETHODPR(JSONData, IsArray, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "int GetArraySize()", asMETHODPR(JSONData, GetArraySize, (), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "JSONValue GetArrayElement(int i)", asMETHODPR(JSONData, GetArrayElement, (int), JSONValue), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "bool IsHasMember(const string & name)", asMETHODPR(JSONData, IsHasMember, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONData", "JSONValue GetMember(const string & name)", asMETHODPR(JSONData, GetMember, (const std::string & ), JSONValue), asCALL_THISCALL);
	assert(r >= 0);
	// Class: JSONValue
	r = asEngine->RegisterObjectBehaviour("JSONValue", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_JSONValue0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("JSONValue", asBEHAVE_CONSTRUCT, "void f(const JSONValue & rhs)", asFUNCTION(Ctor_JSONValue1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("JSONValue", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_JSONValue), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool IsNull()", asMETHODPR(JSONValue, IsNull, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "int ToInt()", asMETHODPR(JSONValue, ToInt, (), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "float ToFloat()", asMETHODPR(JSONValue, ToFloat, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool ToBool()", asMETHODPR(JSONValue, ToBool, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "string ToString()", asMETHODPR(JSONValue, ToString, (), std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool ToIntVal(int & value)", asMETHODPR(JSONValue, ToIntVal, (int & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool ToFloatVal(float & value)", asMETHODPR(JSONValue, ToFloatVal, (float & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool ToBoolVal(bool & value)", asMETHODPR(JSONValue, ToBoolVal, (bool & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool ToStringVal(string & value)", asMETHODPR(JSONValue, ToStringVal, (std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool IsArray()", asMETHODPR(JSONValue, IsArray, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "int GetArraySize()", asMETHODPR(JSONValue, GetArraySize, (), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "JSONValue GetArrayElement(int i)", asMETHODPR(JSONValue, GetArrayElement, (int), JSONValue), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "bool IsHasMember(const string & name)", asMETHODPR(JSONValue, IsHasMember, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("JSONValue", "JSONValue GetMember(const string & name)", asMETHODPR(JSONValue, GetMember, (const std::string & ), JSONValue), asCALL_THISCALL);
	assert(r >= 0);
	// Class: StringHelp
	r = asEngine->RegisterObjectBehaviour("StringHelp", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_StringHelp0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("StringHelp", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_StringHelp), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "string StandardiseFilename(const string & path)", asFUNCTIONPR(StringHelp::StandardiseFilename, (const std::string & ), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "string StandardisePath(const string & path)", asFUNCTIONPR(StringHelp::StandardisePath, (const std::string & ), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "void SplitFilename(const string & fullName, string & outPath, string & outBaseFileName)", asFUNCTIONPR(StringHelp::SplitFilename, (const std::string & , std::string & , std::string & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "void SplitBaseFilename(const string & baseFileName, string & outBaseName, string & outExtention)", asFUNCTIONPR(StringHelp::SplitBaseFilename, (const std::string & , std::string & , std::string & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "void SplitFullFilename(const string & fullName, string & outPath, string & outBaseName, string & outExtention)", asFUNCTIONPR(StringHelp::SplitFullFilename, (const std::string & , std::string & , std::string & , std::string & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "string PathToWindowStyle(const string & fromPath)", asFUNCTIONPR(StringHelp::PathToWindowStyle, (const std::string & ), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "string IntToString(int val)", asFUNCTIONPR(StringHelp::IntToString, (int), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "int StringToInt(const string & val)", asFUNCTIONPR(StringHelp::StringToInt, (const std::string & ), int), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "string FloatToString(float val, int numPoint)", asFUNCTIONPR(StringHelp::FloatToString, (float, int), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "float StringToFloat(const string & val)", asFUNCTIONPR(StringHelp::StringToFloat, (const std::string & ), float), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "void StringToXYZ(const string & val, float & x, float & y, float & z)", asFUNCTIONPR(StringHelp::StringToXYZ, (const std::string & , float & , float & , float & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("StringHelp", "string FormatColor(int r, int g, int b)", asFUNCTIONPR(StringHelp::FormatColor, (int, int, int), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	// Class: HPoint
	r = asEngine->RegisterObjectBehaviour("HPoint", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_HPoint0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPoint", asBEHAVE_CONSTRUCT, "void f(const HPoint & pnt)", asFUNCTION(Ctor_HPoint1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPoint", asBEHAVE_CONSTRUCT, "void f(float x, float y, float z, float w)", asFUNCTION(Ctor_HPoint2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPoint", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_HPoint), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float X() const", asMETHODPR(HPoint, X, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float & X()", asMETHODPR(HPoint, X, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float Y() const", asMETHODPR(HPoint, Y, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float & Y()", asMETHODPR(HPoint, Y, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float Z() const", asMETHODPR(HPoint, Z, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float & Z()", asMETHODPR(HPoint, Z, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float W() const", asMETHODPR(HPoint, W, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPoint", "float & W()", asMETHODPR(HPoint, W, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	// Class: APoint
	r = asEngine->RegisterObjectBehaviour("APoint", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_APoint0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("APoint", asBEHAVE_CONSTRUCT, "void f(const APoint & pnt)", asFUNCTION(Ctor_APoint1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("APoint", asBEHAVE_CONSTRUCT, "void f(float x, float y, float z)", asFUNCTION(Ctor_APoint2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("APoint", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_APoint), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float X() const", asMETHODPR(APoint, X, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float & X()", asMETHODPR(APoint, X, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float Y() const", asMETHODPR(APoint, Y, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float & Y()", asMETHODPR(APoint, Y, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float Z() const", asMETHODPR(APoint, Z, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float & Z()", asMETHODPR(APoint, Z, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float W() const", asMETHODPR(APoint, W, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float & W()", asMETHODPR(APoint, W, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "void SetX(float x)", asMETHODPR(APoint, SetX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "void SetY(float y)", asMETHODPR(APoint, SetY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "void SetZ(float z)", asMETHODPR(APoint, SetZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "void SetW(float w)", asMETHODPR(APoint, SetW, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "void Set(float x, float y, float z, float )", asMETHODPR(APoint, Set, (float, float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("APoint", "float Dot(const AVector & vec) const", asMETHODPR(APoint, Dot, (const AVector & ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("APoint APoint_ORIGIN", (void*)&APoint::ORIGIN); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("APoint APoint_UNIT", (void*)&APoint::UNIT); 
	assert(r >= 0);
	// Class: AVector
	r = asEngine->RegisterObjectBehaviour("AVector", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_AVector0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("AVector", asBEHAVE_CONSTRUCT, "void f(const AVector & vec)", asFUNCTION(Ctor_AVector1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("AVector", asBEHAVE_CONSTRUCT, "void f(float x, float y, float z)", asFUNCTION(Ctor_AVector2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("AVector", asBEHAVE_CONSTRUCT, "void f(const Float3 & tuple)", asFUNCTION(Ctor_AVector3), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("AVector", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_AVector), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float X() const", asMETHODPR(AVector, X, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float & X()", asMETHODPR(AVector, X, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float Y() const", asMETHODPR(AVector, Y, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float & Y()", asMETHODPR(AVector, Y, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float Z() const", asMETHODPR(AVector, Z, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float & Z()", asMETHODPR(AVector, Z, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float W() const", asMETHODPR(AVector, W, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float & W()", asMETHODPR(AVector, W, (), float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void SetX(float x)", asMETHODPR(AVector, SetX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void SetY(float y)", asMETHODPR(AVector, SetY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void SetZ(float z)", asMETHODPR(AVector, SetZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void SetW(float w)", asMETHODPR(AVector, SetW, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void Set(float x, float y, float z, float )", asMETHODPR(AVector, Set, (float, float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float Length() const", asMETHODPR(AVector, Length, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float SquaredLength() const", asMETHODPR(AVector, SquaredLength, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float Dot(const AVector & vec) const", asMETHODPR(AVector, Dot, (const AVector & ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "float Normalize(float )", asMETHODPR(AVector, Normalize, (float), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "AVector Cross(const AVector & vec) const", asMETHODPR(AVector, Cross, (const AVector & ) const, AVector), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "AVector UnitCross(const AVector & vec) const", asMETHODPR(AVector, UnitCross, (const AVector & ) const, AVector), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void Orthonormalize(AVector & vec0, AVector & vec1, AVector & vec2)", asFUNCTIONPR(AVector::Orthonormalize, (AVector & , AVector & , AVector & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void Orthonormalize(AVector & vec)", asFUNCTIONPR(AVector::Orthonormalize, (AVector * ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void GenerateOrthonormalBasis(AVector & vec0, AVector & vec1, AVector & vec2)", asFUNCTIONPR(AVector::GenerateOrthonormalBasis, (AVector & , AVector & , AVector & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "void GenerateComplementBasis(AVector & vec0, AVector & vec1, const AVector & vec2)", asFUNCTIONPR(AVector::GenerateComplementBasis, (AVector & , AVector & , const AVector & ), void), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("AVector", "AVector AnglesToDirection(float angle0, float angle1)", asFUNCTIONPR(AVector::AnglesToDirection, (float, float), AVector), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("AVector AVector_ZERO", (void*)&AVector::ZERO); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("AVector AVector_UNIT_X", (void*)&AVector::UNIT_X); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("AVector AVector_UNIT_Y", (void*)&AVector::UNIT_Y); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("AVector AVector_UNIT_Z", (void*)&AVector::UNIT_Z); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("AVector AVector_UNIT", (void*)&AVector::UNIT); 
	assert(r >= 0);
	// Class: HPlane
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_HPlane0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f(const HPlane & plane)", asFUNCTION(Ctor_HPlane1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f(float normal0, float normal1, float normal2, float constant)", asFUNCTION(Ctor_HPlane2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f(const AVector & normal, float constant)", asFUNCTION(Ctor_HPlane3), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f(const AVector & normal, const APoint & p)", asFUNCTION(Ctor_HPlane4), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f(const APoint & p0, const APoint & p1, const APoint & p2)", asFUNCTION(Ctor_HPlane5), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_CONSTRUCT, "void f(const HPoint & tuple)", asFUNCTION(Ctor_HPlane6), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HPlane", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_HPlane), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "void SetNormal(const AVector & normal)", asMETHODPR(HPlane, SetNormal, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "void SetConstant(float constant)", asMETHODPR(HPlane, SetConstant, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "AVector GetNormal() const", asMETHODPR(HPlane, GetNormal, () const, AVector), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "float GetConstant() const", asMETHODPR(HPlane, GetConstant, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "float Normalize(float )", asMETHODPR(HPlane, Normalize, (float), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "float DistanceTo(const APoint & p) const", asMETHODPR(HPlane, DistanceTo, (const APoint & ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("HPlane", "int WhichSide(const APoint & p) const", asMETHODPR(HPlane, WhichSide, (const APoint & ) const, int), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Float2
	r = asEngine->RegisterObjectBehaviour("Float2", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Float20), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float2", asBEHAVE_CONSTRUCT, "void f(float f0, float f1)", asFUNCTION(Ctor_Float21), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float2", asBEHAVE_CONSTRUCT, "void f(const Float2 & tuple)", asFUNCTION(Ctor_Float22), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float2", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Float2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float2 Float2_ZERO", (void*)&Float2::ZERO); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float2 Float2_UNIT", (void*)&Float2::UNIT); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float2 Float2_HALFUNIT", (void*)&Float2::HALFUNIT); 
	assert(r >= 0);
	// Class: Float3
	r = asEngine->RegisterObjectBehaviour("Float3", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Float30), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float3", asBEHAVE_CONSTRUCT, "void f(float f0, float f1, float f2)", asFUNCTION(Ctor_Float31), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float3", asBEHAVE_CONSTRUCT, "void f(const Float3 & tuple)", asFUNCTION(Ctor_Float32), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float3", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Float3), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Float3", "Float3 MakeColor(uint32 r, uint32 g, uint32 b)", asFUNCTIONPR(Float3::MakeColor, (unsigned int, unsigned int, unsigned int), Float3), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_ZERO", (void*)&Float3::ZERO); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_UNIT", (void*)&Float3::UNIT); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_BLACK", (void*)&Float3::BLACK); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_WHITE", (void*)&Float3::WHITE); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_RED", (void*)&Float3::RED); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_GREEN", (void*)&Float3::GREEN); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_BLUE", (void*)&Float3::BLUE); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float3 Float3_YELLOW", (void*)&Float3::YELLOW); 
	assert(r >= 0);
	// Class: Float4
	r = asEngine->RegisterObjectBehaviour("Float4", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Float40), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float4", asBEHAVE_CONSTRUCT, "void f(float f0, float f1, float f2, float f3)", asFUNCTION(Ctor_Float41), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float4", asBEHAVE_CONSTRUCT, "void f(const Float4 & tuple)", asFUNCTION(Ctor_Float42), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Float4", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Float4), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Float4", "Float4 MakeColor(uint32 r, uint32 g, uint32 b, uint32 a)", asFUNCTIONPR(Float4::MakeColor, (unsigned int, unsigned int, unsigned int, unsigned int), Float4), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_ZERO", (void*)&Float4::ZERO); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_UNIT", (void*)&Float4::UNIT); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_BLACK", (void*)&Float4::BLACK); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_WHITE", (void*)&Float4::WHITE); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_RED", (void*)&Float4::RED); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_GREEN", (void*)&Float4::GREEN); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_BLUE", (void*)&Float4::BLUE); 
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Float4 Float4_YELLOW", (void*)&Float4::YELLOW); 
	assert(r >= 0);
	// Class: HMatrix
	r = asEngine->RegisterObjectBehaviour("HMatrix", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_HMatrix0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("HMatrix", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_HMatrix), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	// Class: Sizef
	r = asEngine->RegisterObjectBehaviour("Sizef", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Size0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Sizef", asBEHAVE_CONSTRUCT, "void f(const float & width, const float & height)", asFUNCTION(Ctor_Size1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Sizef", asBEHAVE_CONSTRUCT, "void f(const Sizef & size)", asFUNCTION(Ctor_Size2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Sizef", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Size), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Sizef", "void Clear()", asMETHODPR(Sizef, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Sizef", "void Set(const float & width, const float & height)", asMETHODPR(Sizef, Set, (const float & , const float & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Sizef", "void Swap(Sizef & val)", asMETHODPR(Sizef, Swap, (Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Sizef", "bool IsEmpty() const", asMETHODPR(Sizef, IsEmpty, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Sizef", "float Height", asOFFSET(Sizef, Height));
	assert(r >= 0);
	// Class: Rectf
	r = asEngine->RegisterObjectBehaviour("Rectf", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Rect0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Rectf", asBEHAVE_CONSTRUCT, "void f(const float & left, const float & bottom, const float & right, const float & top)", asFUNCTION(Ctor_Rect1), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Rectf", asBEHAVE_CONSTRUCT, "void f(const Rectf & rct)", asFUNCTION(Ctor_Rect2), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Rectf", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Rect), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "float Width() const", asMETHODPR(Rectf, Width, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "float Height() const", asMETHODPR(Rectf, Height, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "void Clear()", asMETHODPR(Rectf, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "void Set(const float & left, const float & bottom, const float & right, const float & top)", asMETHODPR(Rectf, Set, (const float & , const float & , const float & , const float & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "void Swap(Rectf & rect)", asMETHODPR(Rectf, Swap, (Rectf & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "bool IsEmpty() const", asMETHODPR(Rectf, IsEmpty, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "bool IsInSide(const Rectf & rect) const", asMETHODPR(Rectf, IsInSide, (const Rectf & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "bool IsIntersect(const Rectf & rect) const", asMETHODPR(Rectf, IsIntersect, (const Rectf & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Rectf", "bool IsInsize(float x, float y) const", asMETHODPR(Rectf, IsInsize, (float, float) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Rectf", "float Bottom", asOFFSET(Rectf, Bottom));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Rectf", "float Right", asOFFSET(Rectf, Right));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Rectf", "float Top", asOFFSET(Rectf, Top));
	assert(r >= 0);
	// Class: Transform
	r = asEngine->RegisterObjectBehaviour("Transform", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Transform0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Transform", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Transform), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void MakeIdentity()", asMETHODPR(Transform, MakeIdentity, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void MakeUnitScale()", asMETHODPR(Transform, MakeUnitScale, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "bool IsIdentity() const", asMETHODPR(Transform, IsIdentity, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "bool IsRSMatrix() const", asMETHODPR(Transform, IsRSMatrix, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "bool IsUniformScale() const", asMETHODPR(Transform, IsUniformScale, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetRotate(float x, float y, float z)", asMETHODPR(Transform, SetRotate, (float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetTranslate(const APoint & translate)", asMETHODPR(Transform, SetTranslate, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetTranslate(float x, float y, float z)", asMETHODPR(Transform, SetTranslate, (float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetTranslateX(float x)", asMETHODPR(Transform, SetTranslateX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetTranslateY(float y)", asMETHODPR(Transform, SetTranslateY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetTranslateZ(float z)", asMETHODPR(Transform, SetTranslateZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetTranslateXZ(float x, float z)", asMETHODPR(Transform, SetTranslateXZ, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetScale(const APoint & scale)", asMETHODPR(Transform, SetScale, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "void SetUniformScale(float scale)", asMETHODPR(Transform, SetUniformScale, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "const APoint & GetTranslate() const", asMETHODPR(Transform, GetTranslate, () const, const APoint & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "const APoint & GetScale() const", asMETHODPR(Transform, GetScale, () const, const APoint & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "float GetUniformScale() const", asMETHODPR(Transform, GetUniformScale, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "float GetNorm() const", asMETHODPR(Transform, GetNorm, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "Transform InverseTransform() const", asMETHODPR(Transform, InverseTransform, () const, Transform), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Transform", "int GetStreamingSize()", asFUNCTIONPR(Transform::GetStreamingSize, (), int), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Transform Transform_IDENTITY", (void*)&Transform::IDENTITY); 
	assert(r >= 0);
	// Class: Bound
	r = asEngine->RegisterObjectBehaviour("Bound", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_Bound0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Bound", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_Bound), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "void SetCenter(const APoint & center)", asMETHODPR(Bound, SetCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "void SetRadius(float radius)", asMETHODPR(Bound, SetRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "const APoint & GetCenter() const", asMETHODPR(Bound, GetCenter, () const, const APoint & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "float GetRadius() const", asMETHODPR(Bound, GetRadius, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "int WhichSide(const HPlane & plane) const", asMETHODPR(Bound, WhichSide, (const HPlane & ) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "void GrowToContain(const Bound & bound)", asMETHODPR(Bound, GrowToContain, (const Bound & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "void TransformBy(const Transform & transform, Bound & bound)", asMETHODPR(Bound, TransformBy, (const Transform & , Bound & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "void ComputeFromData(int numElements, int stride, const int8 & data)", asMETHODPR(Bound, ComputeFromData, (int, int, const char * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "bool TestIntersection(const APoint & origin, const AVector & direction, float tmin, float tmax) const", asMETHODPR(Bound, TestIntersection, (const APoint & , const AVector & , float, float) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "bool TestIntersection(const Bound & bound) const", asMETHODPR(Bound, TestIntersection, (const Bound & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Bound", "bool TestIntersection(const Bound & bound, float tmax, const AVector & velocity0, const AVector & velocity1) const", asMETHODPR(Bound, TestIntersection, (const Bound & , float, const AVector & , const AVector & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Controlledable
	r = asEngine->RegisterObjectBehaviour("Controlledable", asBEHAVE_ADDREF, "void f()", asMETHOD(Controlledable, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Controlledable", asBEHAVE_RELEASE, "void f()", asMETHOD(Controlledable, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Object@+ opImplCast()", asFUNCTION((RefCast<Controlledable, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Controlledable@+ opCast()", asFUNCTION((RefCast<Object, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Controlledable, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Controlledable@+ opCast()", asFUNCTION((RefCast<RefObject, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void IncrementReferences()", asMETHODPR(Controlledable, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void DecrementReferences()", asMETHODPR(Controlledable, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "int GetReferences() const", asMETHODPR(Controlledable, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void Enable(bool enable)", asMETHODPR(Controlledable, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsEnable() const", asMETHODPR(Controlledable, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SetActivate(bool act)", asMETHODPR(Controlledable, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsActivated() const", asMETHODPR(Controlledable, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "const Rtti & GetRttiType() const", asMETHODPR(Controlledable, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "uint16 GetRttiVersion() const", asMETHODPR(Controlledable, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsExactly(const Rtti & type) const", asMETHODPR(Controlledable, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsDerived(const Rtti & type) const", asMETHODPR(Controlledable, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Controlledable, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Controlledable, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Controlledable, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Controlledable, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "const string & GetResourcePath() const", asMETHODPR(Controlledable, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SetName(const string & name)", asMETHODPR(Controlledable, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "const string & GetName() const", asMETHODPR(Controlledable, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Controlledable, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SetID(int id)", asMETHODPR(Controlledable, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "int GetID() const", asMETHODPR(Controlledable, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Object @+ GetObjectByID(int id)", asMETHODPR(Controlledable, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void ComeInEventWorld()", asMETHODPR(Controlledable, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void GoOutEventWorld()", asMETHODPR(Controlledable, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsInEventWorld()", asMETHODPR(Controlledable, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void ResetPlay()", asMETHODPR(Controlledable, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void Play()", asMETHODPR(Controlledable, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsPlaying() const", asMETHODPR(Controlledable, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void Stop()", asMETHODPR(Controlledable, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void Reset()", asMETHODPR(Controlledable, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Controlledable, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsSelfCtrled() const", asMETHODPR(Controlledable, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Controlledable, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool IsAutoPlay() const", asMETHODPR(Controlledable, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "int GetNumControllers() const", asMETHODPR(Controlledable, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Controller @+ GetController(int i) const", asMETHODPR(Controlledable, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Controlledable, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool HasController(Controller @+ controller)", asMETHODPR(Controlledable, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void AttachController(Controller @+ controller)", asMETHODPR(Controlledable, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void DetachController(Controller @+ controller)", asMETHODPR(Controlledable, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void DetachAllControllers()", asMETHODPR(Controlledable, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "void SortControls()", asMETHODPR(Controlledable, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Controlledable, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Controlledable_TYPE", (void*)&Controlledable::TYPE); 
	assert(r >= 0);
	// Class: Controller
	// Enum: RepeatType
	r = asEngine->RegisterEnum("RepeatType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RepeatType", "RT_NONE", Controller::RepeatType::RT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RepeatType", "RT_CLAMP", Controller::RepeatType::RT_CLAMP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RepeatType", "RT_WRAP", Controller::RepeatType::RT_WRAP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RepeatType", "RT_CYCLE", Controller::RepeatType::RT_CYCLE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Controller", asBEHAVE_ADDREF, "void f()", asMETHOD(Controller, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Controller", asBEHAVE_RELEASE, "void f()", asMETHOD(Controller, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "Object@+ opImplCast()", asFUNCTION((RefCast<Controller, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Controller@+ opCast()", asFUNCTION((RefCast<Object, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Controller, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Controller@+ opCast()", asFUNCTION((RefCast<RefObject, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void IncrementReferences()", asMETHODPR(Controller, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void DecrementReferences()", asMETHODPR(Controller, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "int GetReferences() const", asMETHODPR(Controller, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void Enable(bool enable)", asMETHODPR(Controller, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsEnable() const", asMETHODPR(Controller, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetActivate(bool act)", asMETHODPR(Controller, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsActivated() const", asMETHODPR(Controller, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "const Rtti & GetRttiType() const", asMETHODPR(Controller, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "uint16 GetRttiVersion() const", asMETHODPR(Controller, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsExactly(const Rtti & type) const", asMETHODPR(Controller, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsDerived(const Rtti & type) const", asMETHODPR(Controller, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Controller, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Controller, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Controller, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Controller, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "const string & GetResourcePath() const", asMETHODPR(Controller, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetName(const string & name)", asMETHODPR(Controller, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "const string & GetName() const", asMETHODPR(Controller, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Controller, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetID(int id)", asMETHODPR(Controller, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "int GetID() const", asMETHODPR(Controller, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "Object @+ GetObjectByID(int id)", asMETHODPR(Controller, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void ComeInEventWorld()", asMETHODPR(Controller, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void GoOutEventWorld()", asMETHODPR(Controller, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsInEventWorld()", asMETHODPR(Controller, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetPriority(int priority)", asMETHODPR(Controller, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "int GetPriority() const", asMETHODPR(Controller, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void ResetPlay()", asMETHODPR(Controller, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void Play()", asMETHODPR(Controller, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsPlaying() const", asMETHODPR(Controller, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void Stop()", asMETHODPR(Controller, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void Reset()", asMETHODPR(Controller, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetMaxPlayTime(float time)", asMETHODPR(Controller, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "float GetMaxPlayTime() const", asMETHODPR(Controller, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetDelayPlayTime(float time)", asMETHODPR(Controller, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "float GetDelayPlayTime() const", asMETHODPR(Controller, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "float GetPlayedTime() const", asMETHODPR(Controller, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "float GetPlayedTimeMinusDelay() const", asMETHODPR(Controller, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(Controller, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool IsPlayedDoDetach() const", asMETHODPR(Controller, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "Controlledable @+ GetControlledable() const", asMETHODPR(Controller, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(Controller, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Controller_TYPE", (void*)&Controller::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Controller", "RepeatType Repeat", asOFFSET(Controller, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Controller", "double MinTime", asOFFSET(Controller, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Controller", "double MaxTime", asOFFSET(Controller, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Controller", "double Phase", asOFFSET(Controller, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Controller", "double Frequency", asOFFSET(Controller, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Controller", "bool Active", asOFFSET(Controller, Active));
	assert(r >= 0);
	// Class: InterpCurveController
	r = asEngine->RegisterObjectBehaviour("InterpCurveController", asBEHAVE_FACTORY, "InterpCurveController @ f()", asFUNCTION(fInterpCurveController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void IncrementReferences()", asMETHODPR(InterpCurveController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void DecrementReferences()", asMETHODPR(InterpCurveController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "int GetReferences() const", asMETHODPR(InterpCurveController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void Enable(bool enable)", asMETHODPR(InterpCurveController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsEnable() const", asMETHODPR(InterpCurveController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetActivate(bool act)", asMETHODPR(InterpCurveController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsActivated() const", asMETHODPR(InterpCurveController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetName(const string & name)", asMETHODPR(InterpCurveController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "const string & GetName() const", asMETHODPR(InterpCurveController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetID(int id)", asMETHODPR(InterpCurveController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "int GetID() const", asMETHODPR(InterpCurveController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void ComeInEventWorld()", asMETHODPR(InterpCurveController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void GoOutEventWorld()", asMETHODPR(InterpCurveController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsInEventWorld()", asMETHODPR(InterpCurveController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetPriority(int priority)", asMETHODPR(InterpCurveController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "int GetPriority() const", asMETHODPR(InterpCurveController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void ResetPlay()", asMETHODPR(InterpCurveController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void Play()", asMETHODPR(InterpCurveController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsPlaying() const", asMETHODPR(InterpCurveController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void Stop()", asMETHODPR(InterpCurveController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void Reset()", asMETHODPR(InterpCurveController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "float GetPlayedTime() const", asMETHODPR(InterpCurveController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "bool IsRelatively() const", asMETHODPR(InterpCurveController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveController_TYPE", (void*)&InterpCurveController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveController", "RepeatType Repeat", asOFFSET(InterpCurveController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveController", "double MinTime", asOFFSET(InterpCurveController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveController", "double MaxTime", asOFFSET(InterpCurveController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveController", "double Phase", asOFFSET(InterpCurveController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveController", "double Frequency", asOFFSET(InterpCurveController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveController", "bool Active", asOFFSET(InterpCurveController, Active));
	assert(r >= 0);
	// Class: InterpCurveFloatController
	r = asEngine->RegisterObjectBehaviour("InterpCurveFloatController", asBEHAVE_FACTORY, "InterpCurveFloatController @ f(float initValue)", asFUNCTION(fInterpCurveFloatController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveFloatController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveFloatController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveFloatController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveFloatController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloatController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveFloatController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveFloatController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloatController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveFloatController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveFloatController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloatController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveFloatController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveFloatController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloatController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveFloatController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveFloatController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void IncrementReferences()", asMETHODPR(InterpCurveFloatController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void DecrementReferences()", asMETHODPR(InterpCurveFloatController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "int GetReferences() const", asMETHODPR(InterpCurveFloatController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void Enable(bool enable)", asMETHODPR(InterpCurveFloatController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsEnable() const", asMETHODPR(InterpCurveFloatController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetActivate(bool act)", asMETHODPR(InterpCurveFloatController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsActivated() const", asMETHODPR(InterpCurveFloatController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveFloatController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveFloatController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveFloatController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveFloatController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveFloatController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveFloatController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveFloatController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveFloatController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveFloatController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetName(const string & name)", asMETHODPR(InterpCurveFloatController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "const string & GetName() const", asMETHODPR(InterpCurveFloatController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveFloatController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetID(int id)", asMETHODPR(InterpCurveFloatController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "int GetID() const", asMETHODPR(InterpCurveFloatController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveFloatController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void ComeInEventWorld()", asMETHODPR(InterpCurveFloatController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void GoOutEventWorld()", asMETHODPR(InterpCurveFloatController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsInEventWorld()", asMETHODPR(InterpCurveFloatController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetPriority(int priority)", asMETHODPR(InterpCurveFloatController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "int GetPriority() const", asMETHODPR(InterpCurveFloatController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void ResetPlay()", asMETHODPR(InterpCurveFloatController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void Play()", asMETHODPR(InterpCurveFloatController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsPlaying() const", asMETHODPR(InterpCurveFloatController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void Stop()", asMETHODPR(InterpCurveFloatController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void Reset()", asMETHODPR(InterpCurveFloatController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveFloatController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveFloatController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveFloatController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveFloatController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "float GetPlayedTime() const", asMETHODPR(InterpCurveFloatController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveFloatController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveFloatController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveFloatController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveFloatController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveFloatController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveFloatController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveFloatController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveFloatController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveFloatController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveFloatController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "bool IsRelatively() const", asMETHODPR(InterpCurveFloatController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void SetInitValue(float val)", asMETHODPR(InterpCurveFloatController, SetInitValue, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "const float & GetInitValue() const", asMETHODPR(InterpCurveFloatController, GetInitValue, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "const float & GetCurValueRaw() const", asMETHODPR(InterpCurveFloatController, GetCurValueRaw, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "const float & GetCurValueRelatived() const", asMETHODPR(InterpCurveFloatController, GetCurValueRelatived, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void Clear()", asMETHODPR(InterpCurveFloatController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "void AddPoint(float inVal, float outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveFloatController, AddPoint, (float, float, InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveFloatController_TYPE", (void*)&InterpCurveFloatController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloatController", "RepeatType Repeat", asOFFSET(InterpCurveFloatController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloatController", "double MinTime", asOFFSET(InterpCurveFloatController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloatController", "double MaxTime", asOFFSET(InterpCurveFloatController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloatController", "double Phase", asOFFSET(InterpCurveFloatController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloatController", "double Frequency", asOFFSET(InterpCurveFloatController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloatController", "bool Active", asOFFSET(InterpCurveFloatController, Active));
	assert(r >= 0);
	// Class: InterpCurveFloat3Controller
	r = asEngine->RegisterObjectBehaviour("InterpCurveFloat3Controller", asBEHAVE_FACTORY, "InterpCurveFloat3Controller @ f(const Float3 & initValue)", asFUNCTION(fInterpCurveFloat3Controller0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveFloat3Controller", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveFloat3Controller, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveFloat3Controller", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveFloat3Controller, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveFloat3Controller@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveFloat3Controller@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveFloat3Controller@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveFloat3Controller@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void IncrementReferences()", asMETHODPR(InterpCurveFloat3Controller, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void DecrementReferences()", asMETHODPR(InterpCurveFloat3Controller, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "int GetReferences() const", asMETHODPR(InterpCurveFloat3Controller, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void Enable(bool enable)", asMETHODPR(InterpCurveFloat3Controller, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsEnable() const", asMETHODPR(InterpCurveFloat3Controller, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetActivate(bool act)", asMETHODPR(InterpCurveFloat3Controller, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsActivated() const", asMETHODPR(InterpCurveFloat3Controller, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveFloat3Controller, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveFloat3Controller, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveFloat3Controller, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveFloat3Controller, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveFloat3Controller, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveFloat3Controller, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveFloat3Controller, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveFloat3Controller, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "const string & GetResourcePath() const", asMETHODPR(InterpCurveFloat3Controller, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetName(const string & name)", asMETHODPR(InterpCurveFloat3Controller, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "const string & GetName() const", asMETHODPR(InterpCurveFloat3Controller, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveFloat3Controller, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetID(int id)", asMETHODPR(InterpCurveFloat3Controller, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "int GetID() const", asMETHODPR(InterpCurveFloat3Controller, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveFloat3Controller, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void ComeInEventWorld()", asMETHODPR(InterpCurveFloat3Controller, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void GoOutEventWorld()", asMETHODPR(InterpCurveFloat3Controller, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsInEventWorld()", asMETHODPR(InterpCurveFloat3Controller, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetPriority(int priority)", asMETHODPR(InterpCurveFloat3Controller, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "int GetPriority() const", asMETHODPR(InterpCurveFloat3Controller, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void ResetPlay()", asMETHODPR(InterpCurveFloat3Controller, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void Play()", asMETHODPR(InterpCurveFloat3Controller, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsPlaying() const", asMETHODPR(InterpCurveFloat3Controller, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void Stop()", asMETHODPR(InterpCurveFloat3Controller, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void Reset()", asMETHODPR(InterpCurveFloat3Controller, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveFloat3Controller, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveFloat3Controller, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveFloat3Controller, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveFloat3Controller, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "float GetPlayedTime() const", asMETHODPR(InterpCurveFloat3Controller, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveFloat3Controller, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveFloat3Controller, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveFloat3Controller, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveFloat3Controller, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveFloat3Controller, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveFloat3Controller, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveFloat3Controller, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveFloat3Controller, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveFloat3Controller, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetRelatively(bool r)", asMETHODPR(InterpCurveFloat3Controller, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "bool IsRelatively() const", asMETHODPR(InterpCurveFloat3Controller, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void SetInitValue(const Float3 & val)", asMETHODPR(InterpCurveFloat3Controller, SetInitValue, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "const Float3 & GetInitValue() const", asMETHODPR(InterpCurveFloat3Controller, GetInitValue, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "const Float3 & GetCurValueRaw() const", asMETHODPR(InterpCurveFloat3Controller, GetCurValueRaw, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "const Float3 & GetCurValueRelatived() const", asMETHODPR(InterpCurveFloat3Controller, GetCurValueRelatived, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void Clear()", asMETHODPR(InterpCurveFloat3Controller, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void AddPoint(float inVal, const Float3 & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveFloat3Controller, AddPoint, (float, const Float3 & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "void AddPoint(float inVal, const AVector & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveFloat3Controller, AddPoint, (float, const AVector & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveFloat3Controller_TYPE", (void*)&InterpCurveFloat3Controller::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloat3Controller", "RepeatType Repeat", asOFFSET(InterpCurveFloat3Controller, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloat3Controller", "double MinTime", asOFFSET(InterpCurveFloat3Controller, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloat3Controller", "double MaxTime", asOFFSET(InterpCurveFloat3Controller, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloat3Controller", "double Phase", asOFFSET(InterpCurveFloat3Controller, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloat3Controller", "double Frequency", asOFFSET(InterpCurveFloat3Controller, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveFloat3Controller", "bool Active", asOFFSET(InterpCurveFloat3Controller, Active));
	assert(r >= 0);
	// Class: InterpCurveUniformScaleController
	r = asEngine->RegisterObjectBehaviour("InterpCurveUniformScaleController", asBEHAVE_FACTORY, "InterpCurveUniformScaleController @ f()", asFUNCTION(fInterpCurveUniformScaleController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveUniformScaleController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveUniformScaleController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveUniformScaleController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveUniformScaleController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "InterpCurveFloatController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveUniformScaleController, InterpCurveFloatController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "InterpCurveUniformScaleController@+ opCast()", asFUNCTION((RefCast<InterpCurveFloatController, InterpCurveUniformScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveUniformScaleController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveUniformScaleController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveUniformScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveUniformScaleController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveUniformScaleController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveUniformScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveUniformScaleController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveUniformScaleController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveUniformScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveUniformScaleController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveUniformScaleController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveUniformScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void IncrementReferences()", asMETHODPR(InterpCurveUniformScaleController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void DecrementReferences()", asMETHODPR(InterpCurveUniformScaleController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "int GetReferences() const", asMETHODPR(InterpCurveUniformScaleController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void Enable(bool enable)", asMETHODPR(InterpCurveUniformScaleController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsEnable() const", asMETHODPR(InterpCurveUniformScaleController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetActivate(bool act)", asMETHODPR(InterpCurveUniformScaleController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsActivated() const", asMETHODPR(InterpCurveUniformScaleController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveUniformScaleController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveUniformScaleController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveUniformScaleController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveUniformScaleController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveUniformScaleController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveUniformScaleController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveUniformScaleController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveUniformScaleController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveUniformScaleController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetName(const string & name)", asMETHODPR(InterpCurveUniformScaleController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "const string & GetName() const", asMETHODPR(InterpCurveUniformScaleController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveUniformScaleController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetID(int id)", asMETHODPR(InterpCurveUniformScaleController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "int GetID() const", asMETHODPR(InterpCurveUniformScaleController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveUniformScaleController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void ComeInEventWorld()", asMETHODPR(InterpCurveUniformScaleController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void GoOutEventWorld()", asMETHODPR(InterpCurveUniformScaleController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsInEventWorld()", asMETHODPR(InterpCurveUniformScaleController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetPriority(int priority)", asMETHODPR(InterpCurveUniformScaleController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "int GetPriority() const", asMETHODPR(InterpCurveUniformScaleController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void ResetPlay()", asMETHODPR(InterpCurveUniformScaleController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void Play()", asMETHODPR(InterpCurveUniformScaleController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsPlaying() const", asMETHODPR(InterpCurveUniformScaleController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void Stop()", asMETHODPR(InterpCurveUniformScaleController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void Reset()", asMETHODPR(InterpCurveUniformScaleController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveUniformScaleController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveUniformScaleController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveUniformScaleController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveUniformScaleController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "float GetPlayedTime() const", asMETHODPR(InterpCurveUniformScaleController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveUniformScaleController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveUniformScaleController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveUniformScaleController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveUniformScaleController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveUniformScaleController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveUniformScaleController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveUniformScaleController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveUniformScaleController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveUniformScaleController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveUniformScaleController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "bool IsRelatively() const", asMETHODPR(InterpCurveUniformScaleController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void SetInitValue(float val)", asMETHODPR(InterpCurveUniformScaleController, SetInitValue, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "const float & GetInitValue() const", asMETHODPR(InterpCurveUniformScaleController, GetInitValue, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "const float & GetCurValueRaw() const", asMETHODPR(InterpCurveUniformScaleController, GetCurValueRaw, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "const float & GetCurValueRelatived() const", asMETHODPR(InterpCurveUniformScaleController, GetCurValueRelatived, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void Clear()", asMETHODPR(InterpCurveUniformScaleController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveUniformScaleController", "void AddPoint(float inVal, float outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveUniformScaleController, AddPoint, (float, float, InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveUniformScaleController_TYPE", (void*)&InterpCurveUniformScaleController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveUniformScaleController", "RepeatType Repeat", asOFFSET(InterpCurveUniformScaleController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveUniformScaleController", "double MinTime", asOFFSET(InterpCurveUniformScaleController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveUniformScaleController", "double MaxTime", asOFFSET(InterpCurveUniformScaleController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveUniformScaleController", "double Phase", asOFFSET(InterpCurveUniformScaleController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveUniformScaleController", "double Frequency", asOFFSET(InterpCurveUniformScaleController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveUniformScaleController", "bool Active", asOFFSET(InterpCurveUniformScaleController, Active));
	assert(r >= 0);
	// Class: InterpCurveAlphaController
	r = asEngine->RegisterObjectBehaviour("InterpCurveAlphaController", asBEHAVE_FACTORY, "InterpCurveAlphaController @ f()", asFUNCTION(fInterpCurveAlphaController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveAlphaController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveAlphaController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveAlphaController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveAlphaController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "InterpCurveFloatController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveAlphaController, InterpCurveFloatController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloatController", "InterpCurveAlphaController@+ opCast()", asFUNCTION((RefCast<InterpCurveFloatController, InterpCurveAlphaController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveAlphaController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveAlphaController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveAlphaController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveAlphaController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveAlphaController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveAlphaController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveAlphaController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveAlphaController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveAlphaController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveAlphaController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveAlphaController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveAlphaController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void IncrementReferences()", asMETHODPR(InterpCurveAlphaController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void DecrementReferences()", asMETHODPR(InterpCurveAlphaController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "int GetReferences() const", asMETHODPR(InterpCurveAlphaController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void Enable(bool enable)", asMETHODPR(InterpCurveAlphaController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsEnable() const", asMETHODPR(InterpCurveAlphaController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetActivate(bool act)", asMETHODPR(InterpCurveAlphaController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsActivated() const", asMETHODPR(InterpCurveAlphaController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveAlphaController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveAlphaController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveAlphaController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveAlphaController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveAlphaController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveAlphaController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveAlphaController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveAlphaController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveAlphaController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetName(const string & name)", asMETHODPR(InterpCurveAlphaController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "const string & GetName() const", asMETHODPR(InterpCurveAlphaController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveAlphaController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetID(int id)", asMETHODPR(InterpCurveAlphaController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "int GetID() const", asMETHODPR(InterpCurveAlphaController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveAlphaController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void ComeInEventWorld()", asMETHODPR(InterpCurveAlphaController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void GoOutEventWorld()", asMETHODPR(InterpCurveAlphaController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsInEventWorld()", asMETHODPR(InterpCurveAlphaController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetPriority(int priority)", asMETHODPR(InterpCurveAlphaController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "int GetPriority() const", asMETHODPR(InterpCurveAlphaController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void ResetPlay()", asMETHODPR(InterpCurveAlphaController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void Play()", asMETHODPR(InterpCurveAlphaController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsPlaying() const", asMETHODPR(InterpCurveAlphaController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void Stop()", asMETHODPR(InterpCurveAlphaController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void Reset()", asMETHODPR(InterpCurveAlphaController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveAlphaController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveAlphaController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveAlphaController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveAlphaController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "float GetPlayedTime() const", asMETHODPR(InterpCurveAlphaController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveAlphaController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveAlphaController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveAlphaController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveAlphaController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveAlphaController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveAlphaController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveAlphaController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveAlphaController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveAlphaController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveAlphaController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "bool IsRelatively() const", asMETHODPR(InterpCurveAlphaController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void SetInitValue(float val)", asMETHODPR(InterpCurveAlphaController, SetInitValue, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "const float & GetInitValue() const", asMETHODPR(InterpCurveAlphaController, GetInitValue, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "const float & GetCurValueRaw() const", asMETHODPR(InterpCurveAlphaController, GetCurValueRaw, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "const float & GetCurValueRelatived() const", asMETHODPR(InterpCurveAlphaController, GetCurValueRelatived, () const, const float & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void Clear()", asMETHODPR(InterpCurveAlphaController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveAlphaController", "void AddPoint(float inVal, float outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveAlphaController, AddPoint, (float, float, InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveAlphaController_TYPE", (void*)&InterpCurveAlphaController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveAlphaController", "RepeatType Repeat", asOFFSET(InterpCurveAlphaController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveAlphaController", "double MinTime", asOFFSET(InterpCurveAlphaController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveAlphaController", "double MaxTime", asOFFSET(InterpCurveAlphaController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveAlphaController", "double Phase", asOFFSET(InterpCurveAlphaController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveAlphaController", "double Frequency", asOFFSET(InterpCurveAlphaController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveAlphaController", "bool Active", asOFFSET(InterpCurveAlphaController, Active));
	assert(r >= 0);
	// Class: InterpCurveScaleController
	r = asEngine->RegisterObjectBehaviour("InterpCurveScaleController", asBEHAVE_FACTORY, "InterpCurveScaleController @ f()", asFUNCTION(fInterpCurveScaleController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveScaleController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveScaleController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveScaleController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveScaleController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "InterpCurveFloat3Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveScaleController, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "InterpCurveScaleController@+ opCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, InterpCurveScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveScaleController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveScaleController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveScaleController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveScaleController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveScaleController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveScaleController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveScaleController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveScaleController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveScaleController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void IncrementReferences()", asMETHODPR(InterpCurveScaleController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void DecrementReferences()", asMETHODPR(InterpCurveScaleController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "int GetReferences() const", asMETHODPR(InterpCurveScaleController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void Enable(bool enable)", asMETHODPR(InterpCurveScaleController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsEnable() const", asMETHODPR(InterpCurveScaleController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetActivate(bool act)", asMETHODPR(InterpCurveScaleController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsActivated() const", asMETHODPR(InterpCurveScaleController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveScaleController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveScaleController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveScaleController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveScaleController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveScaleController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveScaleController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveScaleController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveScaleController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveScaleController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetName(const string & name)", asMETHODPR(InterpCurveScaleController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "const string & GetName() const", asMETHODPR(InterpCurveScaleController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveScaleController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetID(int id)", asMETHODPR(InterpCurveScaleController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "int GetID() const", asMETHODPR(InterpCurveScaleController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveScaleController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void ComeInEventWorld()", asMETHODPR(InterpCurveScaleController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void GoOutEventWorld()", asMETHODPR(InterpCurveScaleController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsInEventWorld()", asMETHODPR(InterpCurveScaleController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetPriority(int priority)", asMETHODPR(InterpCurveScaleController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "int GetPriority() const", asMETHODPR(InterpCurveScaleController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void ResetPlay()", asMETHODPR(InterpCurveScaleController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void Play()", asMETHODPR(InterpCurveScaleController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsPlaying() const", asMETHODPR(InterpCurveScaleController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void Stop()", asMETHODPR(InterpCurveScaleController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void Reset()", asMETHODPR(InterpCurveScaleController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveScaleController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveScaleController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveScaleController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveScaleController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "float GetPlayedTime() const", asMETHODPR(InterpCurveScaleController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveScaleController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveScaleController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveScaleController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveScaleController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveScaleController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveScaleController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveScaleController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveScaleController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveScaleController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveScaleController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "bool IsRelatively() const", asMETHODPR(InterpCurveScaleController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void SetInitValue(const Float3 & val)", asMETHODPR(InterpCurveScaleController, SetInitValue, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "const Float3 & GetInitValue() const", asMETHODPR(InterpCurveScaleController, GetInitValue, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "const Float3 & GetCurValueRaw() const", asMETHODPR(InterpCurveScaleController, GetCurValueRaw, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "const Float3 & GetCurValueRelatived() const", asMETHODPR(InterpCurveScaleController, GetCurValueRelatived, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void Clear()", asMETHODPR(InterpCurveScaleController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void AddPoint(float inVal, const Float3 & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveScaleController, AddPoint, (float, const Float3 & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveScaleController", "void AddPoint(float inVal, const AVector & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveScaleController, AddPoint, (float, const AVector & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveScaleController_TYPE", (void*)&InterpCurveScaleController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveScaleController", "RepeatType Repeat", asOFFSET(InterpCurveScaleController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveScaleController", "double MinTime", asOFFSET(InterpCurveScaleController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveScaleController", "double MaxTime", asOFFSET(InterpCurveScaleController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveScaleController", "double Phase", asOFFSET(InterpCurveScaleController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveScaleController", "double Frequency", asOFFSET(InterpCurveScaleController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveScaleController", "bool Active", asOFFSET(InterpCurveScaleController, Active));
	assert(r >= 0);
	// Class: InterpCurveRotateController
	r = asEngine->RegisterObjectBehaviour("InterpCurveRotateController", asBEHAVE_FACTORY, "InterpCurveRotateController @ f()", asFUNCTION(fInterpCurveRotateController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveRotateController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveRotateController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveRotateController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveRotateController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "InterpCurveFloat3Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveRotateController, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "InterpCurveRotateController@+ opCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, InterpCurveRotateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveRotateController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveRotateController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveRotateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveRotateController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveRotateController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveRotateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveRotateController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveRotateController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveRotateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveRotateController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveRotateController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveRotateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void IncrementReferences()", asMETHODPR(InterpCurveRotateController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void DecrementReferences()", asMETHODPR(InterpCurveRotateController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "int GetReferences() const", asMETHODPR(InterpCurveRotateController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void Enable(bool enable)", asMETHODPR(InterpCurveRotateController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsEnable() const", asMETHODPR(InterpCurveRotateController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetActivate(bool act)", asMETHODPR(InterpCurveRotateController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsActivated() const", asMETHODPR(InterpCurveRotateController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveRotateController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveRotateController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveRotateController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveRotateController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveRotateController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveRotateController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveRotateController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveRotateController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveRotateController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetName(const string & name)", asMETHODPR(InterpCurveRotateController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "const string & GetName() const", asMETHODPR(InterpCurveRotateController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveRotateController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetID(int id)", asMETHODPR(InterpCurveRotateController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "int GetID() const", asMETHODPR(InterpCurveRotateController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveRotateController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void ComeInEventWorld()", asMETHODPR(InterpCurveRotateController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void GoOutEventWorld()", asMETHODPR(InterpCurveRotateController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsInEventWorld()", asMETHODPR(InterpCurveRotateController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetPriority(int priority)", asMETHODPR(InterpCurveRotateController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "int GetPriority() const", asMETHODPR(InterpCurveRotateController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void ResetPlay()", asMETHODPR(InterpCurveRotateController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void Play()", asMETHODPR(InterpCurveRotateController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsPlaying() const", asMETHODPR(InterpCurveRotateController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void Stop()", asMETHODPR(InterpCurveRotateController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void Reset()", asMETHODPR(InterpCurveRotateController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveRotateController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveRotateController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveRotateController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveRotateController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "float GetPlayedTime() const", asMETHODPR(InterpCurveRotateController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveRotateController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveRotateController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveRotateController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveRotateController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveRotateController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveRotateController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveRotateController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveRotateController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveRotateController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveRotateController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "bool IsRelatively() const", asMETHODPR(InterpCurveRotateController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void SetInitValue(const Float3 & val)", asMETHODPR(InterpCurveRotateController, SetInitValue, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "const Float3 & GetInitValue() const", asMETHODPR(InterpCurveRotateController, GetInitValue, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "const Float3 & GetCurValueRaw() const", asMETHODPR(InterpCurveRotateController, GetCurValueRaw, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "const Float3 & GetCurValueRelatived() const", asMETHODPR(InterpCurveRotateController, GetCurValueRelatived, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void Clear()", asMETHODPR(InterpCurveRotateController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void AddPoint(float inVal, const Float3 & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveRotateController, AddPoint, (float, const Float3 & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveRotateController", "void AddPoint(float inVal, const AVector & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveRotateController, AddPoint, (float, const AVector & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveRotateController_TYPE", (void*)&InterpCurveRotateController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveRotateController", "RepeatType Repeat", asOFFSET(InterpCurveRotateController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveRotateController", "double MinTime", asOFFSET(InterpCurveRotateController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveRotateController", "double MaxTime", asOFFSET(InterpCurveRotateController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveRotateController", "double Phase", asOFFSET(InterpCurveRotateController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveRotateController", "double Frequency", asOFFSET(InterpCurveRotateController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveRotateController", "bool Active", asOFFSET(InterpCurveRotateController, Active));
	assert(r >= 0);
	// Class: InterpCurveTranslateController
	r = asEngine->RegisterObjectBehaviour("InterpCurveTranslateController", asBEHAVE_FACTORY, "InterpCurveTranslateController @ f()", asFUNCTION(fInterpCurveTranslateController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveTranslateController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveTranslateController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveTranslateController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveTranslateController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "InterpCurveFloat3Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveTranslateController, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "InterpCurveTranslateController@+ opCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, InterpCurveTranslateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveTranslateController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveTranslateController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveTranslateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveTranslateController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveTranslateController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveTranslateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveTranslateController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveTranslateController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveTranslateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveTranslateController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveTranslateController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveTranslateController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void IncrementReferences()", asMETHODPR(InterpCurveTranslateController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void DecrementReferences()", asMETHODPR(InterpCurveTranslateController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "int GetReferences() const", asMETHODPR(InterpCurveTranslateController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void Enable(bool enable)", asMETHODPR(InterpCurveTranslateController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsEnable() const", asMETHODPR(InterpCurveTranslateController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetActivate(bool act)", asMETHODPR(InterpCurveTranslateController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsActivated() const", asMETHODPR(InterpCurveTranslateController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveTranslateController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveTranslateController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveTranslateController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveTranslateController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveTranslateController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveTranslateController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveTranslateController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveTranslateController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveTranslateController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetName(const string & name)", asMETHODPR(InterpCurveTranslateController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "const string & GetName() const", asMETHODPR(InterpCurveTranslateController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveTranslateController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetID(int id)", asMETHODPR(InterpCurveTranslateController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "int GetID() const", asMETHODPR(InterpCurveTranslateController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveTranslateController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void ComeInEventWorld()", asMETHODPR(InterpCurveTranslateController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void GoOutEventWorld()", asMETHODPR(InterpCurveTranslateController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsInEventWorld()", asMETHODPR(InterpCurveTranslateController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetPriority(int priority)", asMETHODPR(InterpCurveTranslateController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "int GetPriority() const", asMETHODPR(InterpCurveTranslateController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void ResetPlay()", asMETHODPR(InterpCurveTranslateController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void Play()", asMETHODPR(InterpCurveTranslateController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsPlaying() const", asMETHODPR(InterpCurveTranslateController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void Stop()", asMETHODPR(InterpCurveTranslateController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void Reset()", asMETHODPR(InterpCurveTranslateController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveTranslateController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveTranslateController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveTranslateController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveTranslateController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "float GetPlayedTime() const", asMETHODPR(InterpCurveTranslateController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveTranslateController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveTranslateController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveTranslateController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveTranslateController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveTranslateController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveTranslateController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveTranslateController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveTranslateController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveTranslateController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveTranslateController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "bool IsRelatively() const", asMETHODPR(InterpCurveTranslateController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void SetInitValue(const Float3 & val)", asMETHODPR(InterpCurveTranslateController, SetInitValue, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "const Float3 & GetInitValue() const", asMETHODPR(InterpCurveTranslateController, GetInitValue, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "const Float3 & GetCurValueRaw() const", asMETHODPR(InterpCurveTranslateController, GetCurValueRaw, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "const Float3 & GetCurValueRelatived() const", asMETHODPR(InterpCurveTranslateController, GetCurValueRelatived, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void Clear()", asMETHODPR(InterpCurveTranslateController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void AddPoint(float inVal, const Float3 & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveTranslateController, AddPoint, (float, const Float3 & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveTranslateController", "void AddPoint(float inVal, const AVector & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveTranslateController, AddPoint, (float, const AVector & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveTranslateController_TYPE", (void*)&InterpCurveTranslateController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveTranslateController", "RepeatType Repeat", asOFFSET(InterpCurveTranslateController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveTranslateController", "double MinTime", asOFFSET(InterpCurveTranslateController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveTranslateController", "double MaxTime", asOFFSET(InterpCurveTranslateController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveTranslateController", "double Phase", asOFFSET(InterpCurveTranslateController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveTranslateController", "double Frequency", asOFFSET(InterpCurveTranslateController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveTranslateController", "bool Active", asOFFSET(InterpCurveTranslateController, Active));
	assert(r >= 0);
	// Class: InterpCurveColorController
	r = asEngine->RegisterObjectBehaviour("InterpCurveColorController", asBEHAVE_FACTORY, "InterpCurveColorController @ f()", asFUNCTION(fInterpCurveColorController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveColorController", asBEHAVE_ADDREF, "void f()", asMETHOD(InterpCurveColorController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("InterpCurveColorController", asBEHAVE_RELEASE, "void f()", asMETHOD(InterpCurveColorController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "InterpCurveFloat3Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveColorController, InterpCurveFloat3Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveFloat3Controller", "InterpCurveColorController@+ opCast()", asFUNCTION((RefCast<InterpCurveFloat3Controller, InterpCurveColorController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "InterpCurveController@+ opImplCast()", asFUNCTION((RefCast<InterpCurveColorController, InterpCurveController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveController", "InterpCurveColorController@+ opCast()", asFUNCTION((RefCast<InterpCurveController, InterpCurveColorController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "Controller@+ opImplCast()", asFUNCTION((RefCast<InterpCurveColorController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "InterpCurveColorController@+ opCast()", asFUNCTION((RefCast<Controller, InterpCurveColorController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "Object@+ opImplCast()", asFUNCTION((RefCast<InterpCurveColorController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "InterpCurveColorController@+ opCast()", asFUNCTION((RefCast<Object, InterpCurveColorController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<InterpCurveColorController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "InterpCurveColorController@+ opCast()", asFUNCTION((RefCast<RefObject, InterpCurveColorController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void IncrementReferences()", asMETHODPR(InterpCurveColorController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void DecrementReferences()", asMETHODPR(InterpCurveColorController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "int GetReferences() const", asMETHODPR(InterpCurveColorController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void Enable(bool enable)", asMETHODPR(InterpCurveColorController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsEnable() const", asMETHODPR(InterpCurveColorController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetActivate(bool act)", asMETHODPR(InterpCurveColorController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsActivated() const", asMETHODPR(InterpCurveColorController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "const Rtti & GetRttiType() const", asMETHODPR(InterpCurveColorController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "uint16 GetRttiVersion() const", asMETHODPR(InterpCurveColorController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsExactly(const Rtti & type) const", asMETHODPR(InterpCurveColorController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsDerived(const Rtti & type) const", asMETHODPR(InterpCurveColorController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveColorController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(InterpCurveColorController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(InterpCurveColorController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(InterpCurveColorController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "const string & GetResourcePath() const", asMETHODPR(InterpCurveColorController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetName(const string & name)", asMETHODPR(InterpCurveColorController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "const string & GetName() const", asMETHODPR(InterpCurveColorController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(InterpCurveColorController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetID(int id)", asMETHODPR(InterpCurveColorController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "int GetID() const", asMETHODPR(InterpCurveColorController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "Object @+ GetObjectByID(int id)", asMETHODPR(InterpCurveColorController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void ComeInEventWorld()", asMETHODPR(InterpCurveColorController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void GoOutEventWorld()", asMETHODPR(InterpCurveColorController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsInEventWorld()", asMETHODPR(InterpCurveColorController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetPriority(int priority)", asMETHODPR(InterpCurveColorController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "int GetPriority() const", asMETHODPR(InterpCurveColorController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void ResetPlay()", asMETHODPR(InterpCurveColorController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void Play()", asMETHODPR(InterpCurveColorController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsPlaying() const", asMETHODPR(InterpCurveColorController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void Stop()", asMETHODPR(InterpCurveColorController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void Reset()", asMETHODPR(InterpCurveColorController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetMaxPlayTime(float time)", asMETHODPR(InterpCurveColorController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "float GetMaxPlayTime() const", asMETHODPR(InterpCurveColorController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetDelayPlayTime(float time)", asMETHODPR(InterpCurveColorController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "float GetDelayPlayTime() const", asMETHODPR(InterpCurveColorController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "float GetPlayedTime() const", asMETHODPR(InterpCurveColorController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(InterpCurveColorController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(InterpCurveColorController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsPlayedDoDetach() const", asMETHODPR(InterpCurveColorController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "Controlledable @+ GetControlledable() const", asMETHODPR(InterpCurveColorController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(InterpCurveColorController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetAttachUpdateInit(bool doUpdate)", asMETHODPR(InterpCurveColorController, SetAttachUpdateInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsAttachUpdateInit() const", asMETHODPR(InterpCurveColorController, IsAttachUpdateInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetDetachResetInit(bool doReset)", asMETHODPR(InterpCurveColorController, SetDetachResetInit, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsDetachResetInit() const", asMETHODPR(InterpCurveColorController, IsDetachResetInit, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetRelatively(bool r)", asMETHODPR(InterpCurveColorController, SetRelatively, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "bool IsRelatively() const", asMETHODPR(InterpCurveColorController, IsRelatively, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void SetInitValue(const Float3 & val)", asMETHODPR(InterpCurveColorController, SetInitValue, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "const Float3 & GetInitValue() const", asMETHODPR(InterpCurveColorController, GetInitValue, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "const Float3 & GetCurValueRaw() const", asMETHODPR(InterpCurveColorController, GetCurValueRaw, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "const Float3 & GetCurValueRelatived() const", asMETHODPR(InterpCurveColorController, GetCurValueRelatived, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void Clear()", asMETHODPR(InterpCurveColorController, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void AddPoint(float inVal, const Float3 & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveColorController, AddPoint, (float, const Float3 & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("InterpCurveColorController", "void AddPoint(float inVal, const AVector & outVal, InterpCurveMode mode)", asMETHODPR(InterpCurveColorController, AddPoint, (float, const AVector & , InterpCurveMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti InterpCurveColorController_TYPE", (void*)&InterpCurveColorController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveColorController", "RepeatType Repeat", asOFFSET(InterpCurveColorController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveColorController", "double MinTime", asOFFSET(InterpCurveColorController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveColorController", "double MaxTime", asOFFSET(InterpCurveColorController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveColorController", "double Phase", asOFFSET(InterpCurveColorController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveColorController", "double Frequency", asOFFSET(InterpCurveColorController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("InterpCurveColorController", "bool Active", asOFFSET(InterpCurveColorController, Active));
	assert(r >= 0);
	// Class: Buffer
	// Enum: Usage
	r = asEngine->RegisterEnum("Usage");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Usage", "BU_STATIC", Buffer::Usage::BU_STATIC);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Usage", "BU_DYNAMIC", Buffer::Usage::BU_DYNAMIC);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Usage", "BU_RENDERTARGET", Buffer::Usage::BU_RENDERTARGET);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Usage", "BU_DEPTHSTENCIL", Buffer::Usage::BU_DEPTHSTENCIL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Usage", "BU_TEXTURE", Buffer::Usage::BU_TEXTURE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Usage", "BU_QUANTITY", Buffer::Usage::BU_QUANTITY);
	assert(r >= 0);
	// Enum: Locking
	r = asEngine->RegisterEnum("Locking");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Locking", "BL_READ_ONLY", Buffer::Locking::BL_READ_ONLY);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Locking", "BL_WRITE_ONLY", Buffer::Locking::BL_WRITE_ONLY);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Locking", "BL_READ_WRITE", Buffer::Locking::BL_READ_WRITE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Locking", "BL_QUANTITY", Buffer::Locking::BL_QUANTITY);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Buffer", asBEHAVE_ADDREF, "void f()", asMETHOD(Buffer, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Buffer", asBEHAVE_RELEASE, "void f()", asMETHOD(Buffer, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "Object@+ opImplCast()", asFUNCTION((RefCast<Buffer, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Buffer@+ opCast()", asFUNCTION((RefCast<Object, Buffer>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Buffer, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Buffer@+ opCast()", asFUNCTION((RefCast<RefObject, Buffer>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void IncrementReferences()", asMETHODPR(Buffer, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void DecrementReferences()", asMETHODPR(Buffer, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "int GetReferences() const", asMETHODPR(Buffer, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void Enable(bool enable)", asMETHODPR(Buffer, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsEnable() const", asMETHODPR(Buffer, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void SetActivate(bool act)", asMETHODPR(Buffer, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsActivated() const", asMETHODPR(Buffer, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "const Rtti & GetRttiType() const", asMETHODPR(Buffer, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "uint16 GetRttiVersion() const", asMETHODPR(Buffer, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsExactly(const Rtti & type) const", asMETHODPR(Buffer, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsDerived(const Rtti & type) const", asMETHODPR(Buffer, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Buffer, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Buffer, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Buffer, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Buffer, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "const string & GetResourcePath() const", asMETHODPR(Buffer, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void SetName(const string & name)", asMETHODPR(Buffer, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "const string & GetName() const", asMETHODPR(Buffer, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Buffer, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void SetID(int id)", asMETHODPR(Buffer, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "int GetID() const", asMETHODPR(Buffer, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "Object @+ GetObjectByID(int id)", asMETHODPR(Buffer, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void ComeInEventWorld()", asMETHODPR(Buffer, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void GoOutEventWorld()", asMETHODPR(Buffer, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "bool IsInEventWorld()", asMETHODPR(Buffer, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "int GetNumElements() const", asMETHODPR(Buffer, GetNumElements, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "int GetElementSize() const", asMETHODPR(Buffer, GetElementSize, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "Usage GetUsage() const", asMETHODPR(Buffer, GetUsage, () const, Buffer::Usage), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void SetNumElements(int numElements)", asMETHODPR(Buffer, SetNumElements, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "int GetNumBytes() const", asMETHODPR(Buffer, GetNumBytes, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Buffer", "void ClearData()", asMETHODPR(Buffer, ClearData, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Buffer_TYPE", (void*)&Buffer::TYPE); 
	assert(r >= 0);
	// Class: Texture
	// Enum: Format
	r = asEngine->RegisterEnum("Format");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_NONE", Texture::Format::TF_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_R5G6B5", Texture::Format::TF_R5G6B5);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A1R5G5B5", Texture::Format::TF_A1R5G5B5);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A4R4G4B4", Texture::Format::TF_A4R4G4B4);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A8", Texture::Format::TF_A8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_L8", Texture::Format::TF_L8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A8L8", Texture::Format::TF_A8L8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_R8G8B8", Texture::Format::TF_R8G8B8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A8R8G8B8", Texture::Format::TF_A8R8G8B8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A8B8G8R8", Texture::Format::TF_A8B8G8R8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_L16", Texture::Format::TF_L16);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_G16R16", Texture::Format::TF_G16R16);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A16B16G16R16", Texture::Format::TF_A16B16G16R16);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_R16F", Texture::Format::TF_R16F);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_G16R16F", Texture::Format::TF_G16R16F);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A16B16G16R16F", Texture::Format::TF_A16B16G16R16F);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_R32F", Texture::Format::TF_R32F);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_G32R32F", Texture::Format::TF_G32R32F);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_A32B32G32R32F", Texture::Format::TF_A32B32G32R32F);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_DXT1", Texture::Format::TF_DXT1);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_DXT3", Texture::Format::TF_DXT3);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_DXT5", Texture::Format::TF_DXT5);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_D16", Texture::Format::TF_D16);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_D24S8", Texture::Format::TF_D24S8);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_RGB_PVRTC_4B", Texture::Format::TF_RGB_PVRTC_4B);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_RGB_PVRTC_2B", Texture::Format::TF_RGB_PVRTC_2B);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_RGBA_PVRTC_4B", Texture::Format::TF_RGBA_PVRTC_4B);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_RGBA_PVRTC_2B", Texture::Format::TF_RGBA_PVRTC_2B);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_RGB_ETC1", Texture::Format::TF_RGB_ETC1);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Format", "TF_QUANTITY", Texture::Format::TF_QUANTITY);
	assert(r >= 0);
	// Enum: Type
	r = asEngine->RegisterEnum("Type");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Type", "TT_1D", Texture::Type::TT_1D);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Type", "TT_2D", Texture::Type::TT_2D);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Type", "TT_3D", Texture::Type::TT_3D);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Type", "TT_CUBE", Texture::Type::TT_CUBE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("Type", "TT_QUANTITY", Texture::Type::TT_QUANTITY);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Texture", asBEHAVE_ADDREF, "void f()", asMETHOD(Texture, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Texture", asBEHAVE_RELEASE, "void f()", asMETHOD(Texture, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Object@+ opImplCast()", asFUNCTION((RefCast<Texture, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Texture@+ opCast()", asFUNCTION((RefCast<Object, Texture>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Texture, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Texture@+ opCast()", asFUNCTION((RefCast<RefObject, Texture>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void IncrementReferences()", asMETHODPR(Texture, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void DecrementReferences()", asMETHODPR(Texture, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetReferences() const", asMETHODPR(Texture, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void Enable(bool enable)", asMETHODPR(Texture, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsEnable() const", asMETHODPR(Texture, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void SetActivate(bool act)", asMETHODPR(Texture, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsActivated() const", asMETHODPR(Texture, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "const Rtti & GetRttiType() const", asMETHODPR(Texture, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "uint16 GetRttiVersion() const", asMETHODPR(Texture, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsExactly(const Rtti & type) const", asMETHODPR(Texture, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsDerived(const Rtti & type) const", asMETHODPR(Texture, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Texture, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Texture, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Texture, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Texture, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "const string & GetResourcePath() const", asMETHODPR(Texture, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void SetName(const string & name)", asMETHODPR(Texture, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "const string & GetName() const", asMETHODPR(Texture, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Texture, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void SetID(int id)", asMETHODPR(Texture, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetID() const", asMETHODPR(Texture, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Object @+ GetObjectByID(int id)", asMETHODPR(Texture, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void ComeInEventWorld()", asMETHODPR(Texture, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void GoOutEventWorld()", asMETHODPR(Texture, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsInEventWorld()", asMETHODPR(Texture, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Format GetFormat() const", asMETHODPR(Texture, GetFormat, () const, Texture::Format), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Type GetTextureType() const", asMETHODPR(Texture, GetTextureType, () const, Texture::Type), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Usage GetUsage() const", asMETHODPR(Texture, GetUsage, () const, Buffer::Usage), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetNumLevels() const", asMETHODPR(Texture, GetNumLevels, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetNumDimensions() const", asMETHODPR(Texture, GetNumDimensions, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetDimension(int i, int level) const", asMETHODPR(Texture, GetDimension, (int, int) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetNumLevelBytes(int level) const", asMETHODPR(Texture, GetNumLevelBytes, (int) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetNumTotalBytes() const", asMETHODPR(Texture, GetNumTotalBytes, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetLevelOffset(int level) const", asMETHODPR(Texture, GetLevelOffset, (int) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "int GetPixelSize() const", asMETHODPR(Texture, GetPixelSize, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsCompressed() const", asMETHODPR(Texture, IsCompressed, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsMipmapable() const", asMETHODPR(Texture, IsMipmapable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsDataNull() const", asMETHODPR(Texture, IsDataNull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void SetBindDoClearData(bool doClearData)", asMETHODPR(Texture, SetBindDoClearData, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "bool IsBindDoClearData() const", asMETHODPR(Texture, IsBindDoClearData, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "void ClearData()", asMETHODPR(Texture, ClearData, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Texture_TYPE", (void*)&Texture::TYPE); 
	assert(r >= 0);
	// Class: Texture2D
	r = asEngine->RegisterObjectBehaviour("Texture2D", asBEHAVE_ADDREF, "void f()", asMETHOD(Texture2D, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Texture2D", asBEHAVE_RELEASE, "void f()", asMETHOD(Texture2D, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Texture@+ opImplCast()", asFUNCTION((RefCast<Texture2D, Texture>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture", "Texture2D@+ opCast()", asFUNCTION((RefCast<Texture, Texture2D>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Object@+ opImplCast()", asFUNCTION((RefCast<Texture2D, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Texture2D@+ opCast()", asFUNCTION((RefCast<Object, Texture2D>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Texture2D, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Texture2D@+ opCast()", asFUNCTION((RefCast<RefObject, Texture2D>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void IncrementReferences()", asMETHODPR(Texture2D, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void DecrementReferences()", asMETHODPR(Texture2D, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetReferences() const", asMETHODPR(Texture2D, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void Enable(bool enable)", asMETHODPR(Texture2D, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsEnable() const", asMETHODPR(Texture2D, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void SetActivate(bool act)", asMETHODPR(Texture2D, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsActivated() const", asMETHODPR(Texture2D, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "const Rtti & GetRttiType() const", asMETHODPR(Texture2D, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "uint16 GetRttiVersion() const", asMETHODPR(Texture2D, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsExactly(const Rtti & type) const", asMETHODPR(Texture2D, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsDerived(const Rtti & type) const", asMETHODPR(Texture2D, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Texture2D, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Texture2D, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Texture2D, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Texture2D, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "const string & GetResourcePath() const", asMETHODPR(Texture2D, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void SetName(const string & name)", asMETHODPR(Texture2D, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "const string & GetName() const", asMETHODPR(Texture2D, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Texture2D, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void SetID(int id)", asMETHODPR(Texture2D, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetID() const", asMETHODPR(Texture2D, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Object @+ GetObjectByID(int id)", asMETHODPR(Texture2D, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void ComeInEventWorld()", asMETHODPR(Texture2D, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void GoOutEventWorld()", asMETHODPR(Texture2D, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsInEventWorld()", asMETHODPR(Texture2D, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Format GetFormat() const", asMETHODPR(Texture2D, GetFormat, () const, Texture::Format), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Type GetTextureType() const", asMETHODPR(Texture2D, GetTextureType, () const, Texture::Type), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "Usage GetUsage() const", asMETHODPR(Texture2D, GetUsage, () const, Buffer::Usage), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetNumLevels() const", asMETHODPR(Texture2D, GetNumLevels, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetNumDimensions() const", asMETHODPR(Texture2D, GetNumDimensions, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetDimension(int i, int level) const", asMETHODPR(Texture2D, GetDimension, (int, int) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetNumLevelBytes(int level) const", asMETHODPR(Texture2D, GetNumLevelBytes, (int) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetNumTotalBytes() const", asMETHODPR(Texture2D, GetNumTotalBytes, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetLevelOffset(int level) const", asMETHODPR(Texture2D, GetLevelOffset, (int) const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetPixelSize() const", asMETHODPR(Texture2D, GetPixelSize, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsCompressed() const", asMETHODPR(Texture2D, IsCompressed, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsMipmapable() const", asMETHODPR(Texture2D, IsMipmapable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsDataNull() const", asMETHODPR(Texture2D, IsDataNull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void SetBindDoClearData(bool doClearData)", asMETHODPR(Texture2D, SetBindDoClearData, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool IsBindDoClearData() const", asMETHODPR(Texture2D, IsBindDoClearData, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void ClearData()", asMETHODPR(Texture2D, ClearData, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetWidth() const", asMETHODPR(Texture2D, GetWidth, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "int GetHeight() const", asMETHODPR(Texture2D, GetHeight, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool CanGenMinmaps() const", asMETHODPR(Texture2D, CanGenMinmaps, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "void GenerateMipmaps()", asMETHODPR(Texture2D, GenerateMipmaps, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Texture2D", "bool HasMipmaps() const", asMETHODPR(Texture2D, HasMipmaps, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Texture2D_TYPE", (void*)&Texture2D::TYPE); 
	assert(r >= 0);
	// Class: Shine
	r = asEngine->RegisterObjectBehaviour("Shine", asBEHAVE_FACTORY, "Shine @ f()", asFUNCTION(fShine0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Shine", asBEHAVE_ADDREF, "void f()", asMETHOD(Shine, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Shine", asBEHAVE_RELEASE, "void f()", asMETHOD(Shine, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "Object@+ opImplCast()", asFUNCTION((RefCast<Shine, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Shine@+ opCast()", asFUNCTION((RefCast<Object, Shine>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Shine, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Shine@+ opCast()", asFUNCTION((RefCast<RefObject, Shine>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void IncrementReferences()", asMETHODPR(Shine, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void DecrementReferences()", asMETHODPR(Shine, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "int GetReferences() const", asMETHODPR(Shine, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void Enable(bool enable)", asMETHODPR(Shine, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsEnable() const", asMETHODPR(Shine, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void SetActivate(bool act)", asMETHODPR(Shine, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsActivated() const", asMETHODPR(Shine, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "const Rtti & GetRttiType() const", asMETHODPR(Shine, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "uint16 GetRttiVersion() const", asMETHODPR(Shine, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsExactly(const Rtti & type) const", asMETHODPR(Shine, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsDerived(const Rtti & type) const", asMETHODPR(Shine, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Shine, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Shine, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Shine, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Shine, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "const string & GetResourcePath() const", asMETHODPR(Shine, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void SetName(const string & name)", asMETHODPR(Shine, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "const string & GetName() const", asMETHODPR(Shine, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Shine, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void SetID(int id)", asMETHODPR(Shine, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "int GetID() const", asMETHODPR(Shine, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "Object @+ GetObjectByID(int id)", asMETHODPR(Shine, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void ComeInEventWorld()", asMETHODPR(Shine, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void GoOutEventWorld()", asMETHODPR(Shine, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "bool IsInEventWorld()", asMETHODPR(Shine, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Shine", "void ReCalTemp()", asMETHODPR(Shine, ReCalTemp, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Shine_TYPE", (void*)&Shine::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Shine", "Float4 Emissive", asOFFSET(Shine, Emissive));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Shine", "Float4 Ambient", asOFFSET(Shine, Ambient));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Shine", "Float4 Diffuse", asOFFSET(Shine, Diffuse));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Shine", "Float4 Specular", asOFFSET(Shine, Specular));
	assert(r >= 0);
	// Class: Movable
	// Enum: CullingMode
	r = asEngine->RegisterEnum("CullingMode");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CullingMode", "CULL_DYNAMIC", Movable::CullingMode::CULL_DYNAMIC);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CullingMode", "CULL_ALWAYS", Movable::CullingMode::CULL_ALWAYS);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CullingMode", "CULL_NEVER", Movable::CullingMode::CULL_NEVER);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Movable", asBEHAVE_ADDREF, "void f()", asMETHOD(Movable, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Movable", asBEHAVE_RELEASE, "void f()", asMETHOD(Movable, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Movable, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Movable@+ opCast()", asFUNCTION((RefCast<Controlledable, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Object@+ opImplCast()", asFUNCTION((RefCast<Movable, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Movable@+ opCast()", asFUNCTION((RefCast<Object, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Movable, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Movable@+ opCast()", asFUNCTION((RefCast<RefObject, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void IncrementReferences()", asMETHODPR(Movable, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void DecrementReferences()", asMETHODPR(Movable, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "int GetReferences() const", asMETHODPR(Movable, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void Enable(bool enable)", asMETHODPR(Movable, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsEnable() const", asMETHODPR(Movable, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetActivate(bool act)", asMETHODPR(Movable, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsActivated() const", asMETHODPR(Movable, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "const Rtti & GetRttiType() const", asMETHODPR(Movable, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "uint16 GetRttiVersion() const", asMETHODPR(Movable, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsExactly(const Rtti & type) const", asMETHODPR(Movable, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsDerived(const Rtti & type) const", asMETHODPR(Movable, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Movable, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Movable, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Movable, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Movable, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "const string & GetResourcePath() const", asMETHODPR(Movable, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetName(const string & name)", asMETHODPR(Movable, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "const string & GetName() const", asMETHODPR(Movable, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Movable, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetID(int id)", asMETHODPR(Movable, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "int GetID() const", asMETHODPR(Movable, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Object @+ GetObjectByID(int id)", asMETHODPR(Movable, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void ComeInEventWorld()", asMETHODPR(Movable, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void GoOutEventWorld()", asMETHODPR(Movable, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsInEventWorld()", asMETHODPR(Movable, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void ResetPlay()", asMETHODPR(Movable, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void Play()", asMETHODPR(Movable, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsPlaying() const", asMETHODPR(Movable, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void Stop()", asMETHODPR(Movable, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void Reset()", asMETHODPR(Movable, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Movable, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsSelfCtrled() const", asMETHODPR(Movable, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Movable, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsAutoPlay() const", asMETHODPR(Movable, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "int GetNumControllers() const", asMETHODPR(Movable, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Controller @+ GetController(int i) const", asMETHODPR(Movable, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Movable, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool HasController(Controller @+ controller)", asMETHODPR(Movable, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void AttachController(Controller @+ controller)", asMETHODPR(Movable, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void DetachController(Controller @+ controller)", asMETHODPR(Movable, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void DetachAllControllers()", asMETHODPR(Movable, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SortControls()", asMETHODPR(Movable, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Movable, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void Show(bool show)", asMETHODPR(Movable, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsShow() const", asMETHODPR(Movable, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Movable, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsColorSelfCtrled() const", asMETHODPR(Movable, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetColor(const Float3 & color)", asMETHODPR(Movable, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "const Float3 & GetColor() const", asMETHODPR(Movable, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Movable, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsAlphaSelfCtrled() const", asMETHODPR(Movable, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetAlpha(float alpha)", asMETHODPR(Movable, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "float GetAlpha() const", asMETHODPR(Movable, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Movable, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Movable, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "void SetBrightness(float brightness)", asMETHODPR(Movable, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "float GetBrightness() const", asMETHODPR(Movable, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "const Float3 & GetLastColor() const", asMETHODPR(Movable, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "float GetLastAlpha() const", asMETHODPR(Movable, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "float GetLastBrightness() const", asMETHODPR(Movable, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Movable @+ GetParent()", asMETHODPR(Movable, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Movable_TYPE", (void*)&Movable::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "Transform LocalTransform", asOFFSET(Movable, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "Transform WorldTransform", asOFFSET(Movable, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "bool WorldTransformIsCurrent", asOFFSET(Movable, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Movable, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "Transform BoundWorldTransform", asOFFSET(Movable, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "Bound WorldBound", asOFFSET(Movable, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "bool WorldBoundIsCurrent", asOFFSET(Movable, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Movable", "CullingMode Culling", asOFFSET(Movable, Culling));
	assert(r >= 0);
	// Class: VertexFormat
	r = asEngine->RegisterObjectBehaviour("VertexFormat", asBEHAVE_ADDREF, "void f()", asMETHOD(VertexFormat, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("VertexFormat", asBEHAVE_RELEASE, "void f()", asMETHOD(VertexFormat, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "Object@+ opImplCast()", asFUNCTION((RefCast<VertexFormat, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "VertexFormat@+ opCast()", asFUNCTION((RefCast<Object, VertexFormat>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "RefObject@+ opImplCast()", asFUNCTION((RefCast<VertexFormat, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "VertexFormat@+ opCast()", asFUNCTION((RefCast<RefObject, VertexFormat>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void IncrementReferences()", asMETHODPR(VertexFormat, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void DecrementReferences()", asMETHODPR(VertexFormat, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "int GetReferences() const", asMETHODPR(VertexFormat, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void Enable(bool enable)", asMETHODPR(VertexFormat, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsEnable() const", asMETHODPR(VertexFormat, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void SetActivate(bool act)", asMETHODPR(VertexFormat, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsActivated() const", asMETHODPR(VertexFormat, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "const Rtti & GetRttiType() const", asMETHODPR(VertexFormat, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "uint16 GetRttiVersion() const", asMETHODPR(VertexFormat, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsExactly(const Rtti & type) const", asMETHODPR(VertexFormat, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsDerived(const Rtti & type) const", asMETHODPR(VertexFormat, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(VertexFormat, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(VertexFormat, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(VertexFormat, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(VertexFormat, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "const string & GetResourcePath() const", asMETHODPR(VertexFormat, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void SetName(const string & name)", asMETHODPR(VertexFormat, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "const string & GetName() const", asMETHODPR(VertexFormat, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "Object @+ GetObjectByName(const string & name)", asMETHODPR(VertexFormat, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void SetID(int id)", asMETHODPR(VertexFormat, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "int GetID() const", asMETHODPR(VertexFormat, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "Object @+ GetObjectByID(int id)", asMETHODPR(VertexFormat, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void ComeInEventWorld()", asMETHODPR(VertexFormat, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "void GoOutEventWorld()", asMETHODPR(VertexFormat, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("VertexFormat", "bool IsInEventWorld()", asMETHODPR(VertexFormat, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti VertexFormat_TYPE", (void*)&VertexFormat::TYPE); 
	assert(r >= 0);
	// Class: Renderable
	// Enum: PrimitiveType
	r = asEngine->RegisterEnum("PrimitiveType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_NONE", Renderable::PrimitiveType::PT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_POLYPOINT", Renderable::PrimitiveType::PT_POLYPOINT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_POLYSEGMENTS_DISJOINT", Renderable::PrimitiveType::PT_POLYSEGMENTS_DISJOINT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_POLYSEGMENTS_CONTIGUOUS", Renderable::PrimitiveType::PT_POLYSEGMENTS_CONTIGUOUS);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_TRIANGLES", Renderable::PrimitiveType::PT_TRIANGLES);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_TRIMESH", Renderable::PrimitiveType::PT_TRIMESH);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_TRISTRIP", Renderable::PrimitiveType::PT_TRISTRIP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_TRIFAN", Renderable::PrimitiveType::PT_TRIFAN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PrimitiveType", "PT_MAX_QUANTITY", Renderable::PrimitiveType::PT_MAX_QUANTITY);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Renderable", asBEHAVE_ADDREF, "void f()", asMETHOD(Renderable, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Renderable", asBEHAVE_RELEASE, "void f()", asMETHOD(Renderable, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Movable@+ opImplCast()", asFUNCTION((RefCast<Renderable, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Renderable@+ opCast()", asFUNCTION((RefCast<Movable, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Renderable, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Renderable@+ opCast()", asFUNCTION((RefCast<Controlledable, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Object@+ opImplCast()", asFUNCTION((RefCast<Renderable, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Renderable@+ opCast()", asFUNCTION((RefCast<Object, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Renderable, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Renderable@+ opCast()", asFUNCTION((RefCast<RefObject, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void IncrementReferences()", asMETHODPR(Renderable, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void DecrementReferences()", asMETHODPR(Renderable, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "int GetReferences() const", asMETHODPR(Renderable, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void Enable(bool enable)", asMETHODPR(Renderable, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsEnable() const", asMETHODPR(Renderable, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetActivate(bool act)", asMETHODPR(Renderable, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsActivated() const", asMETHODPR(Renderable, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "const Rtti & GetRttiType() const", asMETHODPR(Renderable, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "uint16 GetRttiVersion() const", asMETHODPR(Renderable, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsExactly(const Rtti & type) const", asMETHODPR(Renderable, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsDerived(const Rtti & type) const", asMETHODPR(Renderable, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Renderable, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Renderable, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Renderable, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Renderable, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "const string & GetResourcePath() const", asMETHODPR(Renderable, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetName(const string & name)", asMETHODPR(Renderable, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "const string & GetName() const", asMETHODPR(Renderable, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Renderable, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetID(int id)", asMETHODPR(Renderable, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "int GetID() const", asMETHODPR(Renderable, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Object @+ GetObjectByID(int id)", asMETHODPR(Renderable, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void ComeInEventWorld()", asMETHODPR(Renderable, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void GoOutEventWorld()", asMETHODPR(Renderable, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsInEventWorld()", asMETHODPR(Renderable, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void ResetPlay()", asMETHODPR(Renderable, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void Play()", asMETHODPR(Renderable, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsPlaying() const", asMETHODPR(Renderable, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void Stop()", asMETHODPR(Renderable, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void Reset()", asMETHODPR(Renderable, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Renderable, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsSelfCtrled() const", asMETHODPR(Renderable, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Renderable, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsAutoPlay() const", asMETHODPR(Renderable, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "int GetNumControllers() const", asMETHODPR(Renderable, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Controller @+ GetController(int i) const", asMETHODPR(Renderable, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Renderable, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool HasController(Controller @+ controller)", asMETHODPR(Renderable, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void AttachController(Controller @+ controller)", asMETHODPR(Renderable, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void DetachController(Controller @+ controller)", asMETHODPR(Renderable, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void DetachAllControllers()", asMETHODPR(Renderable, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SortControls()", asMETHODPR(Renderable, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Renderable, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void Show(bool show)", asMETHODPR(Renderable, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsShow() const", asMETHODPR(Renderable, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Renderable, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsColorSelfCtrled() const", asMETHODPR(Renderable, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetColor(const Float3 & color)", asMETHODPR(Renderable, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "const Float3 & GetColor() const", asMETHODPR(Renderable, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Renderable, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsAlphaSelfCtrled() const", asMETHODPR(Renderable, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetAlpha(float alpha)", asMETHODPR(Renderable, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "float GetAlpha() const", asMETHODPR(Renderable, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Renderable, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Renderable, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "void SetBrightness(float brightness)", asMETHODPR(Renderable, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "float GetBrightness() const", asMETHODPR(Renderable, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "const Float3 & GetLastColor() const", asMETHODPR(Renderable, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "float GetLastAlpha() const", asMETHODPR(Renderable, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "float GetLastBrightness() const", asMETHODPR(Renderable, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Movable @+ GetParent()", asMETHODPR(Renderable, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "PrimitiveType GetPrimitiveType() const", asMETHODPR(Renderable, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Renderable_TYPE", (void*)&Renderable::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "Transform LocalTransform", asOFFSET(Renderable, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "Transform WorldTransform", asOFFSET(Renderable, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "bool WorldTransformIsCurrent", asOFFSET(Renderable, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Renderable, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "Transform BoundWorldTransform", asOFFSET(Renderable, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "Bound WorldBound", asOFFSET(Renderable, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "bool WorldBoundIsCurrent", asOFFSET(Renderable, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Renderable", "CullingMode Culling", asOFFSET(Renderable, Culling));
	assert(r >= 0);
	// Class: Triangles
	r = asEngine->RegisterObjectBehaviour("Triangles", asBEHAVE_ADDREF, "void f()", asMETHOD(Triangles, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Triangles", asBEHAVE_RELEASE, "void f()", asMETHOD(Triangles, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Renderable@+ opImplCast()", asFUNCTION((RefCast<Triangles, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Triangles@+ opCast()", asFUNCTION((RefCast<Renderable, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Movable@+ opImplCast()", asFUNCTION((RefCast<Triangles, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Triangles@+ opCast()", asFUNCTION((RefCast<Movable, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Triangles, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Triangles@+ opCast()", asFUNCTION((RefCast<Controlledable, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Object@+ opImplCast()", asFUNCTION((RefCast<Triangles, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Triangles@+ opCast()", asFUNCTION((RefCast<Object, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Triangles, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Triangles@+ opCast()", asFUNCTION((RefCast<RefObject, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void IncrementReferences()", asMETHODPR(Triangles, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void DecrementReferences()", asMETHODPR(Triangles, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "int GetReferences() const", asMETHODPR(Triangles, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void Enable(bool enable)", asMETHODPR(Triangles, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsEnable() const", asMETHODPR(Triangles, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetActivate(bool act)", asMETHODPR(Triangles, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsActivated() const", asMETHODPR(Triangles, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "const Rtti & GetRttiType() const", asMETHODPR(Triangles, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "uint16 GetRttiVersion() const", asMETHODPR(Triangles, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsExactly(const Rtti & type) const", asMETHODPR(Triangles, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsDerived(const Rtti & type) const", asMETHODPR(Triangles, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Triangles, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Triangles, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Triangles, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Triangles, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "const string & GetResourcePath() const", asMETHODPR(Triangles, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetName(const string & name)", asMETHODPR(Triangles, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "const string & GetName() const", asMETHODPR(Triangles, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Triangles, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetID(int id)", asMETHODPR(Triangles, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "int GetID() const", asMETHODPR(Triangles, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Object @+ GetObjectByID(int id)", asMETHODPR(Triangles, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void ComeInEventWorld()", asMETHODPR(Triangles, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void GoOutEventWorld()", asMETHODPR(Triangles, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsInEventWorld()", asMETHODPR(Triangles, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void ResetPlay()", asMETHODPR(Triangles, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void Play()", asMETHODPR(Triangles, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsPlaying() const", asMETHODPR(Triangles, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void Stop()", asMETHODPR(Triangles, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void Reset()", asMETHODPR(Triangles, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Triangles, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsSelfCtrled() const", asMETHODPR(Triangles, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Triangles, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsAutoPlay() const", asMETHODPR(Triangles, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "int GetNumControllers() const", asMETHODPR(Triangles, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Controller @+ GetController(int i) const", asMETHODPR(Triangles, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Triangles, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool HasController(Controller @+ controller)", asMETHODPR(Triangles, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void AttachController(Controller @+ controller)", asMETHODPR(Triangles, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void DetachController(Controller @+ controller)", asMETHODPR(Triangles, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void DetachAllControllers()", asMETHODPR(Triangles, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SortControls()", asMETHODPR(Triangles, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Triangles, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void Show(bool show)", asMETHODPR(Triangles, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsShow() const", asMETHODPR(Triangles, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Triangles, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsColorSelfCtrled() const", asMETHODPR(Triangles, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetColor(const Float3 & color)", asMETHODPR(Triangles, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "const Float3 & GetColor() const", asMETHODPR(Triangles, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Triangles, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsAlphaSelfCtrled() const", asMETHODPR(Triangles, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetAlpha(float alpha)", asMETHODPR(Triangles, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "float GetAlpha() const", asMETHODPR(Triangles, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Triangles, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Triangles, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "void SetBrightness(float brightness)", asMETHODPR(Triangles, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "float GetBrightness() const", asMETHODPR(Triangles, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "const Float3 & GetLastColor() const", asMETHODPR(Triangles, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "float GetLastAlpha() const", asMETHODPR(Triangles, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "float GetLastBrightness() const", asMETHODPR(Triangles, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Movable @+ GetParent()", asMETHODPR(Triangles, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "PrimitiveType GetPrimitiveType() const", asMETHODPR(Triangles, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Triangles_TYPE", (void*)&Triangles::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "Transform LocalTransform", asOFFSET(Triangles, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "Transform WorldTransform", asOFFSET(Triangles, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "bool WorldTransformIsCurrent", asOFFSET(Triangles, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Triangles, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "Transform BoundWorldTransform", asOFFSET(Triangles, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "Bound WorldBound", asOFFSET(Triangles, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "bool WorldBoundIsCurrent", asOFFSET(Triangles, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Triangles", "CullingMode Culling", asOFFSET(Triangles, Culling));
	assert(r >= 0);
	// Class: TriMesh
	r = asEngine->RegisterObjectBehaviour("TriMesh", asBEHAVE_ADDREF, "void f()", asMETHOD(TriMesh, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("TriMesh", asBEHAVE_RELEASE, "void f()", asMETHOD(TriMesh, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Triangles@+ opImplCast()", asFUNCTION((RefCast<TriMesh, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "TriMesh@+ opCast()", asFUNCTION((RefCast<Triangles, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Renderable@+ opImplCast()", asFUNCTION((RefCast<TriMesh, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "TriMesh@+ opCast()", asFUNCTION((RefCast<Renderable, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Movable@+ opImplCast()", asFUNCTION((RefCast<TriMesh, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "TriMesh@+ opCast()", asFUNCTION((RefCast<Movable, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<TriMesh, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "TriMesh@+ opCast()", asFUNCTION((RefCast<Controlledable, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Object@+ opImplCast()", asFUNCTION((RefCast<TriMesh, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "TriMesh@+ opCast()", asFUNCTION((RefCast<Object, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "RefObject@+ opImplCast()", asFUNCTION((RefCast<TriMesh, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "TriMesh@+ opCast()", asFUNCTION((RefCast<RefObject, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void IncrementReferences()", asMETHODPR(TriMesh, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void DecrementReferences()", asMETHODPR(TriMesh, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "int GetReferences() const", asMETHODPR(TriMesh, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void Enable(bool enable)", asMETHODPR(TriMesh, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsEnable() const", asMETHODPR(TriMesh, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetActivate(bool act)", asMETHODPR(TriMesh, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsActivated() const", asMETHODPR(TriMesh, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "const Rtti & GetRttiType() const", asMETHODPR(TriMesh, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "uint16 GetRttiVersion() const", asMETHODPR(TriMesh, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsExactly(const Rtti & type) const", asMETHODPR(TriMesh, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsDerived(const Rtti & type) const", asMETHODPR(TriMesh, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(TriMesh, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(TriMesh, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(TriMesh, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(TriMesh, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "const string & GetResourcePath() const", asMETHODPR(TriMesh, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetName(const string & name)", asMETHODPR(TriMesh, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "const string & GetName() const", asMETHODPR(TriMesh, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Object @+ GetObjectByName(const string & name)", asMETHODPR(TriMesh, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetID(int id)", asMETHODPR(TriMesh, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "int GetID() const", asMETHODPR(TriMesh, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Object @+ GetObjectByID(int id)", asMETHODPR(TriMesh, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void ComeInEventWorld()", asMETHODPR(TriMesh, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void GoOutEventWorld()", asMETHODPR(TriMesh, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsInEventWorld()", asMETHODPR(TriMesh, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void ResetPlay()", asMETHODPR(TriMesh, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void Play()", asMETHODPR(TriMesh, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsPlaying() const", asMETHODPR(TriMesh, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void Stop()", asMETHODPR(TriMesh, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void Reset()", asMETHODPR(TriMesh, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(TriMesh, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsSelfCtrled() const", asMETHODPR(TriMesh, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetAutoPlay(bool autoPlay)", asMETHODPR(TriMesh, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsAutoPlay() const", asMETHODPR(TriMesh, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "int GetNumControllers() const", asMETHODPR(TriMesh, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Controller @+ GetController(int i) const", asMETHODPR(TriMesh, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(TriMesh, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool HasController(Controller @+ controller)", asMETHODPR(TriMesh, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void AttachController(Controller @+ controller)", asMETHODPR(TriMesh, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void DetachController(Controller @+ controller)", asMETHODPR(TriMesh, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void DetachAllControllers()", asMETHODPR(TriMesh, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SortControls()", asMETHODPR(TriMesh, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(TriMesh, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void Show(bool show)", asMETHODPR(TriMesh, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsShow() const", asMETHODPR(TriMesh, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(TriMesh, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsColorSelfCtrled() const", asMETHODPR(TriMesh, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetColor(const Float3 & color)", asMETHODPR(TriMesh, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "const Float3 & GetColor() const", asMETHODPR(TriMesh, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(TriMesh, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsAlphaSelfCtrled() const", asMETHODPR(TriMesh, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetAlpha(float alpha)", asMETHODPR(TriMesh, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "float GetAlpha() const", asMETHODPR(TriMesh, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(TriMesh, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool IsBrightnessSelfCtrled() const", asMETHODPR(TriMesh, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "void SetBrightness(float brightness)", asMETHODPR(TriMesh, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "float GetBrightness() const", asMETHODPR(TriMesh, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "const Float3 & GetLastColor() const", asMETHODPR(TriMesh, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "float GetLastAlpha() const", asMETHODPR(TriMesh, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "float GetLastBrightness() const", asMETHODPR(TriMesh, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Movable @+ GetParent()", asMETHODPR(TriMesh, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "PrimitiveType GetPrimitiveType() const", asMETHODPR(TriMesh, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "int GetNumTriangles() const", asMETHODPR(TriMesh, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(TriMesh, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti TriMesh_TYPE", (void*)&TriMesh::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "Transform LocalTransform", asOFFSET(TriMesh, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "Transform WorldTransform", asOFFSET(TriMesh, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "bool WorldTransformIsCurrent", asOFFSET(TriMesh, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "bool IsSkinCtrlSetWroldTrans", asOFFSET(TriMesh, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "Transform BoundWorldTransform", asOFFSET(TriMesh, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "Bound WorldBound", asOFFSET(TriMesh, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "bool WorldBoundIsCurrent", asOFFSET(TriMesh, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TriMesh", "CullingMode Culling", asOFFSET(TriMesh, Culling));
	assert(r >= 0);
	// Class: Node
	r = asEngine->RegisterObjectBehaviour("Node", asBEHAVE_FACTORY, "Node @ f()", asFUNCTION(fNode0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Node", asBEHAVE_ADDREF, "void f()", asMETHOD(Node, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Node", asBEHAVE_RELEASE, "void f()", asMETHOD(Node, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Movable@+ opImplCast()", asFUNCTION((RefCast<Node, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Node@+ opCast()", asFUNCTION((RefCast<Movable, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Node, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Node@+ opCast()", asFUNCTION((RefCast<Controlledable, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Object@+ opImplCast()", asFUNCTION((RefCast<Node, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Node@+ opCast()", asFUNCTION((RefCast<Object, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Node, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Node@+ opCast()", asFUNCTION((RefCast<RefObject, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void IncrementReferences()", asMETHODPR(Node, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void DecrementReferences()", asMETHODPR(Node, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int GetReferences() const", asMETHODPR(Node, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void Enable(bool enable)", asMETHODPR(Node, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsEnable() const", asMETHODPR(Node, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetActivate(bool act)", asMETHODPR(Node, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsActivated() const", asMETHODPR(Node, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "const Rtti & GetRttiType() const", asMETHODPR(Node, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "uint16 GetRttiVersion() const", asMETHODPR(Node, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsExactly(const Rtti & type) const", asMETHODPR(Node, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsDerived(const Rtti & type) const", asMETHODPR(Node, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Node, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Node, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Node, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Node, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "const string & GetResourcePath() const", asMETHODPR(Node, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetName(const string & name)", asMETHODPR(Node, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "const string & GetName() const", asMETHODPR(Node, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Node, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetID(int id)", asMETHODPR(Node, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int GetID() const", asMETHODPR(Node, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Object @+ GetObjectByID(int id)", asMETHODPR(Node, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void ComeInEventWorld()", asMETHODPR(Node, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void GoOutEventWorld()", asMETHODPR(Node, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsInEventWorld()", asMETHODPR(Node, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void ResetPlay()", asMETHODPR(Node, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void Play()", asMETHODPR(Node, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsPlaying() const", asMETHODPR(Node, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void Stop()", asMETHODPR(Node, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void Reset()", asMETHODPR(Node, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Node, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsSelfCtrled() const", asMETHODPR(Node, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Node, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsAutoPlay() const", asMETHODPR(Node, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int GetNumControllers() const", asMETHODPR(Node, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Controller @+ GetController(int i) const", asMETHODPR(Node, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Node, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool HasController(Controller @+ controller)", asMETHODPR(Node, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void AttachController(Controller @+ controller)", asMETHODPR(Node, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void DetachController(Controller @+ controller)", asMETHODPR(Node, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void DetachAllControllers()", asMETHODPR(Node, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SortControls()", asMETHODPR(Node, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Node, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void Show(bool show)", asMETHODPR(Node, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsShow() const", asMETHODPR(Node, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Node, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsColorSelfCtrled() const", asMETHODPR(Node, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetColor(const Float3 & color)", asMETHODPR(Node, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "const Float3 & GetColor() const", asMETHODPR(Node, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Node, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsAlphaSelfCtrled() const", asMETHODPR(Node, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetAlpha(float alpha)", asMETHODPR(Node, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "float GetAlpha() const", asMETHODPR(Node, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Node, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Node, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetBrightness(float brightness)", asMETHODPR(Node, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "float GetBrightness() const", asMETHODPR(Node, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "const Float3 & GetLastColor() const", asMETHODPR(Node, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "float GetLastAlpha() const", asMETHODPR(Node, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "float GetLastBrightness() const", asMETHODPR(Node, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Movable @+ GetParent()", asMETHODPR(Node, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("Node", "int GetNumChildren() const", asMETHODPR(Node, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int GetNumValidChildren() const", asMETHODPR(Node, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int AttachChild(Movable @+ child)", asMETHODPR(Node, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(Node, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int DetachChild(Movable @+ child)", asMETHODPR(Node, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool DetachChildByName(const string & name)", asMETHODPR(Node, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void DetachAllChildren()", asMETHODPR(Node, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("Node", "void SetCastShadow(bool castShadow)", asMETHODPR(Node, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(Node, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(Node, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsDoPickPriority() const", asMETHODPR(Node, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void OnNotPicked(int pickInfo)", asMETHODPR(Node, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(Node, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "bool IsNeedCalUpdateChild() const", asMETHODPR(Node, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "void SetAnchorID(int anchorID)", asMETHODPR(Node, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "int GetAnchorID() const", asMETHODPR(Node, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Node_TYPE", (void*)&Node::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "Transform LocalTransform", asOFFSET(Node, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "Transform WorldTransform", asOFFSET(Node, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "bool WorldTransformIsCurrent", asOFFSET(Node, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Node, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "Transform BoundWorldTransform", asOFFSET(Node, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "Bound WorldBound", asOFFSET(Node, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "bool WorldBoundIsCurrent", asOFFSET(Node, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Node", "CullingMode Culling", asOFFSET(Node, Culling));
	assert(r >= 0);
	// Class: SizeNode
	r = asEngine->RegisterObjectBehaviour("SizeNode", asBEHAVE_FACTORY, "SizeNode @ f()", asFUNCTION(fSizeNode0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("SizeNode", asBEHAVE_ADDREF, "void f()", asMETHOD(SizeNode, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("SizeNode", asBEHAVE_RELEASE, "void f()", asMETHOD(SizeNode, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Node@+ opImplCast()", asFUNCTION((RefCast<SizeNode, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "SizeNode@+ opCast()", asFUNCTION((RefCast<Node, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Movable@+ opImplCast()", asFUNCTION((RefCast<SizeNode, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "SizeNode@+ opCast()", asFUNCTION((RefCast<Movable, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<SizeNode, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "SizeNode@+ opCast()", asFUNCTION((RefCast<Controlledable, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Object@+ opImplCast()", asFUNCTION((RefCast<SizeNode, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "SizeNode@+ opCast()", asFUNCTION((RefCast<Object, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "RefObject@+ opImplCast()", asFUNCTION((RefCast<SizeNode, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "SizeNode@+ opCast()", asFUNCTION((RefCast<RefObject, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void IncrementReferences()", asMETHODPR(SizeNode, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void DecrementReferences()", asMETHODPR(SizeNode, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int GetReferences() const", asMETHODPR(SizeNode, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void Enable(bool enable)", asMETHODPR(SizeNode, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsEnable() const", asMETHODPR(SizeNode, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetActivate(bool act)", asMETHODPR(SizeNode, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsActivated() const", asMETHODPR(SizeNode, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Rtti & GetRttiType() const", asMETHODPR(SizeNode, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "uint16 GetRttiVersion() const", asMETHODPR(SizeNode, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsExactly(const Rtti & type) const", asMETHODPR(SizeNode, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsDerived(const Rtti & type) const", asMETHODPR(SizeNode, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(SizeNode, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(SizeNode, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(SizeNode, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(SizeNode, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const string & GetResourcePath() const", asMETHODPR(SizeNode, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetName(const string & name)", asMETHODPR(SizeNode, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const string & GetName() const", asMETHODPR(SizeNode, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Object @+ GetObjectByName(const string & name)", asMETHODPR(SizeNode, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetID(int id)", asMETHODPR(SizeNode, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int GetID() const", asMETHODPR(SizeNode, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Object @+ GetObjectByID(int id)", asMETHODPR(SizeNode, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void ComeInEventWorld()", asMETHODPR(SizeNode, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void GoOutEventWorld()", asMETHODPR(SizeNode, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsInEventWorld()", asMETHODPR(SizeNode, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void ResetPlay()", asMETHODPR(SizeNode, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void Play()", asMETHODPR(SizeNode, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsPlaying() const", asMETHODPR(SizeNode, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void Stop()", asMETHODPR(SizeNode, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void Reset()", asMETHODPR(SizeNode, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(SizeNode, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsSelfCtrled() const", asMETHODPR(SizeNode, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAutoPlay(bool autoPlay)", asMETHODPR(SizeNode, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsAutoPlay() const", asMETHODPR(SizeNode, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int GetNumControllers() const", asMETHODPR(SizeNode, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Controller @+ GetController(int i) const", asMETHODPR(SizeNode, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(SizeNode, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool HasController(Controller @+ controller)", asMETHODPR(SizeNode, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void AttachController(Controller @+ controller)", asMETHODPR(SizeNode, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void DetachController(Controller @+ controller)", asMETHODPR(SizeNode, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void DetachAllControllers()", asMETHODPR(SizeNode, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SortControls()", asMETHODPR(SizeNode, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(SizeNode, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void Show(bool show)", asMETHODPR(SizeNode, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsShow() const", asMETHODPR(SizeNode, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(SizeNode, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsColorSelfCtrled() const", asMETHODPR(SizeNode, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetColor(const Float3 & color)", asMETHODPR(SizeNode, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float3 & GetColor() const", asMETHODPR(SizeNode, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(SizeNode, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsAlphaSelfCtrled() const", asMETHODPR(SizeNode, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAlpha(float alpha)", asMETHODPR(SizeNode, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetAlpha() const", asMETHODPR(SizeNode, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(SizeNode, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsBrightnessSelfCtrled() const", asMETHODPR(SizeNode, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetBrightness(float brightness)", asMETHODPR(SizeNode, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetBrightness() const", asMETHODPR(SizeNode, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float3 & GetLastColor() const", asMETHODPR(SizeNode, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetLastAlpha() const", asMETHODPR(SizeNode, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetLastBrightness() const", asMETHODPR(SizeNode, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "Movable @+ GetParent()", asMETHODPR(SizeNode, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("SizeNode", "int GetNumChildren() const", asMETHODPR(SizeNode, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int GetNumValidChildren() const", asMETHODPR(SizeNode, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int AttachChild(Movable @+ child)", asMETHODPR(SizeNode, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(SizeNode, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int DetachChild(Movable @+ child)", asMETHODPR(SizeNode, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool DetachChildByName(const string & name)", asMETHODPR(SizeNode, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void DetachAllChildren()", asMETHODPR(SizeNode, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("SizeNode", "void SetCastShadow(bool castShadow)", asMETHODPR(SizeNode, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(SizeNode, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(SizeNode, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsDoPickPriority() const", asMETHODPR(SizeNode, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void OnNotPicked(int pickInfo)", asMETHODPR(SizeNode, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(SizeNode, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsNeedCalUpdateChild() const", asMETHODPR(SizeNode, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorID(int anchorID)", asMETHODPR(SizeNode, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "int GetAnchorID() const", asMETHODPR(SizeNode, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetSize(float width, float height)", asMETHODPR(SizeNode, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetSize(const Sizef & size)", asMETHODPR(SizeNode, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Sizef & GetSize() const", asMETHODPR(SizeNode, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetWidth(float width)", asMETHODPR(SizeNode, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetWidth() const", asMETHODPR(SizeNode, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetHeight(float height)", asMETHODPR(SizeNode, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "float GetHeight() const", asMETHODPR(SizeNode, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetPivot(float x, float y)", asMETHODPR(SizeNode, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetPivot(const Float2 & pvoit)", asMETHODPR(SizeNode, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float2 & GetPvoit() const", asMETHODPR(SizeNode, GetPvoit, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void EnableAnchorLayout(bool enable)", asMETHODPR(SizeNode, EnableAnchorLayout, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "bool IsAnchorLayoutEnable() const", asMETHODPR(SizeNode, IsAnchorLayoutEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorHor(float anchorX, float anchorY)", asMETHODPR(SizeNode, SetAnchorHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorHor(const Float2 & anchor)", asMETHODPR(SizeNode, SetAnchorHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float2 & GetAnchorHor() const", asMETHODPR(SizeNode, GetAnchorHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorParamHor(float param0, float param1)", asMETHODPR(SizeNode, SetAnchorParamHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorParamHor(const Float2 & param)", asMETHODPR(SizeNode, SetAnchorParamHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float2 & GetAnchorParamHor() const", asMETHODPR(SizeNode, GetAnchorParamHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorVer(float anchorX, float anchorY)", asMETHODPR(SizeNode, SetAnchorVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorVer(const Float2 & anchor)", asMETHODPR(SizeNode, SetAnchorVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float2 & GetAnchorVer() const", asMETHODPR(SizeNode, GetAnchorVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorParamVer(float param0, float param1)", asMETHODPR(SizeNode, SetAnchorParamVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "void SetAnchorParamVer(const Float2 & param)", asMETHODPR(SizeNode, SetAnchorParamVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "const Float2 & GetAnchorParamVer() const", asMETHODPR(SizeNode, GetAnchorParamVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti SizeNode_TYPE", (void*)&SizeNode::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "Transform LocalTransform", asOFFSET(SizeNode, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "Transform WorldTransform", asOFFSET(SizeNode, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "bool WorldTransformIsCurrent", asOFFSET(SizeNode, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "bool IsSkinCtrlSetWroldTrans", asOFFSET(SizeNode, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "Transform BoundWorldTransform", asOFFSET(SizeNode, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "Bound WorldBound", asOFFSET(SizeNode, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "bool WorldBoundIsCurrent", asOFFSET(SizeNode, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SizeNode", "CullingMode Culling", asOFFSET(SizeNode, Culling));
	assert(r >= 0);
	// Class: SwitchNode
	r = asEngine->RegisterObjectBehaviour("SwitchNode", asBEHAVE_FACTORY, "SwitchNode @ f()", asFUNCTION(fSwitchNode0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("SwitchNode", asBEHAVE_ADDREF, "void f()", asMETHOD(SwitchNode, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("SwitchNode", asBEHAVE_RELEASE, "void f()", asMETHOD(SwitchNode, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Node@+ opImplCast()", asFUNCTION((RefCast<SwitchNode, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "SwitchNode@+ opCast()", asFUNCTION((RefCast<Node, SwitchNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Movable@+ opImplCast()", asFUNCTION((RefCast<SwitchNode, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "SwitchNode@+ opCast()", asFUNCTION((RefCast<Movable, SwitchNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<SwitchNode, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "SwitchNode@+ opCast()", asFUNCTION((RefCast<Controlledable, SwitchNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Object@+ opImplCast()", asFUNCTION((RefCast<SwitchNode, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "SwitchNode@+ opCast()", asFUNCTION((RefCast<Object, SwitchNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "RefObject@+ opImplCast()", asFUNCTION((RefCast<SwitchNode, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "SwitchNode@+ opCast()", asFUNCTION((RefCast<RefObject, SwitchNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void IncrementReferences()", asMETHODPR(SwitchNode, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void DecrementReferences()", asMETHODPR(SwitchNode, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int GetReferences() const", asMETHODPR(SwitchNode, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void Enable(bool enable)", asMETHODPR(SwitchNode, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsEnable() const", asMETHODPR(SwitchNode, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetActivate(bool act)", asMETHODPR(SwitchNode, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsActivated() const", asMETHODPR(SwitchNode, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "const Rtti & GetRttiType() const", asMETHODPR(SwitchNode, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "uint16 GetRttiVersion() const", asMETHODPR(SwitchNode, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsExactly(const Rtti & type) const", asMETHODPR(SwitchNode, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsDerived(const Rtti & type) const", asMETHODPR(SwitchNode, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(SwitchNode, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(SwitchNode, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(SwitchNode, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(SwitchNode, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "const string & GetResourcePath() const", asMETHODPR(SwitchNode, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetName(const string & name)", asMETHODPR(SwitchNode, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "const string & GetName() const", asMETHODPR(SwitchNode, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Object @+ GetObjectByName(const string & name)", asMETHODPR(SwitchNode, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetID(int id)", asMETHODPR(SwitchNode, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int GetID() const", asMETHODPR(SwitchNode, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Object @+ GetObjectByID(int id)", asMETHODPR(SwitchNode, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void ComeInEventWorld()", asMETHODPR(SwitchNode, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void GoOutEventWorld()", asMETHODPR(SwitchNode, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsInEventWorld()", asMETHODPR(SwitchNode, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void ResetPlay()", asMETHODPR(SwitchNode, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void Play()", asMETHODPR(SwitchNode, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsPlaying() const", asMETHODPR(SwitchNode, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void Stop()", asMETHODPR(SwitchNode, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void Reset()", asMETHODPR(SwitchNode, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(SwitchNode, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsSelfCtrled() const", asMETHODPR(SwitchNode, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetAutoPlay(bool autoPlay)", asMETHODPR(SwitchNode, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsAutoPlay() const", asMETHODPR(SwitchNode, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int GetNumControllers() const", asMETHODPR(SwitchNode, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Controller @+ GetController(int i) const", asMETHODPR(SwitchNode, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(SwitchNode, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool HasController(Controller @+ controller)", asMETHODPR(SwitchNode, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void AttachController(Controller @+ controller)", asMETHODPR(SwitchNode, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void DetachController(Controller @+ controller)", asMETHODPR(SwitchNode, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void DetachAllControllers()", asMETHODPR(SwitchNode, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SortControls()", asMETHODPR(SwitchNode, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(SwitchNode, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void Show(bool show)", asMETHODPR(SwitchNode, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsShow() const", asMETHODPR(SwitchNode, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(SwitchNode, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsColorSelfCtrled() const", asMETHODPR(SwitchNode, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetColor(const Float3 & color)", asMETHODPR(SwitchNode, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "const Float3 & GetColor() const", asMETHODPR(SwitchNode, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(SwitchNode, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsAlphaSelfCtrled() const", asMETHODPR(SwitchNode, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetAlpha(float alpha)", asMETHODPR(SwitchNode, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "float GetAlpha() const", asMETHODPR(SwitchNode, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(SwitchNode, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsBrightnessSelfCtrled() const", asMETHODPR(SwitchNode, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetBrightness(float brightness)", asMETHODPR(SwitchNode, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "float GetBrightness() const", asMETHODPR(SwitchNode, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "const Float3 & GetLastColor() const", asMETHODPR(SwitchNode, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "float GetLastAlpha() const", asMETHODPR(SwitchNode, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "float GetLastBrightness() const", asMETHODPR(SwitchNode, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "Movable @+ GetParent()", asMETHODPR(SwitchNode, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("SwitchNode", "int GetNumChildren() const", asMETHODPR(SwitchNode, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int GetNumValidChildren() const", asMETHODPR(SwitchNode, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int AttachChild(Movable @+ child)", asMETHODPR(SwitchNode, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(SwitchNode, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int DetachChild(Movable @+ child)", asMETHODPR(SwitchNode, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool DetachChildByName(const string & name)", asMETHODPR(SwitchNode, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void DetachAllChildren()", asMETHODPR(SwitchNode, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("SwitchNode", "void SetCastShadow(bool castShadow)", asMETHODPR(SwitchNode, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(SwitchNode, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(SwitchNode, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsDoPickPriority() const", asMETHODPR(SwitchNode, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void OnNotPicked(int pickInfo)", asMETHODPR(SwitchNode, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(SwitchNode, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "bool IsNeedCalUpdateChild() const", asMETHODPR(SwitchNode, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetAnchorID(int anchorID)", asMETHODPR(SwitchNode, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int GetAnchorID() const", asMETHODPR(SwitchNode, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "SwitchNode @+ Create()", asFUNCTIONPR(SwitchNode::Create, (), SwitchNode * ), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void SetActiveChild(int activeChild)", asMETHODPR(SwitchNode, SetActiveChild, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "int GetActiveChild() const", asMETHODPR(SwitchNode, GetActiveChild, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SwitchNode", "void DisableAllChildren()", asMETHODPR(SwitchNode, DisableAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti SwitchNode_TYPE", (void*)&SwitchNode::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "Transform LocalTransform", asOFFSET(SwitchNode, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "Transform WorldTransform", asOFFSET(SwitchNode, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "bool WorldTransformIsCurrent", asOFFSET(SwitchNode, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "bool IsSkinCtrlSetWroldTrans", asOFFSET(SwitchNode, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "Transform BoundWorldTransform", asOFFSET(SwitchNode, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "Bound WorldBound", asOFFSET(SwitchNode, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "bool WorldBoundIsCurrent", asOFFSET(SwitchNode, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("SwitchNode", "CullingMode Culling", asOFFSET(SwitchNode, Culling));
	assert(r >= 0);
	// Class: Camera
	// Enum: ViewFrustum
	r = asEngine->RegisterEnum("ViewFrustum");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_DMIN", Camera::ViewFrustum::VF_DMIN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_DMAX", Camera::ViewFrustum::VF_DMAX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_UMIN", Camera::ViewFrustum::VF_UMIN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_UMAX", Camera::ViewFrustum::VF_UMAX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_RMIN", Camera::ViewFrustum::VF_RMIN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_RMAX", Camera::ViewFrustum::VF_RMAX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ViewFrustum", "VF_QUANTITY", Camera::ViewFrustum::VF_QUANTITY);
	assert(r >= 0);
	// Enum: DepthType
	r = asEngine->RegisterEnum("DepthType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("DepthType", "PM_DEPTH_ZERO_TO_ONE", Camera::DepthType::PM_DEPTH_ZERO_TO_ONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("DepthType", "PM_DEPTH_MINUS_ONE_TO_ONE", Camera::DepthType::PM_DEPTH_MINUS_ONE_TO_ONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("DepthType", "PM_DEPTH_QUANTITY", Camera::DepthType::PM_DEPTH_QUANTITY);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Camera", asBEHAVE_FACTORY, "Camera @ f(bool isPerspective)", asFUNCTION(fCamera0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Camera", asBEHAVE_ADDREF, "void f()", asMETHOD(Camera, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Camera", asBEHAVE_RELEASE, "void f()", asMETHOD(Camera, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "Object@+ opImplCast()", asFUNCTION((RefCast<Camera, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Camera@+ opCast()", asFUNCTION((RefCast<Object, Camera>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Camera, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Camera@+ opCast()", asFUNCTION((RefCast<RefObject, Camera>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void IncrementReferences()", asMETHODPR(Camera, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void DecrementReferences()", asMETHODPR(Camera, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "int GetReferences() const", asMETHODPR(Camera, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void Enable(bool enable)", asMETHODPR(Camera, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsEnable() const", asMETHODPR(Camera, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetActivate(bool act)", asMETHODPR(Camera, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsActivated() const", asMETHODPR(Camera, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const Rtti & GetRttiType() const", asMETHODPR(Camera, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "uint16 GetRttiVersion() const", asMETHODPR(Camera, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsExactly(const Rtti & type) const", asMETHODPR(Camera, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsDerived(const Rtti & type) const", asMETHODPR(Camera, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Camera, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Camera, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Camera, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Camera, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const string & GetResourcePath() const", asMETHODPR(Camera, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetName(const string & name)", asMETHODPR(Camera, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const string & GetName() const", asMETHODPR(Camera, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Camera, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetID(int id)", asMETHODPR(Camera, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "int GetID() const", asMETHODPR(Camera, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "Object @+ GetObjectByID(int id)", asMETHODPR(Camera, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void ComeInEventWorld()", asMETHODPR(Camera, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void GoOutEventWorld()", asMETHODPR(Camera, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsInEventWorld()", asMETHODPR(Camera, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetCameraNode(CameraNode @+ camNode)", asMETHODPR(Camera, SetCameraNode, (CameraNode * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "CameraNode @+ GetCameraNode()", asMETHODPR(Camera, GetCameraNode, (), CameraNode * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetFrame(const APoint & position, const AVector & dVector, const AVector & uVector, const AVector & rVector)", asMETHODPR(Camera, SetFrame, (const APoint & , const AVector & , const AVector & , const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetPosition(const APoint & position)", asMETHODPR(Camera, SetPosition, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetAxes(const AVector & dVector, const AVector & uVector, const AVector & rVector)", asMETHODPR(Camera, SetAxes, (const AVector & , const AVector & , const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "APoint GetPosition() const", asMETHODPR(Camera, GetPosition, () const, APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "AVector GetDVector() const", asMETHODPR(Camera, GetDVector, () const, AVector), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "AVector GetUVector() const", asMETHODPR(Camera, GetUVector, () const, AVector), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "AVector GetRVector() const", asMETHODPR(Camera, GetRVector, () const, AVector), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const HMatrix & GetViewMatrix() const", asMETHODPR(Camera, GetViewMatrix, () const, const HMatrix & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool IsPerspective() const", asMETHODPR(Camera, IsPerspective, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetFrustum(float dMin, float dMax, float uMin, float uMax, float rMin, float rMax)", asMETHODPR(Camera, SetFrustum, (float, float, float, float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetFrustum(float upFovDegrees, float aspectRatio, float dMin, float dMax)", asMETHODPR(Camera, SetFrustum, (float, float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void GetFrustum(float & dMin, float & dMax, float & uMin, float & uMax, float & rMin, float & rMax) const", asMETHODPR(Camera, GetFrustum, (float & , float & , float & , float & , float & , float & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool GetFrustum(float & upFovDegrees, float & aspectRatio, float & dMin, float & dMax) const", asMETHODPR(Camera, GetFrustum, (float & , float & , float & , float & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetDMin() const", asMETHODPR(Camera, GetDMin, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetDMax() const", asMETHODPR(Camera, GetDMax, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetUMin() const", asMETHODPR(Camera, GetUMin, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetUMax() const", asMETHODPR(Camera, GetUMax, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetRMin() const", asMETHODPR(Camera, GetRMin, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "float GetRMax() const", asMETHODPR(Camera, GetRMax, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "DepthType GetDepthType() const", asMETHODPR(Camera, GetDepthType, () const, Camera::DepthType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const HMatrix & GetProjectionMatrix() const", asMETHODPR(Camera, GetProjectionMatrix, () const, const HMatrix & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const HMatrix & GetProjectionViewMatrix() const", asMETHODPR(Camera, GetProjectionViewMatrix, () const, const HMatrix & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetPreViewMatrix(const HMatrix & preViewMatrix)", asMETHODPR(Camera, SetPreViewMatrix, (const HMatrix & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const HMatrix & GetPreViewMatrix() const", asMETHODPR(Camera, GetPreViewMatrix, () const, const HMatrix & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool PreViewIsIdentity() const", asMETHODPR(Camera, PreViewIsIdentity, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "void SetPostProjectionMatrix(const HMatrix & postProjMatrix)", asMETHODPR(Camera, SetPostProjectionMatrix, (const HMatrix & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "const HMatrix & GetPostProjectionMatrix() const", asMETHODPR(Camera, GetPostProjectionMatrix, () const, const HMatrix & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Camera", "bool PostProjectionIsIdentity() const", asMETHODPR(Camera, PostProjectionIsIdentity, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Camera_TYPE", (void*)&Camera::TYPE); 
	assert(r >= 0);
	// Class: CameraNode
	r = asEngine->RegisterObjectBehaviour("CameraNode", asBEHAVE_FACTORY, "CameraNode @ f(Camera @+ camera)", asFUNCTION(fCameraNode0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("CameraNode", asBEHAVE_ADDREF, "void f()", asMETHOD(CameraNode, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("CameraNode", asBEHAVE_RELEASE, "void f()", asMETHOD(CameraNode, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Node@+ opImplCast()", asFUNCTION((RefCast<CameraNode, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "CameraNode@+ opCast()", asFUNCTION((RefCast<Node, CameraNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Movable@+ opImplCast()", asFUNCTION((RefCast<CameraNode, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "CameraNode@+ opCast()", asFUNCTION((RefCast<Movable, CameraNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<CameraNode, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "CameraNode@+ opCast()", asFUNCTION((RefCast<Controlledable, CameraNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Object@+ opImplCast()", asFUNCTION((RefCast<CameraNode, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "CameraNode@+ opCast()", asFUNCTION((RefCast<Object, CameraNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "RefObject@+ opImplCast()", asFUNCTION((RefCast<CameraNode, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "CameraNode@+ opCast()", asFUNCTION((RefCast<RefObject, CameraNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void IncrementReferences()", asMETHODPR(CameraNode, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void DecrementReferences()", asMETHODPR(CameraNode, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int GetReferences() const", asMETHODPR(CameraNode, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void Enable(bool enable)", asMETHODPR(CameraNode, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsEnable() const", asMETHODPR(CameraNode, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetActivate(bool act)", asMETHODPR(CameraNode, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsActivated() const", asMETHODPR(CameraNode, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "const Rtti & GetRttiType() const", asMETHODPR(CameraNode, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "uint16 GetRttiVersion() const", asMETHODPR(CameraNode, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsExactly(const Rtti & type) const", asMETHODPR(CameraNode, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsDerived(const Rtti & type) const", asMETHODPR(CameraNode, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(CameraNode, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(CameraNode, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(CameraNode, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(CameraNode, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "const string & GetResourcePath() const", asMETHODPR(CameraNode, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetName(const string & name)", asMETHODPR(CameraNode, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "const string & GetName() const", asMETHODPR(CameraNode, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Object @+ GetObjectByName(const string & name)", asMETHODPR(CameraNode, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetID(int id)", asMETHODPR(CameraNode, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int GetID() const", asMETHODPR(CameraNode, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Object @+ GetObjectByID(int id)", asMETHODPR(CameraNode, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void ComeInEventWorld()", asMETHODPR(CameraNode, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void GoOutEventWorld()", asMETHODPR(CameraNode, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsInEventWorld()", asMETHODPR(CameraNode, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void ResetPlay()", asMETHODPR(CameraNode, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void Play()", asMETHODPR(CameraNode, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsPlaying() const", asMETHODPR(CameraNode, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void Stop()", asMETHODPR(CameraNode, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void Reset()", asMETHODPR(CameraNode, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(CameraNode, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsSelfCtrled() const", asMETHODPR(CameraNode, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetAutoPlay(bool autoPlay)", asMETHODPR(CameraNode, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsAutoPlay() const", asMETHODPR(CameraNode, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int GetNumControllers() const", asMETHODPR(CameraNode, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Controller @+ GetController(int i) const", asMETHODPR(CameraNode, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(CameraNode, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool HasController(Controller @+ controller)", asMETHODPR(CameraNode, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void AttachController(Controller @+ controller)", asMETHODPR(CameraNode, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void DetachController(Controller @+ controller)", asMETHODPR(CameraNode, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void DetachAllControllers()", asMETHODPR(CameraNode, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SortControls()", asMETHODPR(CameraNode, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(CameraNode, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void Show(bool show)", asMETHODPR(CameraNode, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsShow() const", asMETHODPR(CameraNode, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(CameraNode, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsColorSelfCtrled() const", asMETHODPR(CameraNode, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetColor(const Float3 & color)", asMETHODPR(CameraNode, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "const Float3 & GetColor() const", asMETHODPR(CameraNode, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(CameraNode, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsAlphaSelfCtrled() const", asMETHODPR(CameraNode, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetAlpha(float alpha)", asMETHODPR(CameraNode, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "float GetAlpha() const", asMETHODPR(CameraNode, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(CameraNode, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsBrightnessSelfCtrled() const", asMETHODPR(CameraNode, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetBrightness(float brightness)", asMETHODPR(CameraNode, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "float GetBrightness() const", asMETHODPR(CameraNode, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "const Float3 & GetLastColor() const", asMETHODPR(CameraNode, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "float GetLastAlpha() const", asMETHODPR(CameraNode, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "float GetLastBrightness() const", asMETHODPR(CameraNode, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Movable @+ GetParent()", asMETHODPR(CameraNode, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("CameraNode", "int GetNumChildren() const", asMETHODPR(CameraNode, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int GetNumValidChildren() const", asMETHODPR(CameraNode, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int AttachChild(Movable @+ child)", asMETHODPR(CameraNode, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(CameraNode, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int DetachChild(Movable @+ child)", asMETHODPR(CameraNode, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool DetachChildByName(const string & name)", asMETHODPR(CameraNode, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void DetachAllChildren()", asMETHODPR(CameraNode, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("CameraNode", "void SetCastShadow(bool castShadow)", asMETHODPR(CameraNode, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(CameraNode, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(CameraNode, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsDoPickPriority() const", asMETHODPR(CameraNode, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void OnNotPicked(int pickInfo)", asMETHODPR(CameraNode, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(CameraNode, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsNeedCalUpdateChild() const", asMETHODPR(CameraNode, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetAnchorID(int anchorID)", asMETHODPR(CameraNode, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "int GetAnchorID() const", asMETHODPR(CameraNode, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void SetCamera(Camera @+ camera, bool initFromCamera)", asMETHODPR(CameraNode, SetCamera, (Camera * , bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "Camera @+ GetCamera()", asMETHODPR(CameraNode, GetCamera, (), Camera * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "const Camera @+ GetCamera() const", asMETHODPR(CameraNode, GetCamera, () const, const Camera * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void EnableUpdate(bool enable)", asMETHODPR(CameraNode, EnableUpdate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "bool IsEnableUpdate()", asMETHODPR(CameraNode, IsEnableUpdate, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void LookAt(const APoint & pos)", asMETHODPR(CameraNode, LookAt, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraNode", "void LookAt(const Movable @+ mov)", asMETHODPR(CameraNode, LookAt, (const Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti CameraNode_TYPE", (void*)&CameraNode::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "Transform LocalTransform", asOFFSET(CameraNode, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "Transform WorldTransform", asOFFSET(CameraNode, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "bool WorldTransformIsCurrent", asOFFSET(CameraNode, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "bool IsSkinCtrlSetWroldTrans", asOFFSET(CameraNode, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "Transform BoundWorldTransform", asOFFSET(CameraNode, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "Bound WorldBound", asOFFSET(CameraNode, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "bool WorldBoundIsCurrent", asOFFSET(CameraNode, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraNode", "CullingMode Culling", asOFFSET(CameraNode, Culling));
	assert(r >= 0);
	// Class: Renderer
	r = asEngine->RegisterObjectMethod("Renderer", "int GetWidth() const", asMETHODPR(Renderer, GetWidth, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderer", "int GetHeight() const", asMETHODPR(Renderer, GetHeight, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderer", "int GetNumMultisamples() const", asMETHODPR(Renderer, GetNumMultisamples, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Canvas
	r = asEngine->RegisterObjectBehaviour("Canvas", asBEHAVE_FACTORY, "Canvas @ f()", asFUNCTION(fCanvas0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Canvas", asBEHAVE_ADDREF, "void f()", asMETHOD(Canvas, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Canvas", asBEHAVE_RELEASE, "void f()", asMETHOD(Canvas, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "Object@+ opImplCast()", asFUNCTION((RefCast<Canvas, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Canvas@+ opCast()", asFUNCTION((RefCast<Object, Canvas>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Canvas, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Canvas@+ opCast()", asFUNCTION((RefCast<RefObject, Canvas>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void IncrementReferences()", asMETHODPR(Canvas, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void DecrementReferences()", asMETHODPR(Canvas, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "int GetReferences() const", asMETHODPR(Canvas, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void Enable(bool enable)", asMETHODPR(Canvas, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsEnable() const", asMETHODPR(Canvas, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void SetActivate(bool act)", asMETHODPR(Canvas, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsActivated() const", asMETHODPR(Canvas, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "const Rtti & GetRttiType() const", asMETHODPR(Canvas, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "uint16 GetRttiVersion() const", asMETHODPR(Canvas, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsExactly(const Rtti & type) const", asMETHODPR(Canvas, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsDerived(const Rtti & type) const", asMETHODPR(Canvas, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Canvas, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Canvas, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Canvas, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Canvas, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "const string & GetResourcePath() const", asMETHODPR(Canvas, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void SetName(const string & name)", asMETHODPR(Canvas, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "const string & GetName() const", asMETHODPR(Canvas, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Canvas, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void SetID(int id)", asMETHODPR(Canvas, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "int GetID() const", asMETHODPR(Canvas, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "Object @+ GetObjectByID(int id)", asMETHODPR(Canvas, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void ComeInEventWorld()", asMETHODPR(Canvas, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "void GoOutEventWorld()", asMETHODPR(Canvas, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "bool IsInEventWorld()", asMETHODPR(Canvas, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Canvas_TYPE", (void*)&Canvas::TYPE); 
	assert(r >= 0);
	// Class: TexPackElement
	r = asEngine->RegisterObjectBehaviour("TexPackElement", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_TexPackElement0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("TexPackElement", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_TexPackElement), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TexPackElement", "bool IsValid() const", asMETHODPR(TexPackElement, IsValid, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int X", asOFFSET(TexPackElement, X));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int Y", asOFFSET(TexPackElement, Y));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int W", asOFFSET(TexPackElement, W));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int H", asOFFSET(TexPackElement, H));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int OX", asOFFSET(TexPackElement, OX));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int OY", asOFFSET(TexPackElement, OY));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int OW", asOFFSET(TexPackElement, OW));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int OH", asOFFSET(TexPackElement, OH));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "bool Rolated", asOFFSET(TexPackElement, Rolated));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int TexWidth", asOFFSET(TexPackElement, TexWidth));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "int TexHeight", asOFFSET(TexPackElement, TexHeight));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "string ElementName", asOFFSET(TexPackElement, ElementName));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPackElement", "string ImagePathFull", asOFFSET(TexPackElement, ImagePathFull));
	assert(r >= 0);
	// Class: TexPack
	r = asEngine->RegisterObjectBehaviour("TexPack", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_TexPack0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("TexPack", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_TexPack), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TexPack", "bool IsValid() const", asMETHODPR(TexPack, IsValid, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPack", "string ImageFullPath", asOFFSET(TexPack, ImageFullPath));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPack", "string ImagePath", asOFFSET(TexPack, ImagePath));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPack", "int Width", asOFFSET(TexPack, Width));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPack", "int Height", asOFFSET(TexPack, Height));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("TexPack", "bool IsHasUpdate", asOFFSET(TexPack, IsHasUpdate));
	assert(r >= 0);
	// Class: ResourceManager
	// Enum: LoadState
	r = asEngine->RegisterEnum("LoadState");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("LoadState", "LS_UNLOADED", ResourceManager::LoadState::LS_UNLOADED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("LoadState", "LS_LOADQUE", ResourceManager::LoadState::LS_LOADQUE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("LoadState", "LS_LOADING", ResourceManager::LoadState::LS_LOADING);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("LoadState", "LS_LOADED", ResourceManager::LoadState::LS_LOADED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("LoadState", "LS_MAX_STATE", ResourceManager::LoadState::LS_MAX_STATE);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void Clear()", asMETHODPR(ResourceManager, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void ClearRes(const string & resPath)", asMETHODPR(ResourceManager, ClearRes, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ BlockLoad(const string & filename)", asMETHODPR(ResourceManager, BlockLoad, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ BlockLoadCopy(const string & filename)", asMETHODPR(ResourceManager, BlockLoadCopy, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ BlockLoadShareCopy(const string & filename, bool vb, bool ib, bool mi)", asMETHODPR(ResourceManager, BlockLoadShareCopy, (const std::string & , bool, bool, bool), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool LoadBuffer(const string & filename, string & buf)", asMETHODPR(ResourceManager, LoadBuffer, (const std::string & , std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ ShareCopyVB_IB(Object @+ objFrom)", asMETHODPR(ResourceManager, ShareCopyVB_IB, (Object * ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ ShareCopyVB_IB_MI(Object @+ objFrom)", asMETHODPR(ResourceManager, ShareCopyVB_IB_MI, (Object * ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ ShareCopyMI(Object @+ objFrom)", asMETHODPR(ResourceManager, ShareCopyMI, (Object * ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "Object @+ ShareCopy(Object @+ objFrom, bool vb, bool ib, bool mi)", asMETHODPR(ResourceManager, ShareCopy, (Object * , bool, bool, bool), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void Dump(const string & filename)", asMETHODPR(ResourceManager, Dump, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void BeginDumpDiff()", asMETHODPR(ResourceManager, BeginDumpDiff, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void EndDumpDiff(const string & filename)", asMETHODPR(ResourceManager, EndDumpDiff, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void SetUseGarbageCollect(bool use)", asMETHODPR(ResourceManager, SetUseGarbageCollect, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool IsUseGarbageCollect() const", asMETHODPR(ResourceManager, IsUseGarbageCollect, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "void SetGarbageCollectTime(float seconds)", asMETHODPR(ResourceManager, SetGarbageCollectTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "float GetGarbageCollectTime() const", asMETHODPR(ResourceManager, GetGarbageCollectTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool CreateFloder(const string & parentPath, const string & path)", asMETHODPR(ResourceManager, CreateFloder, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool IsFloderExist(const string & parentPath, const string & path)", asMETHODPR(ResourceManager, IsFloderExist, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool IsTexPack(const string & texPackPath)", asMETHODPR(ResourceManager, IsTexPack, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool AddTexPack(const string & texPackPath)", asMETHODPR(ResourceManager, AddTexPack, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "const TexPack & GetTexPack(const string & texPackPath)", asMETHODPR(ResourceManager, GetTexPack, (const std::string & ), const TexPack & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "const TexPackElement & GetTexPackElement(const string & texPackPath, const string & eleName)", asMETHODPR(ResourceManager, GetTexPackElement, (const std::string & , const std::string & ), const TexPackElement & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "string GetWriteablePath()", asFUNCTIONPR(ResourceManager::GetWriteablePath, (), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "string GetResourcePath()", asFUNCTIONPR(ResourceManager::GetResourcePath, (), std::string), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ResourceManager", "bool SaveTex2DPNG(Texture2D @+ tex2d, const string & filename)", asMETHODPR(ResourceManager, SaveTex2DPNG, (Texture2D * , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	// Class: LanguageManager
	r = asEngine->RegisterObjectMethod("LanguageManager", "bool Load(const string & filename)", asMETHODPR(LanguageManager, Load, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "bool Add(const string & filename)", asMETHODPR(LanguageManager, Add, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "void AddItem(const string & key, const string & langauge0, const string & langauge1)", asMETHODPR(LanguageManager, AddItem, (const std::string & , const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "void AddItem1(const string & key, const string & langauge0)", asMETHODPR(LanguageManager, AddItem1, (const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "void SetLanguage(int index)", asMETHODPR(LanguageManager, SetLanguage, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "bool HasValue(const string & key) const", asMETHODPR(LanguageManager, HasValue, (const std::string & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "const string & GetValue(const string & key)", asMETHODPR(LanguageManager, GetValue, (const std::string & ), const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "const string & GetValue(const string & key, int index)", asMETHODPR(LanguageManager, GetValue, (const std::string & , int), const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "const string & V(const string & key)", asMETHODPR(LanguageManager, V, (const std::string & ), const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "const string & V(const string & key, int index)", asMETHODPR(LanguageManager, V, (const std::string & , int), const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LanguageManager", "void Clear()", asMETHODPR(LanguageManager, Clear, (), void), asCALL_THISCALL);
	assert(r >= 0);
	// Class: ScriptContext
	// Enum: ContextType
	r = asEngine->RegisterEnum("ContextType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ContextType", "CT_NONE", ScriptContext::ContextType::CT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ContextType", "CT_LUA", ScriptContext::ContextType::CT_LUA);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ContextType", "CT_ANGELSCRIPT", ScriptContext::ContextType::CT_ANGELSCRIPT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ContextType", "CT_MAX_TYPE", ScriptContext::ContextType::CT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ScriptContext", asBEHAVE_ADDREF, "void f()", asMETHOD(ScriptContext, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ScriptContext", asBEHAVE_RELEASE, "void f()", asMETHOD(ScriptContext, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "RefObject@+ opImplCast()", asFUNCTION((RefCast<ScriptContext, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "ScriptContext@+ opCast()", asFUNCTION((RefCast<RefObject, ScriptContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "void IncrementReferences()", asMETHODPR(ScriptContext, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "void DecrementReferences()", asMETHODPR(ScriptContext, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "int GetReferences() const", asMETHODPR(ScriptContext, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "bool CallString(const string & str)", asMETHODPR(ScriptContext, CallString, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "bool CallFile(const string & filename)", asMETHODPR(ScriptContext, CallFile, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	// Class: LuaContext
	r = asEngine->RegisterObjectBehaviour("LuaContext", asBEHAVE_ADDREF, "void f()", asMETHOD(LuaContext, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("LuaContext", asBEHAVE_RELEASE, "void f()", asMETHOD(LuaContext, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "ScriptContext@+ opImplCast()", asFUNCTION((RefCast<LuaContext, ScriptContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "LuaContext@+ opCast()", asFUNCTION((RefCast<ScriptContext, LuaContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "RefObject@+ opImplCast()", asFUNCTION((RefCast<LuaContext, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "LuaContext@+ opCast()", asFUNCTION((RefCast<RefObject, LuaContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "void IncrementReferences()", asMETHODPR(LuaContext, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "void DecrementReferences()", asMETHODPR(LuaContext, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "int GetReferences() const", asMETHODPR(LuaContext, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "bool CallString(const string & str)", asMETHODPR(LuaContext, CallString, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LuaContext", "bool CallFile(const string & filename)", asMETHODPR(LuaContext, CallFile, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	// Class: ASContext
	r = asEngine->RegisterObjectBehaviour("ASContext", asBEHAVE_ADDREF, "void f()", asMETHOD(ASContext, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ASContext", asBEHAVE_RELEASE, "void f()", asMETHOD(ASContext, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "ScriptContext@+ opImplCast()", asFUNCTION((RefCast<ASContext, ScriptContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptContext", "ASContext@+ opCast()", asFUNCTION((RefCast<ScriptContext, ASContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "RefObject@+ opImplCast()", asFUNCTION((RefCast<ASContext, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "ASContext@+ opCast()", asFUNCTION((RefCast<RefObject, ASContext>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "void IncrementReferences()", asMETHODPR(ASContext, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "void DecrementReferences()", asMETHODPR(ASContext, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "int GetReferences() const", asMETHODPR(ASContext, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "bool CallString(const string & str)", asMETHODPR(ASContext, CallString, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "bool CallFile(const string & filename)", asMETHODPR(ASContext, CallFile, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ASContext", "ScriptController @+ CreateScriptController(const string & filename, const string & className)", asMETHODPR(ASContext, CreateScriptController, (const std::string & , const std::string & ), ScriptController * ), asCALL_THISCALL);
	assert(r >= 0);
	// Class: ScriptManager
	r = asEngine->RegisterObjectMethod("ScriptManager", "ScriptContext @+ GetContext(ContextType type)", asMETHODPR(ScriptManager, GetContext, (ScriptContext::ContextType), ScriptContext * ), asCALL_THISCALL);
	assert(r >= 0);
	// Class: ScriptController
	r = asEngine->RegisterObjectBehaviour("ScriptController", asBEHAVE_FACTORY, "ScriptController @ f()", asFUNCTION(fScriptController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ScriptController", asBEHAVE_ADDREF, "void f()", asMETHOD(ScriptController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ScriptController", asBEHAVE_RELEASE, "void f()", asMETHOD(ScriptController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "Controller@+ opImplCast()", asFUNCTION((RefCast<ScriptController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "ScriptController@+ opCast()", asFUNCTION((RefCast<Controller, ScriptController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "Object@+ opImplCast()", asFUNCTION((RefCast<ScriptController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "ScriptController@+ opCast()", asFUNCTION((RefCast<Object, ScriptController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<ScriptController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "ScriptController@+ opCast()", asFUNCTION((RefCast<RefObject, ScriptController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void IncrementReferences()", asMETHODPR(ScriptController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void DecrementReferences()", asMETHODPR(ScriptController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "int GetReferences() const", asMETHODPR(ScriptController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void Enable(bool enable)", asMETHODPR(ScriptController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsEnable() const", asMETHODPR(ScriptController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetActivate(bool act)", asMETHODPR(ScriptController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsActivated() const", asMETHODPR(ScriptController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "const Rtti & GetRttiType() const", asMETHODPR(ScriptController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "uint16 GetRttiVersion() const", asMETHODPR(ScriptController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsExactly(const Rtti & type) const", asMETHODPR(ScriptController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsDerived(const Rtti & type) const", asMETHODPR(ScriptController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(ScriptController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(ScriptController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(ScriptController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(ScriptController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "const string & GetResourcePath() const", asMETHODPR(ScriptController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetName(const string & name)", asMETHODPR(ScriptController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "const string & GetName() const", asMETHODPR(ScriptController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(ScriptController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetID(int id)", asMETHODPR(ScriptController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "int GetID() const", asMETHODPR(ScriptController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "Object @+ GetObjectByID(int id)", asMETHODPR(ScriptController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void ComeInEventWorld()", asMETHODPR(ScriptController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void GoOutEventWorld()", asMETHODPR(ScriptController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsInEventWorld()", asMETHODPR(ScriptController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetPriority(int priority)", asMETHODPR(ScriptController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "int GetPriority() const", asMETHODPR(ScriptController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void ResetPlay()", asMETHODPR(ScriptController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void Play()", asMETHODPR(ScriptController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsPlaying() const", asMETHODPR(ScriptController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void Stop()", asMETHODPR(ScriptController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void Reset()", asMETHODPR(ScriptController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetMaxPlayTime(float time)", asMETHODPR(ScriptController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "float GetMaxPlayTime() const", asMETHODPR(ScriptController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetDelayPlayTime(float time)", asMETHODPR(ScriptController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "float GetDelayPlayTime() const", asMETHODPR(ScriptController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "float GetPlayedTime() const", asMETHODPR(ScriptController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(ScriptController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(ScriptController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool IsPlayedDoDetach() const", asMETHODPR(ScriptController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "Controlledable @+ GetControlledable() const", asMETHODPR(ScriptController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ScriptController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(ScriptController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti ScriptController_TYPE", (void*)&ScriptController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ScriptController", "RepeatType Repeat", asOFFSET(ScriptController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ScriptController", "double MinTime", asOFFSET(ScriptController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ScriptController", "double MaxTime", asOFFSET(ScriptController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ScriptController", "double Phase", asOFFSET(ScriptController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ScriptController", "double Frequency", asOFFSET(ScriptController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ScriptController", "bool Active", asOFFSET(ScriptController, Active));
	assert(r >= 0);
	// Class: Effectable
	// Enum: FaceType
	r = asEngine->RegisterEnum("FaceType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_X", Effectable::FaceType::FT_X);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_NX", Effectable::FaceType::FT_NX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_Y", Effectable::FaceType::FT_Y);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_NY", Effectable::FaceType::FT_NY);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_Z", Effectable::FaceType::FT_Z);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_NZ", Effectable::FaceType::FT_NZ);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_CAMERA", Effectable::FaceType::FT_CAMERA);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_SPEEDDIR", Effectable::FaceType::FT_SPEEDDIR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_FREE", Effectable::FaceType::FT_FREE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_CAMERA_ZUP", Effectable::FaceType::FT_CAMERA_ZUP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_CAMERA_ALIGN_EMITDIR", Effectable::FaceType::FT_CAMERA_ALIGN_EMITDIR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("FaceType", "FT_MAX_TYPE", Effectable::FaceType::FT_MAX_TYPE);
	assert(r >= 0);
	// Enum: MaterialType
	r = asEngine->RegisterEnum("MaterialType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MaterialType", "MT_TEX", Effectable::MaterialType::MT_TEX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MaterialType", "MT_TEX_MASK_MULTIPLY", Effectable::MaterialType::MT_TEX_MASK_MULTIPLY);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MaterialType", "MT_TEX_MASK_ADD", Effectable::MaterialType::MT_TEX_MASK_ADD);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MaterialType", "MT_MAX_TYPE", Effectable::MaterialType::MT_MAX_TYPE);
	assert(r >= 0);
	// Enum: BlendMode
	r = asEngine->RegisterEnum("BlendMode");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_NONE", Effectable::BlendMode::BM_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_ALPHATEST85", Effectable::BlendMode::BM_ALPHATEST85);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SCRCALPHA_DSTONEMIUSSRCALPHA", Effectable::BlendMode::BM_BLEND_SCRCALPHA_DSTONEMIUSSRCALPHA);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SRCALPHA_DSTONE", Effectable::BlendMode::BM_BLEND_SRCALPHA_DSTONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SRCCOLOR_DSTONEMIUSSRCCOLOR", Effectable::BlendMode::BM_BLEND_SRCCOLOR_DSTONEMIUSSRCCOLOR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SRCCOLOR_DSTONE", Effectable::BlendMode::BM_BLEND_SRCCOLOR_DSTONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SRCONE_DSTONE", Effectable::BlendMode::BM_BLEND_SRCONE_DSTONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SRCONE_DSTONEMIUSSRCALPHA", Effectable::BlendMode::BM_BLEND_SRCONE_DSTONEMIUSSRCALPHA);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_BLEND_SRCONE_DSTONEMIUSSRCCOLOR", Effectable::BlendMode::BM_BLEND_SRCONE_DSTONEMIUSSRCCOLOR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("BlendMode", "BM_MAX_MODE", Effectable::BlendMode::BM_MAX_MODE);
	assert(r >= 0);
	// Enum: TexMode
	r = asEngine->RegisterEnum("TexMode");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("TexMode", "TM_TEX", Effectable::TexMode::TM_TEX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("TexMode", "TM_TEXPACK_ELE", Effectable::TexMode::TM_TEXPACK_ELE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("TexMode", "TM_TEX_ANIM", Effectable::TexMode::TM_TEX_ANIM);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("TexMode", "TM_TEXS_ANIM", Effectable::TexMode::TM_TEXS_ANIM);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("TexMode", "TM_TEXPACK_ANIM", Effectable::TexMode::TM_TEXPACK_ANIM);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("TexMode", "TM_MAX_MODE", Effectable::TexMode::TM_MAX_MODE);
	assert(r >= 0);
	// Enum: CoordinateType
	r = asEngine->RegisterEnum("CoordinateType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CoordinateType", "CT_CLAMP", Effectable::CoordinateType::CT_CLAMP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CoordinateType", "CT_REPEAT", Effectable::CoordinateType::CT_REPEAT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CoordinateType", "CT_MAX_TYPE", Effectable::CoordinateType::CT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Effectable", asBEHAVE_ADDREF, "void f()", asMETHOD(Effectable, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Effectable", asBEHAVE_RELEASE, "void f()", asMETHOD(Effectable, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<Effectable, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Effectable@+ opCast()", asFUNCTION((RefCast<TriMesh, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Triangles@+ opImplCast()", asFUNCTION((RefCast<Effectable, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Effectable@+ opCast()", asFUNCTION((RefCast<Triangles, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Renderable@+ opImplCast()", asFUNCTION((RefCast<Effectable, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Effectable@+ opCast()", asFUNCTION((RefCast<Renderable, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Movable@+ opImplCast()", asFUNCTION((RefCast<Effectable, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Effectable@+ opCast()", asFUNCTION((RefCast<Movable, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Effectable, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Effectable@+ opCast()", asFUNCTION((RefCast<Controlledable, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Object@+ opImplCast()", asFUNCTION((RefCast<Effectable, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Effectable@+ opCast()", asFUNCTION((RefCast<Object, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Effectable, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Effectable@+ opCast()", asFUNCTION((RefCast<RefObject, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void IncrementReferences()", asMETHODPR(Effectable, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void DecrementReferences()", asMETHODPR(Effectable, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetReferences() const", asMETHODPR(Effectable, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void Enable(bool enable)", asMETHODPR(Effectable, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsEnable() const", asMETHODPR(Effectable, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetActivate(bool act)", asMETHODPR(Effectable, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsActivated() const", asMETHODPR(Effectable, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Rtti & GetRttiType() const", asMETHODPR(Effectable, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "uint16 GetRttiVersion() const", asMETHODPR(Effectable, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsExactly(const Rtti & type) const", asMETHODPR(Effectable, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsDerived(const Rtti & type) const", asMETHODPR(Effectable, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Effectable, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Effectable, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Effectable, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Effectable, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const string & GetResourcePath() const", asMETHODPR(Effectable, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetName(const string & name)", asMETHODPR(Effectable, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const string & GetName() const", asMETHODPR(Effectable, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Effectable, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetID(int id)", asMETHODPR(Effectable, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetID() const", asMETHODPR(Effectable, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Object @+ GetObjectByID(int id)", asMETHODPR(Effectable, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void ComeInEventWorld()", asMETHODPR(Effectable, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void GoOutEventWorld()", asMETHODPR(Effectable, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsInEventWorld()", asMETHODPR(Effectable, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void ResetPlay()", asMETHODPR(Effectable, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void Play()", asMETHODPR(Effectable, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsPlaying() const", asMETHODPR(Effectable, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void Stop()", asMETHODPR(Effectable, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void Reset()", asMETHODPR(Effectable, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Effectable, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsSelfCtrled() const", asMETHODPR(Effectable, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Effectable, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsAutoPlay() const", asMETHODPR(Effectable, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetNumControllers() const", asMETHODPR(Effectable, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Controller @+ GetController(int i) const", asMETHODPR(Effectable, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Effectable, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool HasController(Controller @+ controller)", asMETHODPR(Effectable, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void AttachController(Controller @+ controller)", asMETHODPR(Effectable, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void DetachController(Controller @+ controller)", asMETHODPR(Effectable, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void DetachAllControllers()", asMETHODPR(Effectable, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SortControls()", asMETHODPR(Effectable, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Effectable, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void Show(bool show)", asMETHODPR(Effectable, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsShow() const", asMETHODPR(Effectable, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Effectable, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsColorSelfCtrled() const", asMETHODPR(Effectable, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetColor(const Float3 & color)", asMETHODPR(Effectable, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float3 & GetColor() const", asMETHODPR(Effectable, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Effectable, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsAlphaSelfCtrled() const", asMETHODPR(Effectable, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetAlpha(float alpha)", asMETHODPR(Effectable, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetAlpha() const", asMETHODPR(Effectable, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Effectable, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Effectable, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetBrightness(float brightness)", asMETHODPR(Effectable, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetBrightness() const", asMETHODPR(Effectable, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float3 & GetLastColor() const", asMETHODPR(Effectable, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetLastAlpha() const", asMETHODPR(Effectable, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetLastBrightness() const", asMETHODPR(Effectable, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Movable @+ GetParent()", asMETHODPR(Effectable, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "PrimitiveType GetPrimitiveType() const", asMETHODPR(Effectable, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetNumTriangles() const", asMETHODPR(Effectable, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(Effectable, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "EffectableController @+ GetEffectableController() const", asMETHODPR(Effectable, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetFixedBound(bool fixed)", asMETHODPR(Effectable, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsFixedBound()", asMETHODPR(Effectable, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(Effectable, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "APoint GetFixedBoundCenter()", asMETHODPR(Effectable, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetFixedBoundRadius(float radius)", asMETHODPR(Effectable, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetFixedBoundRadius()", asMETHODPR(Effectable, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetLocal(bool l)", asMETHODPR(Effectable, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsLocal() const", asMETHODPR(Effectable, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitSizeX(float val)", asMETHODPR(Effectable, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetEmitSizeX() const", asMETHODPR(Effectable, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitSizeY(float val)", asMETHODPR(Effectable, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetEmitSizeY() const", asMETHODPR(Effectable, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitSizeZ(float val)", asMETHODPR(Effectable, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetEmitSizeZ() const", asMETHODPR(Effectable, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitSizeXYZ(float val)", asMETHODPR(Effectable, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitColor(const Float3 & color)", asMETHODPR(Effectable, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float3 & GetEmitColor() const", asMETHODPR(Effectable, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitAlpha(float alpha)", asMETHODPR(Effectable, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetEmitAlpha() const", asMETHODPR(Effectable, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitLife(float life)", asMETHODPR(Effectable, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetEmitLife() const", asMETHODPR(Effectable, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetFaceType(FaceType type)", asMETHODPR(Effectable, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "FaceType GetFaceType() const", asMETHODPR(Effectable, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetMaterialType(MaterialType type)", asMETHODPR(Effectable, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "MaterialType GetMaterialType() const", asMETHODPR(Effectable, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetBackCull(bool isBackCull)", asMETHODPR(Effectable, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsBackCull() const", asMETHODPR(Effectable, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetBlendMode(BlendMode mode)", asMETHODPR(Effectable, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "BlendMode GetBlendMode() const", asMETHODPR(Effectable, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetTexMode(TexMode mode)", asMETHODPR(Effectable, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "TexMode GetTexMode() const", asMETHODPR(Effectable, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool SetTex(const string & filename)", asMETHODPR(Effectable, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const string & GetTex() const", asMETHODPR(Effectable, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(Effectable, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(Effectable, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool SetTexAnim(const string & filename)", asMETHODPR(Effectable, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const string & GetTexAnim() const", asMETHODPR(Effectable, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(Effectable, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(Effectable, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(Effectable, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(Effectable, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const string & GetTexPackAnim() const", asMETHODPR(Effectable, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(Effectable, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(Effectable, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(Effectable, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetAnimInterval(float seconds)", asMETHODPR(Effectable, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "float GetAnimInterval() const", asMETHODPR(Effectable, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(Effectable, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsAnimStartDoRandom() const", asMETHODPR(Effectable, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(Effectable, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetUserNumAnimFrames() const", asMETHODPR(Effectable, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "int GetNumAnimFrames() const", asMETHODPR(Effectable, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(Effectable, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "bool IsAnimFramesPlayOnce() const", asMETHODPR(Effectable, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetMaskTex(const string & filename)", asMETHODPR(Effectable, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const string & GetMaskTex() const", asMETHODPR(Effectable, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(Effectable, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(Effectable, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(Effectable, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(Effectable, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(Effectable, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(Effectable, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(Effectable, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetUV1_Offset() const", asMETHODPR(Effectable, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(Effectable, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetUV1_Repeat() const", asMETHODPR(Effectable, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(Effectable, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "const Float2 & GetUV1_Speed() const", asMETHODPR(Effectable, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(Effectable, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "CoordinateType GetCoordinateType0() const", asMETHODPR(Effectable, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(Effectable, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "CoordinateType GetCoordinateType1() const", asMETHODPR(Effectable, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Effectable_TYPE", (void*)&Effectable::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "Transform LocalTransform", asOFFSET(Effectable, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "Transform WorldTransform", asOFFSET(Effectable, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "bool WorldTransformIsCurrent", asOFFSET(Effectable, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Effectable, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "Transform BoundWorldTransform", asOFFSET(Effectable, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "Bound WorldBound", asOFFSET(Effectable, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "bool WorldBoundIsCurrent", asOFFSET(Effectable, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Effectable", "CullingMode Culling", asOFFSET(Effectable, Culling));
	assert(r >= 0);
	// Class: BeamEmitter
	// Enum: WaveType
	r = asEngine->RegisterEnum("WaveType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("WaveType", "WT_RANDOM", BeamEmitter::WaveType::WT_RANDOM);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("WaveType", "WT_SIN", BeamEmitter::WaveType::WT_SIN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("WaveType", "WT_LINE", BeamEmitter::WaveType::WT_LINE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("WaveType", "WT_MAX_TYPE", BeamEmitter::WaveType::WT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("BeamEmitter", asBEHAVE_FACTORY, "BeamEmitter @ f()", asFUNCTION(fBeamEmitter0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("BeamEmitter", asBEHAVE_ADDREF, "void f()", asMETHOD(BeamEmitter, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("BeamEmitter", asBEHAVE_RELEASE, "void f()", asMETHOD(BeamEmitter, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Effectable@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<Effectable, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<TriMesh, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Triangles@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<Triangles, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Renderable@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<Renderable, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Movable@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<Movable, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<Controlledable, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Object@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<Object, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "RefObject@+ opImplCast()", asFUNCTION((RefCast<BeamEmitter, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "BeamEmitter@+ opCast()", asFUNCTION((RefCast<RefObject, BeamEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void IncrementReferences()", asMETHODPR(BeamEmitter, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void DecrementReferences()", asMETHODPR(BeamEmitter, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetReferences() const", asMETHODPR(BeamEmitter, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void Enable(bool enable)", asMETHODPR(BeamEmitter, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsEnable() const", asMETHODPR(BeamEmitter, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetActivate(bool act)", asMETHODPR(BeamEmitter, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsActivated() const", asMETHODPR(BeamEmitter, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Rtti & GetRttiType() const", asMETHODPR(BeamEmitter, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "uint16 GetRttiVersion() const", asMETHODPR(BeamEmitter, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsExactly(const Rtti & type) const", asMETHODPR(BeamEmitter, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsDerived(const Rtti & type) const", asMETHODPR(BeamEmitter, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(BeamEmitter, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(BeamEmitter, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(BeamEmitter, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(BeamEmitter, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const string & GetResourcePath() const", asMETHODPR(BeamEmitter, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetName(const string & name)", asMETHODPR(BeamEmitter, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const string & GetName() const", asMETHODPR(BeamEmitter, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Object @+ GetObjectByName(const string & name)", asMETHODPR(BeamEmitter, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetID(int id)", asMETHODPR(BeamEmitter, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetID() const", asMETHODPR(BeamEmitter, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Object @+ GetObjectByID(int id)", asMETHODPR(BeamEmitter, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void ComeInEventWorld()", asMETHODPR(BeamEmitter, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void GoOutEventWorld()", asMETHODPR(BeamEmitter, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsInEventWorld()", asMETHODPR(BeamEmitter, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void ResetPlay()", asMETHODPR(BeamEmitter, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void Play()", asMETHODPR(BeamEmitter, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsPlaying() const", asMETHODPR(BeamEmitter, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void Stop()", asMETHODPR(BeamEmitter, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void Reset()", asMETHODPR(BeamEmitter, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(BeamEmitter, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsSelfCtrled() const", asMETHODPR(BeamEmitter, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetAutoPlay(bool autoPlay)", asMETHODPR(BeamEmitter, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsAutoPlay() const", asMETHODPR(BeamEmitter, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumControllers() const", asMETHODPR(BeamEmitter, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Controller @+ GetController(int i) const", asMETHODPR(BeamEmitter, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(BeamEmitter, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool HasController(Controller @+ controller)", asMETHODPR(BeamEmitter, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void AttachController(Controller @+ controller)", asMETHODPR(BeamEmitter, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void DetachController(Controller @+ controller)", asMETHODPR(BeamEmitter, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void DetachAllControllers()", asMETHODPR(BeamEmitter, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SortControls()", asMETHODPR(BeamEmitter, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(BeamEmitter, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void Show(bool show)", asMETHODPR(BeamEmitter, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsShow() const", asMETHODPR(BeamEmitter, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(BeamEmitter, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsColorSelfCtrled() const", asMETHODPR(BeamEmitter, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetColor(const Float3 & color)", asMETHODPR(BeamEmitter, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float3 & GetColor() const", asMETHODPR(BeamEmitter, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(BeamEmitter, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsAlphaSelfCtrled() const", asMETHODPR(BeamEmitter, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetAlpha(float alpha)", asMETHODPR(BeamEmitter, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetAlpha() const", asMETHODPR(BeamEmitter, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(BeamEmitter, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsBrightnessSelfCtrled() const", asMETHODPR(BeamEmitter, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetBrightness(float brightness)", asMETHODPR(BeamEmitter, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetBrightness() const", asMETHODPR(BeamEmitter, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float3 & GetLastColor() const", asMETHODPR(BeamEmitter, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetLastAlpha() const", asMETHODPR(BeamEmitter, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetLastBrightness() const", asMETHODPR(BeamEmitter, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "Movable @+ GetParent()", asMETHODPR(BeamEmitter, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "PrimitiveType GetPrimitiveType() const", asMETHODPR(BeamEmitter, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumTriangles() const", asMETHODPR(BeamEmitter, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(BeamEmitter, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "EffectableController @+ GetEffectableController() const", asMETHODPR(BeamEmitter, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetFixedBound(bool fixed)", asMETHODPR(BeamEmitter, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsFixedBound()", asMETHODPR(BeamEmitter, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(BeamEmitter, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "APoint GetFixedBoundCenter()", asMETHODPR(BeamEmitter, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetFixedBoundRadius(float radius)", asMETHODPR(BeamEmitter, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetFixedBoundRadius()", asMETHODPR(BeamEmitter, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetLocal(bool l)", asMETHODPR(BeamEmitter, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsLocal() const", asMETHODPR(BeamEmitter, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitSizeX(float val)", asMETHODPR(BeamEmitter, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetEmitSizeX() const", asMETHODPR(BeamEmitter, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitSizeY(float val)", asMETHODPR(BeamEmitter, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetEmitSizeY() const", asMETHODPR(BeamEmitter, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitSizeZ(float val)", asMETHODPR(BeamEmitter, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetEmitSizeZ() const", asMETHODPR(BeamEmitter, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitSizeXYZ(float val)", asMETHODPR(BeamEmitter, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitColor(const Float3 & color)", asMETHODPR(BeamEmitter, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float3 & GetEmitColor() const", asMETHODPR(BeamEmitter, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitAlpha(float alpha)", asMETHODPR(BeamEmitter, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetEmitAlpha() const", asMETHODPR(BeamEmitter, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitLife(float life)", asMETHODPR(BeamEmitter, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetEmitLife() const", asMETHODPR(BeamEmitter, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetFaceType(FaceType type)", asMETHODPR(BeamEmitter, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "FaceType GetFaceType() const", asMETHODPR(BeamEmitter, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetMaterialType(MaterialType type)", asMETHODPR(BeamEmitter, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "MaterialType GetMaterialType() const", asMETHODPR(BeamEmitter, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetBackCull(bool isBackCull)", asMETHODPR(BeamEmitter, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsBackCull() const", asMETHODPR(BeamEmitter, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetBlendMode(BlendMode mode)", asMETHODPR(BeamEmitter, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "BlendMode GetBlendMode() const", asMETHODPR(BeamEmitter, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetTexMode(TexMode mode)", asMETHODPR(BeamEmitter, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "TexMode GetTexMode() const", asMETHODPR(BeamEmitter, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool SetTex(const string & filename)", asMETHODPR(BeamEmitter, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const string & GetTex() const", asMETHODPR(BeamEmitter, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(BeamEmitter, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(BeamEmitter, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool SetTexAnim(const string & filename)", asMETHODPR(BeamEmitter, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const string & GetTexAnim() const", asMETHODPR(BeamEmitter, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(BeamEmitter, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(BeamEmitter, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(BeamEmitter, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(BeamEmitter, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const string & GetTexPackAnim() const", asMETHODPR(BeamEmitter, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(BeamEmitter, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(BeamEmitter, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(BeamEmitter, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetAnimInterval(float seconds)", asMETHODPR(BeamEmitter, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetAnimInterval() const", asMETHODPR(BeamEmitter, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(BeamEmitter, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsAnimStartDoRandom() const", asMETHODPR(BeamEmitter, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(BeamEmitter, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetUserNumAnimFrames() const", asMETHODPR(BeamEmitter, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumAnimFrames() const", asMETHODPR(BeamEmitter, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(BeamEmitter, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsAnimFramesPlayOnce() const", asMETHODPR(BeamEmitter, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetMaskTex(const string & filename)", asMETHODPR(BeamEmitter, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const string & GetMaskTex() const", asMETHODPR(BeamEmitter, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(BeamEmitter, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(BeamEmitter, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(BeamEmitter, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(BeamEmitter, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(BeamEmitter, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(BeamEmitter, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(BeamEmitter, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetUV1_Offset() const", asMETHODPR(BeamEmitter, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(BeamEmitter, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetUV1_Repeat() const", asMETHODPR(BeamEmitter, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(BeamEmitter, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetUV1_Speed() const", asMETHODPR(BeamEmitter, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(BeamEmitter, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "CoordinateType GetCoordinateType0() const", asMETHODPR(BeamEmitter, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(BeamEmitter, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "CoordinateType GetCoordinateType1() const", asMETHODPR(BeamEmitter, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetNumMaxBeams(int num)", asMETHODPR(BeamEmitter, SetNumMaxBeams, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumMaxBeams() const", asMETHODPR(BeamEmitter, GetNumMaxBeams, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitRate(float rate)", asMETHODPR(BeamEmitter, SetEmitRate, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetEmitRate() const", asMETHODPR(BeamEmitter, GetEmitRate, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitStartPos(const APoint & startPos)", asMETHODPR(BeamEmitter, SetEmitStartPos, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const APoint & GetEmitStartPos() const", asMETHODPR(BeamEmitter, GetEmitStartPos, () const, const APoint & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetEmitEndPos(const APoint & endPos)", asMETHODPR(BeamEmitter, SetEmitEndPos, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const APoint & GetEmitEndPos() const", asMETHODPR(BeamEmitter, GetEmitEndPos, () const, const APoint & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetStartPosUseLocal(bool startUseLocal)", asMETHODPR(BeamEmitter, SetStartPosUseLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsStartPosUseLocal() const", asMETHODPR(BeamEmitter, IsStartPosUseLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetSimpleLineWave(bool simpleLineWave)", asMETHODPR(BeamEmitter, SetSimpleLineWave, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "bool IsSimpleLineWave() const", asMETHODPR(BeamEmitter, IsSimpleLineWave, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetSimpleLineDoAlphaDisAfterStopSpeed(float speed)", asMETHODPR(BeamEmitter, SetSimpleLineDoAlphaDisAfterStopSpeed, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "float GetSimpleLineDoAlphaDisAfterStopSpeed() const", asMETHODPR(BeamEmitter, GetSimpleLineDoAlphaDisAfterStopSpeed, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetWaveTypeUp(WaveType type)", asMETHODPR(BeamEmitter, SetWaveTypeUp, (BeamEmitter::WaveType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "WaveType GetWaveTypeUp() const", asMETHODPR(BeamEmitter, GetWaveTypeUp, () const, BeamEmitter::WaveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetWaveTypeExtend(WaveType type)", asMETHODPR(BeamEmitter, SetWaveTypeExtend, (BeamEmitter::WaveType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "WaveType GetWaveTypeExtend() const", asMETHODPR(BeamEmitter, GetWaveTypeExtend, () const, BeamEmitter::WaveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetNumLowFrequency(int numLow)", asMETHODPR(BeamEmitter, SetNumLowFrequency, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumLowFrequency() const", asMETHODPR(BeamEmitter, GetNumLowFrequency, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetNumHighFrequency(int numHigh)", asMETHODPR(BeamEmitter, SetNumHighFrequency, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "int GetNumHighFrequency() const", asMETHODPR(BeamEmitter, GetNumHighFrequency, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetLowFrequencyRangeUp(const Float2 & range)", asMETHODPR(BeamEmitter, SetLowFrequencyRangeUp, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetLowFrequencyRangeExtend(const Float2 & range)", asMETHODPR(BeamEmitter, SetLowFrequencyRangeExtend, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetLowFrequencyRangeUp() const", asMETHODPR(BeamEmitter, GetLowFrequencyRangeUp, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetLowFrequencyRangeExtend() const", asMETHODPR(BeamEmitter, GetLowFrequencyRangeExtend, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetHighFrequencyRangeUp(const Float2 & range)", asMETHODPR(BeamEmitter, SetHighFrequencyRangeUp, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "void SetHighFrequencyRangeExtend(const Float2 & range)", asMETHODPR(BeamEmitter, SetHighFrequencyRangeExtend, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetHighFrequencyRangeUp() const", asMETHODPR(BeamEmitter, GetHighFrequencyRangeUp, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("BeamEmitter", "const Float2 & GetHighFrequencyRangeExtend() const", asMETHODPR(BeamEmitter, GetHighFrequencyRangeExtend, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti BeamEmitter_TYPE", (void*)&BeamEmitter::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "Transform LocalTransform", asOFFSET(BeamEmitter, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "Transform WorldTransform", asOFFSET(BeamEmitter, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "bool WorldTransformIsCurrent", asOFFSET(BeamEmitter, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "bool IsSkinCtrlSetWroldTrans", asOFFSET(BeamEmitter, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "Transform BoundWorldTransform", asOFFSET(BeamEmitter, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "Bound WorldBound", asOFFSET(BeamEmitter, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "bool WorldBoundIsCurrent", asOFFSET(BeamEmitter, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("BeamEmitter", "CullingMode Culling", asOFFSET(BeamEmitter, Culling));
	assert(r >= 0);
	// Class: Billboard
	r = asEngine->RegisterObjectBehaviour("Billboard", asBEHAVE_FACTORY, "Billboard @ f()", asFUNCTION(fBillboard0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Billboard", asBEHAVE_ADDREF, "void f()", asMETHOD(Billboard, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Billboard", asBEHAVE_RELEASE, "void f()", asMETHOD(Billboard, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Effectable@+ opImplCast()", asFUNCTION((RefCast<Billboard, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Billboard@+ opCast()", asFUNCTION((RefCast<Effectable, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<Billboard, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Billboard@+ opCast()", asFUNCTION((RefCast<TriMesh, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Triangles@+ opImplCast()", asFUNCTION((RefCast<Billboard, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Billboard@+ opCast()", asFUNCTION((RefCast<Triangles, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Renderable@+ opImplCast()", asFUNCTION((RefCast<Billboard, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Billboard@+ opCast()", asFUNCTION((RefCast<Renderable, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Movable@+ opImplCast()", asFUNCTION((RefCast<Billboard, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Billboard@+ opCast()", asFUNCTION((RefCast<Movable, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Billboard, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Billboard@+ opCast()", asFUNCTION((RefCast<Controlledable, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Object@+ opImplCast()", asFUNCTION((RefCast<Billboard, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Billboard@+ opCast()", asFUNCTION((RefCast<Object, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Billboard, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Billboard@+ opCast()", asFUNCTION((RefCast<RefObject, Billboard>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void IncrementReferences()", asMETHODPR(Billboard, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void DecrementReferences()", asMETHODPR(Billboard, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetReferences() const", asMETHODPR(Billboard, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void Enable(bool enable)", asMETHODPR(Billboard, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsEnable() const", asMETHODPR(Billboard, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetActivate(bool act)", asMETHODPR(Billboard, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsActivated() const", asMETHODPR(Billboard, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Rtti & GetRttiType() const", asMETHODPR(Billboard, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "uint16 GetRttiVersion() const", asMETHODPR(Billboard, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsExactly(const Rtti & type) const", asMETHODPR(Billboard, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsDerived(const Rtti & type) const", asMETHODPR(Billboard, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Billboard, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Billboard, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Billboard, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Billboard, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const string & GetResourcePath() const", asMETHODPR(Billboard, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetName(const string & name)", asMETHODPR(Billboard, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const string & GetName() const", asMETHODPR(Billboard, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Billboard, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetID(int id)", asMETHODPR(Billboard, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetID() const", asMETHODPR(Billboard, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Object @+ GetObjectByID(int id)", asMETHODPR(Billboard, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void ComeInEventWorld()", asMETHODPR(Billboard, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void GoOutEventWorld()", asMETHODPR(Billboard, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsInEventWorld()", asMETHODPR(Billboard, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void ResetPlay()", asMETHODPR(Billboard, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void Play()", asMETHODPR(Billboard, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsPlaying() const", asMETHODPR(Billboard, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void Stop()", asMETHODPR(Billboard, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void Reset()", asMETHODPR(Billboard, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Billboard, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsSelfCtrled() const", asMETHODPR(Billboard, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Billboard, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsAutoPlay() const", asMETHODPR(Billboard, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetNumControllers() const", asMETHODPR(Billboard, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Controller @+ GetController(int i) const", asMETHODPR(Billboard, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Billboard, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool HasController(Controller @+ controller)", asMETHODPR(Billboard, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void AttachController(Controller @+ controller)", asMETHODPR(Billboard, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void DetachController(Controller @+ controller)", asMETHODPR(Billboard, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void DetachAllControllers()", asMETHODPR(Billboard, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SortControls()", asMETHODPR(Billboard, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Billboard, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void Show(bool show)", asMETHODPR(Billboard, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsShow() const", asMETHODPR(Billboard, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Billboard, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsColorSelfCtrled() const", asMETHODPR(Billboard, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetColor(const Float3 & color)", asMETHODPR(Billboard, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float3 & GetColor() const", asMETHODPR(Billboard, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Billboard, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsAlphaSelfCtrled() const", asMETHODPR(Billboard, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetAlpha(float alpha)", asMETHODPR(Billboard, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetAlpha() const", asMETHODPR(Billboard, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Billboard, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Billboard, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetBrightness(float brightness)", asMETHODPR(Billboard, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetBrightness() const", asMETHODPR(Billboard, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float3 & GetLastColor() const", asMETHODPR(Billboard, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetLastAlpha() const", asMETHODPR(Billboard, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetLastBrightness() const", asMETHODPR(Billboard, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "Movable @+ GetParent()", asMETHODPR(Billboard, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "PrimitiveType GetPrimitiveType() const", asMETHODPR(Billboard, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetNumTriangles() const", asMETHODPR(Billboard, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(Billboard, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "EffectableController @+ GetEffectableController() const", asMETHODPR(Billboard, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetFixedBound(bool fixed)", asMETHODPR(Billboard, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsFixedBound()", asMETHODPR(Billboard, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(Billboard, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "APoint GetFixedBoundCenter()", asMETHODPR(Billboard, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetFixedBoundRadius(float radius)", asMETHODPR(Billboard, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetFixedBoundRadius()", asMETHODPR(Billboard, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetLocal(bool l)", asMETHODPR(Billboard, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsLocal() const", asMETHODPR(Billboard, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitSizeX(float val)", asMETHODPR(Billboard, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetEmitSizeX() const", asMETHODPR(Billboard, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitSizeY(float val)", asMETHODPR(Billboard, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetEmitSizeY() const", asMETHODPR(Billboard, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitSizeZ(float val)", asMETHODPR(Billboard, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetEmitSizeZ() const", asMETHODPR(Billboard, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitSizeXYZ(float val)", asMETHODPR(Billboard, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitColor(const Float3 & color)", asMETHODPR(Billboard, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float3 & GetEmitColor() const", asMETHODPR(Billboard, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitAlpha(float alpha)", asMETHODPR(Billboard, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetEmitAlpha() const", asMETHODPR(Billboard, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitLife(float life)", asMETHODPR(Billboard, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetEmitLife() const", asMETHODPR(Billboard, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetFaceType(FaceType type)", asMETHODPR(Billboard, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "FaceType GetFaceType() const", asMETHODPR(Billboard, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetMaterialType(MaterialType type)", asMETHODPR(Billboard, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "MaterialType GetMaterialType() const", asMETHODPR(Billboard, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetBackCull(bool isBackCull)", asMETHODPR(Billboard, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsBackCull() const", asMETHODPR(Billboard, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetBlendMode(BlendMode mode)", asMETHODPR(Billboard, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "BlendMode GetBlendMode() const", asMETHODPR(Billboard, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetTexMode(TexMode mode)", asMETHODPR(Billboard, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "TexMode GetTexMode() const", asMETHODPR(Billboard, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool SetTex(const string & filename)", asMETHODPR(Billboard, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const string & GetTex() const", asMETHODPR(Billboard, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(Billboard, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(Billboard, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool SetTexAnim(const string & filename)", asMETHODPR(Billboard, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const string & GetTexAnim() const", asMETHODPR(Billboard, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(Billboard, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(Billboard, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(Billboard, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(Billboard, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const string & GetTexPackAnim() const", asMETHODPR(Billboard, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(Billboard, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(Billboard, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(Billboard, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetAnimInterval(float seconds)", asMETHODPR(Billboard, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetAnimInterval() const", asMETHODPR(Billboard, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(Billboard, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsAnimStartDoRandom() const", asMETHODPR(Billboard, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(Billboard, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetUserNumAnimFrames() const", asMETHODPR(Billboard, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "int GetNumAnimFrames() const", asMETHODPR(Billboard, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(Billboard, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsAnimFramesPlayOnce() const", asMETHODPR(Billboard, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetMaskTex(const string & filename)", asMETHODPR(Billboard, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const string & GetMaskTex() const", asMETHODPR(Billboard, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(Billboard, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(Billboard, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(Billboard, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(Billboard, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(Billboard, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(Billboard, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(Billboard, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetUV1_Offset() const", asMETHODPR(Billboard, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(Billboard, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetUV1_Repeat() const", asMETHODPR(Billboard, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(Billboard, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetUV1_Speed() const", asMETHODPR(Billboard, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(Billboard, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "CoordinateType GetCoordinateType0() const", asMETHODPR(Billboard, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(Billboard, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "CoordinateType GetCoordinateType1() const", asMETHODPR(Billboard, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetDynamic(bool isDynamic)", asMETHODPR(Billboard, SetDynamic, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsDynamic() const", asMETHODPR(Billboard, IsDynamic, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetPivot(float anchX, float anchZ)", asMETHODPR(Billboard, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetPivot(const Float2 & anchor)", asMETHODPR(Billboard, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "const Float2 & GetPivot() const", asMETHODPR(Billboard, GetPivot, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUseTexAsSize(bool use)", asMETHODPR(Billboard, SetUseTexAsSize, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsUseTexAsSize() const", asMETHODPR(Billboard, IsUseTexAsSize, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetUseTrim(bool useTrim)", asMETHODPR(Billboard, SetUseTrim, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsUseTrim() const", asMETHODPR(Billboard, IsUseTrim, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetDoAlphaDisAfterStop(bool doAlphaDis)", asMETHODPR(Billboard, SetDoAlphaDisAfterStop, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "bool IsDoAlphaDisAfterStop() const", asMETHODPR(Billboard, IsDoAlphaDisAfterStop, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetDoAlphaDisAfterStopSpeed(float speed)", asMETHODPR(Billboard, SetDoAlphaDisAfterStopSpeed, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "float GetDoAlphaDisAfterStopSpeed() const", asMETHODPR(Billboard, GetDoAlphaDisAfterStopSpeed, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Billboard", "void SetSizeImmediate(float sizeX, float sizeY, float sizeZ)", asMETHODPR(Billboard, SetSizeImmediate, (float, float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Billboard_TYPE", (void*)&Billboard::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "Transform LocalTransform", asOFFSET(Billboard, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "Transform WorldTransform", asOFFSET(Billboard, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "bool WorldTransformIsCurrent", asOFFSET(Billboard, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Billboard, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "Transform BoundWorldTransform", asOFFSET(Billboard, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "Bound WorldBound", asOFFSET(Billboard, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "bool WorldBoundIsCurrent", asOFFSET(Billboard, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Billboard", "CullingMode Culling", asOFFSET(Billboard, Culling));
	assert(r >= 0);
	// Class: CameraShake
	r = asEngine->RegisterObjectBehaviour("CameraShake", asBEHAVE_FACTORY, "CameraShake @ f()", asFUNCTION(fCameraShake0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("CameraShake", asBEHAVE_ADDREF, "void f()", asMETHOD(CameraShake, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("CameraShake", asBEHAVE_RELEASE, "void f()", asMETHOD(CameraShake, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Effectable@+ opImplCast()", asFUNCTION((RefCast<CameraShake, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "CameraShake@+ opCast()", asFUNCTION((RefCast<Effectable, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<CameraShake, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "CameraShake@+ opCast()", asFUNCTION((RefCast<TriMesh, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Triangles@+ opImplCast()", asFUNCTION((RefCast<CameraShake, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "CameraShake@+ opCast()", asFUNCTION((RefCast<Triangles, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Renderable@+ opImplCast()", asFUNCTION((RefCast<CameraShake, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "CameraShake@+ opCast()", asFUNCTION((RefCast<Renderable, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Movable@+ opImplCast()", asFUNCTION((RefCast<CameraShake, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "CameraShake@+ opCast()", asFUNCTION((RefCast<Movable, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<CameraShake, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "CameraShake@+ opCast()", asFUNCTION((RefCast<Controlledable, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Object@+ opImplCast()", asFUNCTION((RefCast<CameraShake, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "CameraShake@+ opCast()", asFUNCTION((RefCast<Object, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "RefObject@+ opImplCast()", asFUNCTION((RefCast<CameraShake, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "CameraShake@+ opCast()", asFUNCTION((RefCast<RefObject, CameraShake>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void IncrementReferences()", asMETHODPR(CameraShake, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void DecrementReferences()", asMETHODPR(CameraShake, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetReferences() const", asMETHODPR(CameraShake, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void Enable(bool enable)", asMETHODPR(CameraShake, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsEnable() const", asMETHODPR(CameraShake, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetActivate(bool act)", asMETHODPR(CameraShake, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsActivated() const", asMETHODPR(CameraShake, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Rtti & GetRttiType() const", asMETHODPR(CameraShake, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "uint16 GetRttiVersion() const", asMETHODPR(CameraShake, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsExactly(const Rtti & type) const", asMETHODPR(CameraShake, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsDerived(const Rtti & type) const", asMETHODPR(CameraShake, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(CameraShake, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(CameraShake, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(CameraShake, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(CameraShake, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const string & GetResourcePath() const", asMETHODPR(CameraShake, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetName(const string & name)", asMETHODPR(CameraShake, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const string & GetName() const", asMETHODPR(CameraShake, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Object @+ GetObjectByName(const string & name)", asMETHODPR(CameraShake, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetID(int id)", asMETHODPR(CameraShake, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetID() const", asMETHODPR(CameraShake, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Object @+ GetObjectByID(int id)", asMETHODPR(CameraShake, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void ComeInEventWorld()", asMETHODPR(CameraShake, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void GoOutEventWorld()", asMETHODPR(CameraShake, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsInEventWorld()", asMETHODPR(CameraShake, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void ResetPlay()", asMETHODPR(CameraShake, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void Play()", asMETHODPR(CameraShake, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsPlaying() const", asMETHODPR(CameraShake, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void Stop()", asMETHODPR(CameraShake, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void Reset()", asMETHODPR(CameraShake, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(CameraShake, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsSelfCtrled() const", asMETHODPR(CameraShake, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetAutoPlay(bool autoPlay)", asMETHODPR(CameraShake, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsAutoPlay() const", asMETHODPR(CameraShake, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetNumControllers() const", asMETHODPR(CameraShake, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Controller @+ GetController(int i) const", asMETHODPR(CameraShake, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(CameraShake, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool HasController(Controller @+ controller)", asMETHODPR(CameraShake, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void AttachController(Controller @+ controller)", asMETHODPR(CameraShake, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void DetachController(Controller @+ controller)", asMETHODPR(CameraShake, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void DetachAllControllers()", asMETHODPR(CameraShake, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SortControls()", asMETHODPR(CameraShake, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(CameraShake, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void Show(bool show)", asMETHODPR(CameraShake, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsShow() const", asMETHODPR(CameraShake, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(CameraShake, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsColorSelfCtrled() const", asMETHODPR(CameraShake, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetColor(const Float3 & color)", asMETHODPR(CameraShake, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float3 & GetColor() const", asMETHODPR(CameraShake, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(CameraShake, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsAlphaSelfCtrled() const", asMETHODPR(CameraShake, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetAlpha(float alpha)", asMETHODPR(CameraShake, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetAlpha() const", asMETHODPR(CameraShake, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(CameraShake, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsBrightnessSelfCtrled() const", asMETHODPR(CameraShake, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetBrightness(float brightness)", asMETHODPR(CameraShake, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetBrightness() const", asMETHODPR(CameraShake, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float3 & GetLastColor() const", asMETHODPR(CameraShake, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetLastAlpha() const", asMETHODPR(CameraShake, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetLastBrightness() const", asMETHODPR(CameraShake, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "Movable @+ GetParent()", asMETHODPR(CameraShake, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "PrimitiveType GetPrimitiveType() const", asMETHODPR(CameraShake, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetNumTriangles() const", asMETHODPR(CameraShake, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(CameraShake, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "EffectableController @+ GetEffectableController() const", asMETHODPR(CameraShake, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetFixedBound(bool fixed)", asMETHODPR(CameraShake, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsFixedBound()", asMETHODPR(CameraShake, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(CameraShake, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "APoint GetFixedBoundCenter()", asMETHODPR(CameraShake, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetFixedBoundRadius(float radius)", asMETHODPR(CameraShake, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetFixedBoundRadius()", asMETHODPR(CameraShake, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetLocal(bool l)", asMETHODPR(CameraShake, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsLocal() const", asMETHODPR(CameraShake, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitSizeX(float val)", asMETHODPR(CameraShake, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetEmitSizeX() const", asMETHODPR(CameraShake, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitSizeY(float val)", asMETHODPR(CameraShake, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetEmitSizeY() const", asMETHODPR(CameraShake, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitSizeZ(float val)", asMETHODPR(CameraShake, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetEmitSizeZ() const", asMETHODPR(CameraShake, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitSizeXYZ(float val)", asMETHODPR(CameraShake, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitColor(const Float3 & color)", asMETHODPR(CameraShake, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float3 & GetEmitColor() const", asMETHODPR(CameraShake, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitAlpha(float alpha)", asMETHODPR(CameraShake, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetEmitAlpha() const", asMETHODPR(CameraShake, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitLife(float life)", asMETHODPR(CameraShake, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetEmitLife() const", asMETHODPR(CameraShake, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetFaceType(FaceType type)", asMETHODPR(CameraShake, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "FaceType GetFaceType() const", asMETHODPR(CameraShake, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetMaterialType(MaterialType type)", asMETHODPR(CameraShake, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "MaterialType GetMaterialType() const", asMETHODPR(CameraShake, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetBackCull(bool isBackCull)", asMETHODPR(CameraShake, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsBackCull() const", asMETHODPR(CameraShake, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetBlendMode(BlendMode mode)", asMETHODPR(CameraShake, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "BlendMode GetBlendMode() const", asMETHODPR(CameraShake, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetTexMode(TexMode mode)", asMETHODPR(CameraShake, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "TexMode GetTexMode() const", asMETHODPR(CameraShake, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool SetTex(const string & filename)", asMETHODPR(CameraShake, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const string & GetTex() const", asMETHODPR(CameraShake, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(CameraShake, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(CameraShake, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool SetTexAnim(const string & filename)", asMETHODPR(CameraShake, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const string & GetTexAnim() const", asMETHODPR(CameraShake, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(CameraShake, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(CameraShake, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(CameraShake, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(CameraShake, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const string & GetTexPackAnim() const", asMETHODPR(CameraShake, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(CameraShake, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(CameraShake, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(CameraShake, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetAnimInterval(float seconds)", asMETHODPR(CameraShake, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetAnimInterval() const", asMETHODPR(CameraShake, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(CameraShake, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsAnimStartDoRandom() const", asMETHODPR(CameraShake, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(CameraShake, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetUserNumAnimFrames() const", asMETHODPR(CameraShake, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetNumAnimFrames() const", asMETHODPR(CameraShake, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(CameraShake, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsAnimFramesPlayOnce() const", asMETHODPR(CameraShake, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetMaskTex(const string & filename)", asMETHODPR(CameraShake, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const string & GetMaskTex() const", asMETHODPR(CameraShake, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(CameraShake, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(CameraShake, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(CameraShake, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(CameraShake, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(CameraShake, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(CameraShake, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(CameraShake, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetUV1_Offset() const", asMETHODPR(CameraShake, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(CameraShake, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetUV1_Repeat() const", asMETHODPR(CameraShake, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(CameraShake, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "const Float2 & GetUV1_Speed() const", asMETHODPR(CameraShake, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(CameraShake, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "CoordinateType GetCoordinateType0() const", asMETHODPR(CameraShake, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(CameraShake, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "CoordinateType GetCoordinateType1() const", asMETHODPR(CameraShake, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
			r = asEngine->RegisterObjectMethod("CameraShake", "void SetUseX(bool use)", asMETHODPR(CameraShake, SetUseX, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsUseX() const", asMETHODPR(CameraShake, IsUseX, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUseY(bool use)", asMETHODPR(CameraShake, SetUseY, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsUseY() const", asMETHODPR(CameraShake, IsUseY, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetUseZ(bool use)", asMETHODPR(CameraShake, SetUseZ, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "bool IsUseZ() const", asMETHODPR(CameraShake, IsUseZ, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetMaxDistance(float dist)", asMETHODPR(CameraShake, SetMaxDistance, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetMaxDistance() const", asMETHODPR(CameraShake, GetMaxDistance, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "void SetEmitStrength(float strength)", asMETHODPR(CameraShake, SetEmitStrength, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "float GetEmitStrength() const", asMETHODPR(CameraShake, GetEmitStrength, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("CameraShake", "int GetShakeChannel() const", asMETHODPR(CameraShake, GetShakeChannel, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti CameraShake_TYPE", (void*)&CameraShake::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "Transform LocalTransform", asOFFSET(CameraShake, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "Transform WorldTransform", asOFFSET(CameraShake, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "bool WorldTransformIsCurrent", asOFFSET(CameraShake, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "bool IsSkinCtrlSetWroldTrans", asOFFSET(CameraShake, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "Transform BoundWorldTransform", asOFFSET(CameraShake, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "Bound WorldBound", asOFFSET(CameraShake, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "bool WorldBoundIsCurrent", asOFFSET(CameraShake, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("CameraShake", "CullingMode Culling", asOFFSET(CameraShake, Culling));
	assert(r >= 0);
	// Class: EffectModel
	// Enum: ModelType
	r = asEngine->RegisterEnum("ModelType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ModelType", "MT_SPHERE", EffectModel::ModelType::MT_SPHERE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ModelType", "MT_CYLINDEROPEN", EffectModel::ModelType::MT_CYLINDEROPEN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ModelType", "MT_MODEL", EffectModel::ModelType::MT_MODEL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ModelType", "MT_MAX_TYPE", EffectModel::ModelType::MT_MAX_TYPE);
	assert(r >= 0);
	// Enum: HeightAlphaType
	r = asEngine->RegisterEnum("HeightAlphaType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("HeightAlphaType", "HAT_NORMAL", EffectModel::HeightAlphaType::HAT_NORMAL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("HeightAlphaType", "HAT_H2L_APPEAR", EffectModel::HeightAlphaType::HAT_H2L_APPEAR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("HeightAlphaType", "HAT_H2L_DISAPPEAR", EffectModel::HeightAlphaType::HAT_H2L_DISAPPEAR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("HeightAlphaType", "HAT_H2L_APPEAR_DISAPPEAR", EffectModel::HeightAlphaType::HAT_H2L_APPEAR_DISAPPEAR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("HeightAlphaType", "HAT_H2L_DISAPPEAR_APPEAR", EffectModel::HeightAlphaType::HAT_H2L_DISAPPEAR_APPEAR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("HeightAlphaType", "HAT_MAX_TYPE", EffectModel::HeightAlphaType::HAT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectModel", asBEHAVE_FACTORY, "EffectModel @ f()", asFUNCTION(fEffectModel0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectModel", asBEHAVE_ADDREF, "void f()", asMETHOD(EffectModel, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectModel", asBEHAVE_RELEASE, "void f()", asMETHOD(EffectModel, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Effectable@+ opImplCast()", asFUNCTION((RefCast<EffectModel, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "EffectModel@+ opCast()", asFUNCTION((RefCast<Effectable, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<EffectModel, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "EffectModel@+ opCast()", asFUNCTION((RefCast<TriMesh, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Triangles@+ opImplCast()", asFUNCTION((RefCast<EffectModel, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "EffectModel@+ opCast()", asFUNCTION((RefCast<Triangles, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Renderable@+ opImplCast()", asFUNCTION((RefCast<EffectModel, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "EffectModel@+ opCast()", asFUNCTION((RefCast<Renderable, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Movable@+ opImplCast()", asFUNCTION((RefCast<EffectModel, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "EffectModel@+ opCast()", asFUNCTION((RefCast<Movable, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<EffectModel, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "EffectModel@+ opCast()", asFUNCTION((RefCast<Controlledable, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Object@+ opImplCast()", asFUNCTION((RefCast<EffectModel, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "EffectModel@+ opCast()", asFUNCTION((RefCast<Object, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "RefObject@+ opImplCast()", asFUNCTION((RefCast<EffectModel, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "EffectModel@+ opCast()", asFUNCTION((RefCast<RefObject, EffectModel>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void IncrementReferences()", asMETHODPR(EffectModel, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void DecrementReferences()", asMETHODPR(EffectModel, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetReferences() const", asMETHODPR(EffectModel, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void Enable(bool enable)", asMETHODPR(EffectModel, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsEnable() const", asMETHODPR(EffectModel, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetActivate(bool act)", asMETHODPR(EffectModel, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsActivated() const", asMETHODPR(EffectModel, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Rtti & GetRttiType() const", asMETHODPR(EffectModel, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "uint16 GetRttiVersion() const", asMETHODPR(EffectModel, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsExactly(const Rtti & type) const", asMETHODPR(EffectModel, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsDerived(const Rtti & type) const", asMETHODPR(EffectModel, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(EffectModel, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(EffectModel, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(EffectModel, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(EffectModel, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetResourcePath() const", asMETHODPR(EffectModel, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetName(const string & name)", asMETHODPR(EffectModel, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetName() const", asMETHODPR(EffectModel, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Object @+ GetObjectByName(const string & name)", asMETHODPR(EffectModel, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetID(int id)", asMETHODPR(EffectModel, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetID() const", asMETHODPR(EffectModel, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Object @+ GetObjectByID(int id)", asMETHODPR(EffectModel, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void ComeInEventWorld()", asMETHODPR(EffectModel, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void GoOutEventWorld()", asMETHODPR(EffectModel, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsInEventWorld()", asMETHODPR(EffectModel, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void ResetPlay()", asMETHODPR(EffectModel, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void Play()", asMETHODPR(EffectModel, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsPlaying() const", asMETHODPR(EffectModel, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void Stop()", asMETHODPR(EffectModel, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void Reset()", asMETHODPR(EffectModel, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModel, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsSelfCtrled() const", asMETHODPR(EffectModel, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetAutoPlay(bool autoPlay)", asMETHODPR(EffectModel, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsAutoPlay() const", asMETHODPR(EffectModel, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetNumControllers() const", asMETHODPR(EffectModel, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Controller @+ GetController(int i) const", asMETHODPR(EffectModel, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(EffectModel, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool HasController(Controller @+ controller)", asMETHODPR(EffectModel, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void AttachController(Controller @+ controller)", asMETHODPR(EffectModel, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void DetachController(Controller @+ controller)", asMETHODPR(EffectModel, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void DetachAllControllers()", asMETHODPR(EffectModel, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SortControls()", asMETHODPR(EffectModel, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(EffectModel, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void Show(bool show)", asMETHODPR(EffectModel, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsShow() const", asMETHODPR(EffectModel, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModel, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsColorSelfCtrled() const", asMETHODPR(EffectModel, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetColor(const Float3 & color)", asMETHODPR(EffectModel, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float3 & GetColor() const", asMETHODPR(EffectModel, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModel, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsAlphaSelfCtrled() const", asMETHODPR(EffectModel, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetAlpha(float alpha)", asMETHODPR(EffectModel, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetAlpha() const", asMETHODPR(EffectModel, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModel, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsBrightnessSelfCtrled() const", asMETHODPR(EffectModel, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetBrightness(float brightness)", asMETHODPR(EffectModel, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetBrightness() const", asMETHODPR(EffectModel, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float3 & GetLastColor() const", asMETHODPR(EffectModel, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetLastAlpha() const", asMETHODPR(EffectModel, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetLastBrightness() const", asMETHODPR(EffectModel, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "Movable @+ GetParent()", asMETHODPR(EffectModel, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "PrimitiveType GetPrimitiveType() const", asMETHODPR(EffectModel, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetNumTriangles() const", asMETHODPR(EffectModel, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(EffectModel, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "EffectableController @+ GetEffectableController() const", asMETHODPR(EffectModel, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetFixedBound(bool fixed)", asMETHODPR(EffectModel, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsFixedBound()", asMETHODPR(EffectModel, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(EffectModel, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "APoint GetFixedBoundCenter()", asMETHODPR(EffectModel, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetFixedBoundRadius(float radius)", asMETHODPR(EffectModel, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetFixedBoundRadius()", asMETHODPR(EffectModel, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetLocal(bool l)", asMETHODPR(EffectModel, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsLocal() const", asMETHODPR(EffectModel, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitSizeX(float val)", asMETHODPR(EffectModel, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetEmitSizeX() const", asMETHODPR(EffectModel, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitSizeY(float val)", asMETHODPR(EffectModel, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetEmitSizeY() const", asMETHODPR(EffectModel, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitSizeZ(float val)", asMETHODPR(EffectModel, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetEmitSizeZ() const", asMETHODPR(EffectModel, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitSizeXYZ(float val)", asMETHODPR(EffectModel, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitColor(const Float3 & color)", asMETHODPR(EffectModel, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float3 & GetEmitColor() const", asMETHODPR(EffectModel, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitAlpha(float alpha)", asMETHODPR(EffectModel, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetEmitAlpha() const", asMETHODPR(EffectModel, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitLife(float life)", asMETHODPR(EffectModel, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetEmitLife() const", asMETHODPR(EffectModel, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetFaceType(FaceType type)", asMETHODPR(EffectModel, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "FaceType GetFaceType() const", asMETHODPR(EffectModel, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetMaterialType(MaterialType type)", asMETHODPR(EffectModel, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "MaterialType GetMaterialType() const", asMETHODPR(EffectModel, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetBackCull(bool isBackCull)", asMETHODPR(EffectModel, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsBackCull() const", asMETHODPR(EffectModel, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetBlendMode(BlendMode mode)", asMETHODPR(EffectModel, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "BlendMode GetBlendMode() const", asMETHODPR(EffectModel, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetTexMode(TexMode mode)", asMETHODPR(EffectModel, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "TexMode GetTexMode() const", asMETHODPR(EffectModel, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool SetTex(const string & filename)", asMETHODPR(EffectModel, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetTex() const", asMETHODPR(EffectModel, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(EffectModel, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(EffectModel, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool SetTexAnim(const string & filename)", asMETHODPR(EffectModel, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetTexAnim() const", asMETHODPR(EffectModel, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(EffectModel, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(EffectModel, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(EffectModel, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(EffectModel, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetTexPackAnim() const", asMETHODPR(EffectModel, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(EffectModel, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(EffectModel, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(EffectModel, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetAnimInterval(float seconds)", asMETHODPR(EffectModel, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "float GetAnimInterval() const", asMETHODPR(EffectModel, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(EffectModel, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsAnimStartDoRandom() const", asMETHODPR(EffectModel, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(EffectModel, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetUserNumAnimFrames() const", asMETHODPR(EffectModel, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetNumAnimFrames() const", asMETHODPR(EffectModel, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(EffectModel, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "bool IsAnimFramesPlayOnce() const", asMETHODPR(EffectModel, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetMaskTex(const string & filename)", asMETHODPR(EffectModel, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetMaskTex() const", asMETHODPR(EffectModel, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(EffectModel, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(EffectModel, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(EffectModel, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(EffectModel, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(EffectModel, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(EffectModel, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(EffectModel, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetUV1_Offset() const", asMETHODPR(EffectModel, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(EffectModel, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetUV1_Repeat() const", asMETHODPR(EffectModel, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(EffectModel, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const Float2 & GetUV1_Speed() const", asMETHODPR(EffectModel, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(EffectModel, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "CoordinateType GetCoordinateType0() const", asMETHODPR(EffectModel, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(EffectModel, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "CoordinateType GetCoordinateType1() const", asMETHODPR(EffectModel, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("EffectModel", "void SetModelType(ModelType modelType)", asMETHODPR(EffectModel, SetModelType, (EffectModel::ModelType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "ModelType GetModelType() const", asMETHODPR(EffectModel, GetModelType, () const, EffectModel::ModelType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetRadiusSample(int radiusSample)", asMETHODPR(EffectModel, SetRadiusSample, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetRadiusSample() const", asMETHODPR(EffectModel, GetRadiusSample, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetZSample(int zSample)", asMETHODPR(EffectModel, SetZSample, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "int GetZSample() const", asMETHODPR(EffectModel, GetZSample, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetHeightAlphaType(HeightAlphaType type)", asMETHODPR(EffectModel, SetHeightAlphaType, (EffectModel::HeightAlphaType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "HeightAlphaType GetHeightAlphaType() const", asMETHODPR(EffectModel, GetHeightAlphaType, () const, EffectModel::HeightAlphaType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "void SetModelFilename(const string & filename)", asMETHODPR(EffectModel, SetModelFilename, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModel", "const string & GetModelFilename() const", asMETHODPR(EffectModel, GetModelFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti EffectModel_TYPE", (void*)&EffectModel::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "Transform LocalTransform", asOFFSET(EffectModel, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "Transform WorldTransform", asOFFSET(EffectModel, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "bool WorldTransformIsCurrent", asOFFSET(EffectModel, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "bool IsSkinCtrlSetWroldTrans", asOFFSET(EffectModel, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "Transform BoundWorldTransform", asOFFSET(EffectModel, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "Bound WorldBound", asOFFSET(EffectModel, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "bool WorldBoundIsCurrent", asOFFSET(EffectModel, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModel", "CullingMode Culling", asOFFSET(EffectModel, Culling));
	assert(r >= 0);
	// Class: EffectModelNode
	r = asEngine->RegisterObjectBehaviour("EffectModelNode", asBEHAVE_FACTORY, "EffectModelNode @ f()", asFUNCTION(fEffectModelNode0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectModelNode", asBEHAVE_ADDREF, "void f()", asMETHOD(EffectModelNode, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectModelNode", asBEHAVE_RELEASE, "void f()", asMETHOD(EffectModelNode, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Node@+ opImplCast()", asFUNCTION((RefCast<EffectModelNode, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "EffectModelNode@+ opCast()", asFUNCTION((RefCast<Node, EffectModelNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Movable@+ opImplCast()", asFUNCTION((RefCast<EffectModelNode, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "EffectModelNode@+ opCast()", asFUNCTION((RefCast<Movable, EffectModelNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<EffectModelNode, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "EffectModelNode@+ opCast()", asFUNCTION((RefCast<Controlledable, EffectModelNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Object@+ opImplCast()", asFUNCTION((RefCast<EffectModelNode, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "EffectModelNode@+ opCast()", asFUNCTION((RefCast<Object, EffectModelNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "RefObject@+ opImplCast()", asFUNCTION((RefCast<EffectModelNode, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "EffectModelNode@+ opCast()", asFUNCTION((RefCast<RefObject, EffectModelNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void IncrementReferences()", asMETHODPR(EffectModelNode, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void DecrementReferences()", asMETHODPR(EffectModelNode, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int GetReferences() const", asMETHODPR(EffectModelNode, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void Enable(bool enable)", asMETHODPR(EffectModelNode, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsEnable() const", asMETHODPR(EffectModelNode, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetActivate(bool act)", asMETHODPR(EffectModelNode, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsActivated() const", asMETHODPR(EffectModelNode, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const Rtti & GetRttiType() const", asMETHODPR(EffectModelNode, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "uint16 GetRttiVersion() const", asMETHODPR(EffectModelNode, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsExactly(const Rtti & type) const", asMETHODPR(EffectModelNode, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsDerived(const Rtti & type) const", asMETHODPR(EffectModelNode, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(EffectModelNode, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(EffectModelNode, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(EffectModelNode, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(EffectModelNode, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const string & GetResourcePath() const", asMETHODPR(EffectModelNode, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetName(const string & name)", asMETHODPR(EffectModelNode, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const string & GetName() const", asMETHODPR(EffectModelNode, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Object @+ GetObjectByName(const string & name)", asMETHODPR(EffectModelNode, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetID(int id)", asMETHODPR(EffectModelNode, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int GetID() const", asMETHODPR(EffectModelNode, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Object @+ GetObjectByID(int id)", asMETHODPR(EffectModelNode, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void ComeInEventWorld()", asMETHODPR(EffectModelNode, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void GoOutEventWorld()", asMETHODPR(EffectModelNode, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsInEventWorld()", asMETHODPR(EffectModelNode, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void ResetPlay()", asMETHODPR(EffectModelNode, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void Play()", asMETHODPR(EffectModelNode, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsPlaying() const", asMETHODPR(EffectModelNode, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void Stop()", asMETHODPR(EffectModelNode, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void Reset()", asMETHODPR(EffectModelNode, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModelNode, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsSelfCtrled() const", asMETHODPR(EffectModelNode, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetAutoPlay(bool autoPlay)", asMETHODPR(EffectModelNode, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsAutoPlay() const", asMETHODPR(EffectModelNode, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int GetNumControllers() const", asMETHODPR(EffectModelNode, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Controller @+ GetController(int i) const", asMETHODPR(EffectModelNode, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(EffectModelNode, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool HasController(Controller @+ controller)", asMETHODPR(EffectModelNode, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void AttachController(Controller @+ controller)", asMETHODPR(EffectModelNode, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void DetachController(Controller @+ controller)", asMETHODPR(EffectModelNode, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void DetachAllControllers()", asMETHODPR(EffectModelNode, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SortControls()", asMETHODPR(EffectModelNode, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(EffectModelNode, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void Show(bool show)", asMETHODPR(EffectModelNode, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsShow() const", asMETHODPR(EffectModelNode, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModelNode, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsColorSelfCtrled() const", asMETHODPR(EffectModelNode, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetColor(const Float3 & color)", asMETHODPR(EffectModelNode, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const Float3 & GetColor() const", asMETHODPR(EffectModelNode, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModelNode, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsAlphaSelfCtrled() const", asMETHODPR(EffectModelNode, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetAlpha(float alpha)", asMETHODPR(EffectModelNode, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "float GetAlpha() const", asMETHODPR(EffectModelNode, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(EffectModelNode, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsBrightnessSelfCtrled() const", asMETHODPR(EffectModelNode, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetBrightness(float brightness)", asMETHODPR(EffectModelNode, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "float GetBrightness() const", asMETHODPR(EffectModelNode, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const Float3 & GetLastColor() const", asMETHODPR(EffectModelNode, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "float GetLastAlpha() const", asMETHODPR(EffectModelNode, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "float GetLastBrightness() const", asMETHODPR(EffectModelNode, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "Movable @+ GetParent()", asMETHODPR(EffectModelNode, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("EffectModelNode", "int GetNumChildren() const", asMETHODPR(EffectModelNode, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int GetNumValidChildren() const", asMETHODPR(EffectModelNode, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int AttachChild(Movable @+ child)", asMETHODPR(EffectModelNode, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(EffectModelNode, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int DetachChild(Movable @+ child)", asMETHODPR(EffectModelNode, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool DetachChildByName(const string & name)", asMETHODPR(EffectModelNode, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void DetachAllChildren()", asMETHODPR(EffectModelNode, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetCastShadow(bool castShadow)", asMETHODPR(EffectModelNode, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(EffectModelNode, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(EffectModelNode, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsDoPickPriority() const", asMETHODPR(EffectModelNode, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void OnNotPicked(int pickInfo)", asMETHODPR(EffectModelNode, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(EffectModelNode, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "bool IsNeedCalUpdateChild() const", asMETHODPR(EffectModelNode, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetAnchorID(int anchorID)", asMETHODPR(EffectModelNode, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "int GetAnchorID() const", asMETHODPR(EffectModelNode, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetModelFilename(const string & filename)", asMETHODPR(EffectModelNode, SetModelFilename, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const string & GetModelFilename() const", asMETHODPR(EffectModelNode, GetModelFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetUVSpeed(const Float2 & uv)", asMETHODPR(EffectModelNode, SetUVSpeed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const Float2 & GetUVSpeed() const", asMETHODPR(EffectModelNode, GetUVSpeed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "void SetTextureFilename(const string & filename)", asMETHODPR(EffectModelNode, SetTextureFilename, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectModelNode", "const string & GetTextureFilename() const", asMETHODPR(EffectModelNode, GetTextureFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterGlobalProperty("Rtti EffectModelNode_TYPE", (void*)&EffectModelNode::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "Transform LocalTransform", asOFFSET(EffectModelNode, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "Transform WorldTransform", asOFFSET(EffectModelNode, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "bool WorldTransformIsCurrent", asOFFSET(EffectModelNode, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "bool IsSkinCtrlSetWroldTrans", asOFFSET(EffectModelNode, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "Transform BoundWorldTransform", asOFFSET(EffectModelNode, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "Bound WorldBound", asOFFSET(EffectModelNode, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "bool WorldBoundIsCurrent", asOFFSET(EffectModelNode, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectModelNode", "CullingMode Culling", asOFFSET(EffectModelNode, Culling));
	assert(r >= 0);
	// Class: ParticleEmitter
	// Enum: DrawType
	r = asEngine->RegisterEnum("DrawType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("DrawType", "DT_NORMAL", ParticleEmitter::DrawType::DT_NORMAL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("DrawType", "DT_MODEL", ParticleEmitter::DrawType::DT_MODEL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("DrawType", "DT_MAX_TYPE", ParticleEmitter::DrawType::DT_MAX_TYPE);
	assert(r >= 0);
	// Enum: EmitDirType
	r = asEngine->RegisterEnum("EmitDirType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("EmitDirType", "EST_NORMAL", ParticleEmitter::EmitDirType::EST_NORMAL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("EmitDirType", "EST_TOATTRACTPOINT", ParticleEmitter::EmitDirType::EST_TOATTRACTPOINT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("EmitDirType", "EST_LEVELATTRACTPOINT", ParticleEmitter::EmitDirType::EST_LEVELATTRACTPOINT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("EmitDirType", "EST_MAX_TYPE", ParticleEmitter::EmitDirType::EST_MAX_TYPE);
	assert(r >= 0);
	// Enum: RotateAxisType
	r = asEngine->RegisterEnum("RotateAxisType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RotateAxisType", "RAT_D", ParticleEmitter::RotateAxisType::RAT_D);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RotateAxisType", "RAT_U", ParticleEmitter::RotateAxisType::RAT_U);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RotateAxisType", "RAT_R", ParticleEmitter::RotateAxisType::RAT_R);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RotateAxisType", "RAT_FREE", ParticleEmitter::RotateAxisType::RAT_FREE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("RotateAxisType", "RAT_MAX_TYPE", ParticleEmitter::RotateAxisType::RAT_MAX_TYPE);
	assert(r >= 0);
	// Enum: CollisionType
	r = asEngine->RegisterEnum("CollisionType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CollisionType", "CT_NONE", ParticleEmitter::CollisionType::CT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CollisionType", "CT_FACE_HEIGHTUP", ParticleEmitter::CollisionType::CT_FACE_HEIGHTUP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CollisionType", "CT_MAX_TYPE", ParticleEmitter::CollisionType::CT_MAX_TYPE);
	assert(r >= 0);
	// Enum: CollisionOption
	r = asEngine->RegisterEnum("CollisionOption");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CollisionOption", "CO_REFLECT", ParticleEmitter::CollisionOption::CO_REFLECT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CollisionOption", "CO_DEAD", ParticleEmitter::CollisionOption::CO_DEAD);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("CollisionOption", "CO_MAX_TYPE", ParticleEmitter::CollisionOption::CO_MAX_TYPE);
	assert(r >= 0);
	// Enum: PlacerType
	r = asEngine->RegisterEnum("PlacerType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlacerType", "PT_BOX", ParticleEmitter::PlacerType::PT_BOX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlacerType", "PT_SPHERE", ParticleEmitter::PlacerType::PT_SPHERE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlacerType", "PT_COLUMN", ParticleEmitter::PlacerType::PT_COLUMN);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlacerType", "PT_MAX_TYPE", ParticleEmitter::PlacerType::PT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ParticleEmitter", asBEHAVE_FACTORY, "ParticleEmitter @ f()", asFUNCTION(fParticleEmitter0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ParticleEmitter", asBEHAVE_ADDREF, "void f()", asMETHOD(ParticleEmitter, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("ParticleEmitter", asBEHAVE_RELEASE, "void f()", asMETHOD(ParticleEmitter, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Effectable@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<Effectable, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<TriMesh, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Triangles@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<Triangles, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Renderable@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<Renderable, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Movable@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<Movable, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<Controlledable, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Object@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<Object, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "RefObject@+ opImplCast()", asFUNCTION((RefCast<ParticleEmitter, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "ParticleEmitter@+ opCast()", asFUNCTION((RefCast<RefObject, ParticleEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void IncrementReferences()", asMETHODPR(ParticleEmitter, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void DecrementReferences()", asMETHODPR(ParticleEmitter, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetReferences() const", asMETHODPR(ParticleEmitter, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void Enable(bool enable)", asMETHODPR(ParticleEmitter, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsEnable() const", asMETHODPR(ParticleEmitter, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetActivate(bool act)", asMETHODPR(ParticleEmitter, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsActivated() const", asMETHODPR(ParticleEmitter, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Rtti & GetRttiType() const", asMETHODPR(ParticleEmitter, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "uint16 GetRttiVersion() const", asMETHODPR(ParticleEmitter, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsExactly(const Rtti & type) const", asMETHODPR(ParticleEmitter, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsDerived(const Rtti & type) const", asMETHODPR(ParticleEmitter, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(ParticleEmitter, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(ParticleEmitter, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(ParticleEmitter, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(ParticleEmitter, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetResourcePath() const", asMETHODPR(ParticleEmitter, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetName(const string & name)", asMETHODPR(ParticleEmitter, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetName() const", asMETHODPR(ParticleEmitter, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Object @+ GetObjectByName(const string & name)", asMETHODPR(ParticleEmitter, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetID(int id)", asMETHODPR(ParticleEmitter, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetID() const", asMETHODPR(ParticleEmitter, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Object @+ GetObjectByID(int id)", asMETHODPR(ParticleEmitter, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void ComeInEventWorld()", asMETHODPR(ParticleEmitter, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void GoOutEventWorld()", asMETHODPR(ParticleEmitter, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsInEventWorld()", asMETHODPR(ParticleEmitter, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void ResetPlay()", asMETHODPR(ParticleEmitter, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void Play()", asMETHODPR(ParticleEmitter, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsPlaying() const", asMETHODPR(ParticleEmitter, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void Stop()", asMETHODPR(ParticleEmitter, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void Reset()", asMETHODPR(ParticleEmitter, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(ParticleEmitter, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsSelfCtrled() const", asMETHODPR(ParticleEmitter, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetAutoPlay(bool autoPlay)", asMETHODPR(ParticleEmitter, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsAutoPlay() const", asMETHODPR(ParticleEmitter, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetNumControllers() const", asMETHODPR(ParticleEmitter, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Controller @+ GetController(int i) const", asMETHODPR(ParticleEmitter, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(ParticleEmitter, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool HasController(Controller @+ controller)", asMETHODPR(ParticleEmitter, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void AttachController(Controller @+ controller)", asMETHODPR(ParticleEmitter, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void DetachController(Controller @+ controller)", asMETHODPR(ParticleEmitter, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void DetachAllControllers()", asMETHODPR(ParticleEmitter, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SortControls()", asMETHODPR(ParticleEmitter, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(ParticleEmitter, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void Show(bool show)", asMETHODPR(ParticleEmitter, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsShow() const", asMETHODPR(ParticleEmitter, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(ParticleEmitter, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsColorSelfCtrled() const", asMETHODPR(ParticleEmitter, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetColor(const Float3 & color)", asMETHODPR(ParticleEmitter, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float3 & GetColor() const", asMETHODPR(ParticleEmitter, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(ParticleEmitter, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsAlphaSelfCtrled() const", asMETHODPR(ParticleEmitter, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetAlpha(float alpha)", asMETHODPR(ParticleEmitter, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetAlpha() const", asMETHODPR(ParticleEmitter, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(ParticleEmitter, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsBrightnessSelfCtrled() const", asMETHODPR(ParticleEmitter, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetBrightness(float brightness)", asMETHODPR(ParticleEmitter, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetBrightness() const", asMETHODPR(ParticleEmitter, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float3 & GetLastColor() const", asMETHODPR(ParticleEmitter, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetLastAlpha() const", asMETHODPR(ParticleEmitter, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetLastBrightness() const", asMETHODPR(ParticleEmitter, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "Movable @+ GetParent()", asMETHODPR(ParticleEmitter, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "PrimitiveType GetPrimitiveType() const", asMETHODPR(ParticleEmitter, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetNumTriangles() const", asMETHODPR(ParticleEmitter, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(ParticleEmitter, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "EffectableController @+ GetEffectableController() const", asMETHODPR(ParticleEmitter, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetFixedBound(bool fixed)", asMETHODPR(ParticleEmitter, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsFixedBound()", asMETHODPR(ParticleEmitter, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(ParticleEmitter, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "APoint GetFixedBoundCenter()", asMETHODPR(ParticleEmitter, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetFixedBoundRadius(float radius)", asMETHODPR(ParticleEmitter, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetFixedBoundRadius()", asMETHODPR(ParticleEmitter, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetLocal(bool l)", asMETHODPR(ParticleEmitter, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsLocal() const", asMETHODPR(ParticleEmitter, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitSizeX(float val)", asMETHODPR(ParticleEmitter, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitSizeX() const", asMETHODPR(ParticleEmitter, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitSizeY(float val)", asMETHODPR(ParticleEmitter, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitSizeY() const", asMETHODPR(ParticleEmitter, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitSizeZ(float val)", asMETHODPR(ParticleEmitter, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitSizeZ() const", asMETHODPR(ParticleEmitter, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitSizeXYZ(float val)", asMETHODPR(ParticleEmitter, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitColor(const Float3 & color)", asMETHODPR(ParticleEmitter, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float3 & GetEmitColor() const", asMETHODPR(ParticleEmitter, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitAlpha(float alpha)", asMETHODPR(ParticleEmitter, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitAlpha() const", asMETHODPR(ParticleEmitter, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitLife(float life)", asMETHODPR(ParticleEmitter, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitLife() const", asMETHODPR(ParticleEmitter, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetFaceType(FaceType type)", asMETHODPR(ParticleEmitter, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "FaceType GetFaceType() const", asMETHODPR(ParticleEmitter, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetMaterialType(MaterialType type)", asMETHODPR(ParticleEmitter, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "MaterialType GetMaterialType() const", asMETHODPR(ParticleEmitter, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetBackCull(bool isBackCull)", asMETHODPR(ParticleEmitter, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsBackCull() const", asMETHODPR(ParticleEmitter, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetBlendMode(BlendMode mode)", asMETHODPR(ParticleEmitter, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "BlendMode GetBlendMode() const", asMETHODPR(ParticleEmitter, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetTexMode(TexMode mode)", asMETHODPR(ParticleEmitter, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "TexMode GetTexMode() const", asMETHODPR(ParticleEmitter, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool SetTex(const string & filename)", asMETHODPR(ParticleEmitter, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetTex() const", asMETHODPR(ParticleEmitter, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(ParticleEmitter, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(ParticleEmitter, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool SetTexAnim(const string & filename)", asMETHODPR(ParticleEmitter, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetTexAnim() const", asMETHODPR(ParticleEmitter, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(ParticleEmitter, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(ParticleEmitter, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(ParticleEmitter, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(ParticleEmitter, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetTexPackAnim() const", asMETHODPR(ParticleEmitter, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(ParticleEmitter, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(ParticleEmitter, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(ParticleEmitter, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetAnimInterval(float seconds)", asMETHODPR(ParticleEmitter, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetAnimInterval() const", asMETHODPR(ParticleEmitter, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(ParticleEmitter, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsAnimStartDoRandom() const", asMETHODPR(ParticleEmitter, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(ParticleEmitter, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetUserNumAnimFrames() const", asMETHODPR(ParticleEmitter, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetNumAnimFrames() const", asMETHODPR(ParticleEmitter, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(ParticleEmitter, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsAnimFramesPlayOnce() const", asMETHODPR(ParticleEmitter, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetMaskTex(const string & filename)", asMETHODPR(ParticleEmitter, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetMaskTex() const", asMETHODPR(ParticleEmitter, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(ParticleEmitter, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(ParticleEmitter, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(ParticleEmitter, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(ParticleEmitter, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(ParticleEmitter, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(ParticleEmitter, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(ParticleEmitter, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetUV1_Offset() const", asMETHODPR(ParticleEmitter, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(ParticleEmitter, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetUV1_Repeat() const", asMETHODPR(ParticleEmitter, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(ParticleEmitter, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetUV1_Speed() const", asMETHODPR(ParticleEmitter, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(ParticleEmitter, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "CoordinateType GetCoordinateType0() const", asMETHODPR(ParticleEmitter, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(ParticleEmitter, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "CoordinateType GetCoordinateType1() const", asMETHODPR(ParticleEmitter, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetMaxNumParticles(int num)", asMETHODPR(ParticleEmitter, SetMaxNumParticles, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "int GetMaxNumParticles() const", asMETHODPR(ParticleEmitter, GetMaxNumParticles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetBlast(bool blast)", asMETHODPR(ParticleEmitter, SetBlast, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsBlast() const", asMETHODPR(ParticleEmitter, IsBlast, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetDrawType(DrawType type)", asMETHODPR(ParticleEmitter, SetDrawType, (ParticleEmitter::DrawType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "DrawType GetDrawType() const", asMETHODPR(ParticleEmitter, GetDrawType, () const, ParticleEmitter::DrawType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetModelFilename(const string & filename)", asMETHODPR(ParticleEmitter, SetModelFilename, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const string & GetModelFilename() const", asMETHODPR(ParticleEmitter, GetModelFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPivot(const Float2 & point)", asMETHODPR(ParticleEmitter, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const Float2 & GetPivot() const", asMETHODPR(ParticleEmitter, GetPivot, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitRate(float rate)", asMETHODPR(ParticleEmitter, SetEmitRate, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitRate() const", asMETHODPR(ParticleEmitter, GetEmitRate, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitDirDynamic(bool dyn)", asMETHODPR(ParticleEmitter, SetEmitDirDynamic, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsEmitDirDynamic() const", asMETHODPR(ParticleEmitter, IsEmitDirDynamic, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitDir(const AVector & dir)", asMETHODPR(ParticleEmitter, SetEmitDir, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "AVector & GetEmitDir()", asMETHODPR(ParticleEmitter, GetEmitDir, (), AVector & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitDirLocal(bool isLocal)", asMETHODPR(ParticleEmitter, SetEmitDirLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "bool IsEmitDirLocal() const", asMETHODPR(ParticleEmitter, IsEmitDirLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitDirType(EmitDirType type)", asMETHODPR(ParticleEmitter, SetEmitDirType, (ParticleEmitter::EmitDirType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "EmitDirType GetEmitDirType() const", asMETHODPR(ParticleEmitter, GetEmitDirType, () const, ParticleEmitter::EmitDirType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitSpeed(float speed)", asMETHODPR(ParticleEmitter, SetEmitSpeed, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitSpeed() const", asMETHODPR(ParticleEmitter, GetEmitSpeed, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitAccelerateDir(const AVector & dir)", asMETHODPR(ParticleEmitter, SetEmitAccelerateDir, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const AVector & GetEmitAccelerateDir() const", asMETHODPR(ParticleEmitter, GetEmitAccelerateDir, () const, const AVector & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitAccelerate(float val)", asMETHODPR(ParticleEmitter, SetEmitAccelerate, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitAccelerate() const", asMETHODPR(ParticleEmitter, GetEmitAccelerate, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitAttractPoint(const APoint & pos)", asMETHODPR(ParticleEmitter, SetEmitAttractPoint, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const APoint & GetEmitAttactPoint() const", asMETHODPR(ParticleEmitter, GetEmitAttactPoint, () const, const APoint & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitAttactStrength(const AVector & strength)", asMETHODPR(ParticleEmitter, SetEmitAttactStrength, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const AVector & GetEmitAttackStrength() const", asMETHODPR(ParticleEmitter, GetEmitAttackStrength, () const, const AVector & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetObstruct(const AVector & obs)", asMETHODPR(ParticleEmitter, SetObstruct, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const AVector & GetObstruct() const", asMETHODPR(ParticleEmitter, GetObstruct, () const, const AVector & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetRotateAxisType(RotateAxisType type)", asMETHODPR(ParticleEmitter, SetRotateAxisType, (ParticleEmitter::RotateAxisType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "RotateAxisType GetRotateAxisType() const", asMETHODPR(ParticleEmitter, GetRotateAxisType, () const, ParticleEmitter::RotateAxisType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitRotateAxis(const AVector & dir)", asMETHODPR(ParticleEmitter, SetEmitRotateAxis, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "const AVector & GetEmitRotateAxis() const", asMETHODPR(ParticleEmitter, GetEmitRotateAxis, () const, const AVector & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitRotateDegree(float degree)", asMETHODPR(ParticleEmitter, SetEmitRotateDegree, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitRotateDegree() const", asMETHODPR(ParticleEmitter, GetEmitRotateDegree, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetEmitRotateSpeed(float speed)", asMETHODPR(ParticleEmitter, SetEmitRotateSpeed, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetEmitRotateSpeed() const", asMETHODPR(ParticleEmitter, GetEmitRotateSpeed, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetCollisionType(CollisionType type)", asMETHODPR(ParticleEmitter, SetCollisionType, (ParticleEmitter::CollisionType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "CollisionType GetCollisionType() const", asMETHODPR(ParticleEmitter, GetCollisionType, () const, ParticleEmitter::CollisionType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetCollisionOption(CollisionOption type)", asMETHODPR(ParticleEmitter, SetCollisionOption, (ParticleEmitter::CollisionOption), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "CollisionOption GetCollisionOption() const", asMETHODPR(ParticleEmitter, GetCollisionOption, () const, ParticleEmitter::CollisionOption), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetCollisionFaceHeight(float height)", asMETHODPR(ParticleEmitter, SetCollisionFaceHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetCollisionFaceHeight() const", asMETHODPR(ParticleEmitter, GetCollisionFaceHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetCollisionSpeedPercent(float percent)", asMETHODPR(ParticleEmitter, SetCollisionSpeedPercent, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetCollisionSpeedPercent() const", asMETHODPR(ParticleEmitter, GetCollisionSpeedPercent, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerType(PlacerType type)", asMETHODPR(ParticleEmitter, SetPlacerType, (ParticleEmitter::PlacerType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "PlacerType GetPlacerType() const", asMETHODPR(ParticleEmitter, GetPlacerType, () const, ParticleEmitter::PlacerType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerInLength(float val)", asMETHODPR(ParticleEmitter, SetPlacerInLength, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerOutLength(float val)", asMETHODPR(ParticleEmitter, SetPlacerOutLength, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerInWidth(float val)", asMETHODPR(ParticleEmitter, SetPlacerInWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerOutWidth(float val)", asMETHODPR(ParticleEmitter, SetPlacerOutWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerInHeight(float val)", asMETHODPR(ParticleEmitter, SetPlacerInHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "void SetPlacerOutHeight(float val)", asMETHODPR(ParticleEmitter, SetPlacerOutHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetPlacerInLength() const", asMETHODPR(ParticleEmitter, GetPlacerInLength, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetPlacerOutLength() const", asMETHODPR(ParticleEmitter, GetPlacerOutLength, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetPlacerInWidth() const", asMETHODPR(ParticleEmitter, GetPlacerInWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetPlacerOutWidth() const", asMETHODPR(ParticleEmitter, GetPlacerOutWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetPlacerInHeight() const", asMETHODPR(ParticleEmitter, GetPlacerInHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "float GetPlacerOutHeight() const", asMETHODPR(ParticleEmitter, GetPlacerOutHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("ParticleEmitter", "APoint GetPlacerAPoint() const", asMETHODPR(ParticleEmitter, GetPlacerAPoint, () const, APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti ParticleEmitter_TYPE", (void*)&ParticleEmitter::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "Transform LocalTransform", asOFFSET(ParticleEmitter, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "Transform WorldTransform", asOFFSET(ParticleEmitter, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "bool WorldTransformIsCurrent", asOFFSET(ParticleEmitter, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "bool IsSkinCtrlSetWroldTrans", asOFFSET(ParticleEmitter, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "Transform BoundWorldTransform", asOFFSET(ParticleEmitter, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "Bound WorldBound", asOFFSET(ParticleEmitter, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "bool WorldBoundIsCurrent", asOFFSET(ParticleEmitter, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("ParticleEmitter", "CullingMode Culling", asOFFSET(ParticleEmitter, Culling));
	assert(r >= 0);
	// Class: RibbonEmitter
	r = asEngine->RegisterObjectBehaviour("RibbonEmitter", asBEHAVE_FACTORY, "RibbonEmitter @ f()", asFUNCTION(fRibbonEmitter0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("RibbonEmitter", asBEHAVE_ADDREF, "void f()", asMETHOD(RibbonEmitter, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("RibbonEmitter", asBEHAVE_RELEASE, "void f()", asMETHOD(RibbonEmitter, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Effectable@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<Effectable, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<TriMesh, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Triangles@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<Triangles, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Renderable@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<Renderable, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Movable@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<Movable, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<Controlledable, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Object@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<Object, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "RefObject@+ opImplCast()", asFUNCTION((RefCast<RibbonEmitter, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "RibbonEmitter@+ opCast()", asFUNCTION((RefCast<RefObject, RibbonEmitter>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void IncrementReferences()", asMETHODPR(RibbonEmitter, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void DecrementReferences()", asMETHODPR(RibbonEmitter, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetReferences() const", asMETHODPR(RibbonEmitter, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void Enable(bool enable)", asMETHODPR(RibbonEmitter, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsEnable() const", asMETHODPR(RibbonEmitter, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetActivate(bool act)", asMETHODPR(RibbonEmitter, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsActivated() const", asMETHODPR(RibbonEmitter, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Rtti & GetRttiType() const", asMETHODPR(RibbonEmitter, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "uint16 GetRttiVersion() const", asMETHODPR(RibbonEmitter, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsExactly(const Rtti & type) const", asMETHODPR(RibbonEmitter, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsDerived(const Rtti & type) const", asMETHODPR(RibbonEmitter, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(RibbonEmitter, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(RibbonEmitter, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(RibbonEmitter, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(RibbonEmitter, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const string & GetResourcePath() const", asMETHODPR(RibbonEmitter, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetName(const string & name)", asMETHODPR(RibbonEmitter, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const string & GetName() const", asMETHODPR(RibbonEmitter, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Object @+ GetObjectByName(const string & name)", asMETHODPR(RibbonEmitter, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetID(int id)", asMETHODPR(RibbonEmitter, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetID() const", asMETHODPR(RibbonEmitter, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Object @+ GetObjectByID(int id)", asMETHODPR(RibbonEmitter, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void ComeInEventWorld()", asMETHODPR(RibbonEmitter, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void GoOutEventWorld()", asMETHODPR(RibbonEmitter, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsInEventWorld()", asMETHODPR(RibbonEmitter, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void ResetPlay()", asMETHODPR(RibbonEmitter, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void Play()", asMETHODPR(RibbonEmitter, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsPlaying() const", asMETHODPR(RibbonEmitter, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void Stop()", asMETHODPR(RibbonEmitter, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void Reset()", asMETHODPR(RibbonEmitter, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(RibbonEmitter, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsSelfCtrled() const", asMETHODPR(RibbonEmitter, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetAutoPlay(bool autoPlay)", asMETHODPR(RibbonEmitter, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsAutoPlay() const", asMETHODPR(RibbonEmitter, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetNumControllers() const", asMETHODPR(RibbonEmitter, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Controller @+ GetController(int i) const", asMETHODPR(RibbonEmitter, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(RibbonEmitter, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool HasController(Controller @+ controller)", asMETHODPR(RibbonEmitter, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void AttachController(Controller @+ controller)", asMETHODPR(RibbonEmitter, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void DetachController(Controller @+ controller)", asMETHODPR(RibbonEmitter, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void DetachAllControllers()", asMETHODPR(RibbonEmitter, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SortControls()", asMETHODPR(RibbonEmitter, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(RibbonEmitter, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void Show(bool show)", asMETHODPR(RibbonEmitter, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsShow() const", asMETHODPR(RibbonEmitter, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(RibbonEmitter, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsColorSelfCtrled() const", asMETHODPR(RibbonEmitter, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetColor(const Float3 & color)", asMETHODPR(RibbonEmitter, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float3 & GetColor() const", asMETHODPR(RibbonEmitter, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(RibbonEmitter, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsAlphaSelfCtrled() const", asMETHODPR(RibbonEmitter, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetAlpha(float alpha)", asMETHODPR(RibbonEmitter, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetAlpha() const", asMETHODPR(RibbonEmitter, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(RibbonEmitter, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsBrightnessSelfCtrled() const", asMETHODPR(RibbonEmitter, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetBrightness(float brightness)", asMETHODPR(RibbonEmitter, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetBrightness() const", asMETHODPR(RibbonEmitter, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float3 & GetLastColor() const", asMETHODPR(RibbonEmitter, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetLastAlpha() const", asMETHODPR(RibbonEmitter, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetLastBrightness() const", asMETHODPR(RibbonEmitter, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "Movable @+ GetParent()", asMETHODPR(RibbonEmitter, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "PrimitiveType GetPrimitiveType() const", asMETHODPR(RibbonEmitter, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetNumTriangles() const", asMETHODPR(RibbonEmitter, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(RibbonEmitter, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "EffectableController @+ GetEffectableController() const", asMETHODPR(RibbonEmitter, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetFixedBound(bool fixed)", asMETHODPR(RibbonEmitter, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsFixedBound()", asMETHODPR(RibbonEmitter, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(RibbonEmitter, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "APoint GetFixedBoundCenter()", asMETHODPR(RibbonEmitter, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetFixedBoundRadius(float radius)", asMETHODPR(RibbonEmitter, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetFixedBoundRadius()", asMETHODPR(RibbonEmitter, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetLocal(bool l)", asMETHODPR(RibbonEmitter, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsLocal() const", asMETHODPR(RibbonEmitter, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitSizeX(float val)", asMETHODPR(RibbonEmitter, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetEmitSizeX() const", asMETHODPR(RibbonEmitter, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitSizeY(float val)", asMETHODPR(RibbonEmitter, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetEmitSizeY() const", asMETHODPR(RibbonEmitter, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitSizeZ(float val)", asMETHODPR(RibbonEmitter, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetEmitSizeZ() const", asMETHODPR(RibbonEmitter, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitSizeXYZ(float val)", asMETHODPR(RibbonEmitter, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitColor(const Float3 & color)", asMETHODPR(RibbonEmitter, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float3 & GetEmitColor() const", asMETHODPR(RibbonEmitter, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitAlpha(float alpha)", asMETHODPR(RibbonEmitter, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetEmitAlpha() const", asMETHODPR(RibbonEmitter, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitLife(float life)", asMETHODPR(RibbonEmitter, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetEmitLife() const", asMETHODPR(RibbonEmitter, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetFaceType(FaceType type)", asMETHODPR(RibbonEmitter, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "FaceType GetFaceType() const", asMETHODPR(RibbonEmitter, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetMaterialType(MaterialType type)", asMETHODPR(RibbonEmitter, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "MaterialType GetMaterialType() const", asMETHODPR(RibbonEmitter, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetBackCull(bool isBackCull)", asMETHODPR(RibbonEmitter, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsBackCull() const", asMETHODPR(RibbonEmitter, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetBlendMode(BlendMode mode)", asMETHODPR(RibbonEmitter, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "BlendMode GetBlendMode() const", asMETHODPR(RibbonEmitter, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetTexMode(TexMode mode)", asMETHODPR(RibbonEmitter, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "TexMode GetTexMode() const", asMETHODPR(RibbonEmitter, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool SetTex(const string & filename)", asMETHODPR(RibbonEmitter, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const string & GetTex() const", asMETHODPR(RibbonEmitter, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(RibbonEmitter, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(RibbonEmitter, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool SetTexAnim(const string & filename)", asMETHODPR(RibbonEmitter, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const string & GetTexAnim() const", asMETHODPR(RibbonEmitter, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(RibbonEmitter, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(RibbonEmitter, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(RibbonEmitter, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(RibbonEmitter, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const string & GetTexPackAnim() const", asMETHODPR(RibbonEmitter, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(RibbonEmitter, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(RibbonEmitter, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(RibbonEmitter, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetAnimInterval(float seconds)", asMETHODPR(RibbonEmitter, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetAnimInterval() const", asMETHODPR(RibbonEmitter, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(RibbonEmitter, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsAnimStartDoRandom() const", asMETHODPR(RibbonEmitter, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(RibbonEmitter, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetUserNumAnimFrames() const", asMETHODPR(RibbonEmitter, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "int GetNumAnimFrames() const", asMETHODPR(RibbonEmitter, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(RibbonEmitter, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "bool IsAnimFramesPlayOnce() const", asMETHODPR(RibbonEmitter, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetMaskTex(const string & filename)", asMETHODPR(RibbonEmitter, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const string & GetMaskTex() const", asMETHODPR(RibbonEmitter, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(RibbonEmitter, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(RibbonEmitter, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(RibbonEmitter, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(RibbonEmitter, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(RibbonEmitter, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(RibbonEmitter, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(RibbonEmitter, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetUV1_Offset() const", asMETHODPR(RibbonEmitter, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(RibbonEmitter, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetUV1_Repeat() const", asMETHODPR(RibbonEmitter, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(RibbonEmitter, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "const Float2 & GetUV1_Speed() const", asMETHODPR(RibbonEmitter, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(RibbonEmitter, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "CoordinateType GetCoordinateType0() const", asMETHODPR(RibbonEmitter, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(RibbonEmitter, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "CoordinateType GetCoordinateType1() const", asMETHODPR(RibbonEmitter, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetLength(float length)", asMETHODPR(RibbonEmitter, SetLength, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetLength() const", asMETHODPR(RibbonEmitter, GetLength, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "void SetSegLength(float length)", asMETHODPR(RibbonEmitter, SetSegLength, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RibbonEmitter", "float GetSegLength() const", asMETHODPR(RibbonEmitter, GetSegLength, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti RibbonEmitter_TYPE", (void*)&RibbonEmitter::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "Transform LocalTransform", asOFFSET(RibbonEmitter, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "Transform WorldTransform", asOFFSET(RibbonEmitter, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "bool WorldTransformIsCurrent", asOFFSET(RibbonEmitter, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "bool IsSkinCtrlSetWroldTrans", asOFFSET(RibbonEmitter, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "Transform BoundWorldTransform", asOFFSET(RibbonEmitter, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "Bound WorldBound", asOFFSET(RibbonEmitter, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "bool WorldBoundIsCurrent", asOFFSET(RibbonEmitter, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RibbonEmitter", "CullingMode Culling", asOFFSET(RibbonEmitter, Culling));
	assert(r >= 0);
	// Class: Soundable
	// Enum: SourceType
	r = asEngine->RegisterEnum("SourceType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("SourceType", "ST_SOUND", Soundable::SourceType::ST_SOUND);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("SourceType", "ST_MUSIC", Soundable::SourceType::ST_MUSIC);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("SourceType", "ST_MAX_TYPE", Soundable::SourceType::ST_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Soundable", asBEHAVE_FACTORY, "Soundable @ f(const string & filename)", asFUNCTION(fSoundable0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Soundable", asBEHAVE_ADDREF, "void f()", asMETHOD(Soundable, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Soundable", asBEHAVE_RELEASE, "void f()", asMETHOD(Soundable, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Effectable@+ opImplCast()", asFUNCTION((RefCast<Soundable, Effectable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Effectable", "Soundable@+ opCast()", asFUNCTION((RefCast<Effectable, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<Soundable, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "Soundable@+ opCast()", asFUNCTION((RefCast<TriMesh, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Triangles@+ opImplCast()", asFUNCTION((RefCast<Soundable, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "Soundable@+ opCast()", asFUNCTION((RefCast<Triangles, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Renderable@+ opImplCast()", asFUNCTION((RefCast<Soundable, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "Soundable@+ opCast()", asFUNCTION((RefCast<Renderable, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Movable@+ opImplCast()", asFUNCTION((RefCast<Soundable, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Soundable@+ opCast()", asFUNCTION((RefCast<Movable, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Soundable, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Soundable@+ opCast()", asFUNCTION((RefCast<Controlledable, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Object@+ opImplCast()", asFUNCTION((RefCast<Soundable, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Soundable@+ opCast()", asFUNCTION((RefCast<Object, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Soundable, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Soundable@+ opCast()", asFUNCTION((RefCast<RefObject, Soundable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void IncrementReferences()", asMETHODPR(Soundable, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void DecrementReferences()", asMETHODPR(Soundable, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetReferences() const", asMETHODPR(Soundable, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void Enable(bool enable)", asMETHODPR(Soundable, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsEnable() const", asMETHODPR(Soundable, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetActivate(bool act)", asMETHODPR(Soundable, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsActivated() const", asMETHODPR(Soundable, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Rtti & GetRttiType() const", asMETHODPR(Soundable, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "uint16 GetRttiVersion() const", asMETHODPR(Soundable, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsExactly(const Rtti & type) const", asMETHODPR(Soundable, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsDerived(const Rtti & type) const", asMETHODPR(Soundable, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Soundable, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Soundable, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Soundable, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Soundable, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetResourcePath() const", asMETHODPR(Soundable, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetName(const string & name)", asMETHODPR(Soundable, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetName() const", asMETHODPR(Soundable, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Soundable, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetID(int id)", asMETHODPR(Soundable, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetID() const", asMETHODPR(Soundable, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Object @+ GetObjectByID(int id)", asMETHODPR(Soundable, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void ComeInEventWorld()", asMETHODPR(Soundable, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void GoOutEventWorld()", asMETHODPR(Soundable, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsInEventWorld()", asMETHODPR(Soundable, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void ResetPlay()", asMETHODPR(Soundable, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void Play()", asMETHODPR(Soundable, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsPlaying() const", asMETHODPR(Soundable, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void Stop()", asMETHODPR(Soundable, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void Reset()", asMETHODPR(Soundable, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Soundable, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsSelfCtrled() const", asMETHODPR(Soundable, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Soundable, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsAutoPlay() const", asMETHODPR(Soundable, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetNumControllers() const", asMETHODPR(Soundable, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Controller @+ GetController(int i) const", asMETHODPR(Soundable, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Soundable, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool HasController(Controller @+ controller)", asMETHODPR(Soundable, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void AttachController(Controller @+ controller)", asMETHODPR(Soundable, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void DetachController(Controller @+ controller)", asMETHODPR(Soundable, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void DetachAllControllers()", asMETHODPR(Soundable, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SortControls()", asMETHODPR(Soundable, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Soundable, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void Show(bool show)", asMETHODPR(Soundable, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsShow() const", asMETHODPR(Soundable, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Soundable, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsColorSelfCtrled() const", asMETHODPR(Soundable, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetColor(const Float3 & color)", asMETHODPR(Soundable, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float3 & GetColor() const", asMETHODPR(Soundable, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Soundable, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsAlphaSelfCtrled() const", asMETHODPR(Soundable, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetAlpha(float alpha)", asMETHODPR(Soundable, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetAlpha() const", asMETHODPR(Soundable, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Soundable, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Soundable, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetBrightness(float brightness)", asMETHODPR(Soundable, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetBrightness() const", asMETHODPR(Soundable, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float3 & GetLastColor() const", asMETHODPR(Soundable, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetLastAlpha() const", asMETHODPR(Soundable, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetLastBrightness() const", asMETHODPR(Soundable, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "Movable @+ GetParent()", asMETHODPR(Soundable, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "PrimitiveType GetPrimitiveType() const", asMETHODPR(Soundable, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetNumTriangles() const", asMETHODPR(Soundable, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(Soundable, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "EffectableController @+ GetEffectableController() const", asMETHODPR(Soundable, GetEffectableController, () const, EffectableController * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetFixedBound(bool fixed)", asMETHODPR(Soundable, SetFixedBound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsFixedBound()", asMETHODPR(Soundable, IsFixedBound, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetFixedBoundCenter(const APoint & center)", asMETHODPR(Soundable, SetFixedBoundCenter, (const APoint & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "APoint GetFixedBoundCenter()", asMETHODPR(Soundable, GetFixedBoundCenter, (), APoint), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetFixedBoundRadius(float radius)", asMETHODPR(Soundable, SetFixedBoundRadius, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetFixedBoundRadius()", asMETHODPR(Soundable, GetFixedBoundRadius, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetLocal(bool l)", asMETHODPR(Soundable, SetLocal, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsLocal() const", asMETHODPR(Soundable, IsLocal, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitSizeX(float val)", asMETHODPR(Soundable, SetEmitSizeX, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetEmitSizeX() const", asMETHODPR(Soundable, GetEmitSizeX, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitSizeY(float val)", asMETHODPR(Soundable, SetEmitSizeY, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetEmitSizeY() const", asMETHODPR(Soundable, GetEmitSizeY, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitSizeZ(float val)", asMETHODPR(Soundable, SetEmitSizeZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetEmitSizeZ() const", asMETHODPR(Soundable, GetEmitSizeZ, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitSizeXYZ(float val)", asMETHODPR(Soundable, SetEmitSizeXYZ, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitColor(const Float3 & color)", asMETHODPR(Soundable, SetEmitColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float3 & GetEmitColor() const", asMETHODPR(Soundable, GetEmitColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitAlpha(float alpha)", asMETHODPR(Soundable, SetEmitAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetEmitAlpha() const", asMETHODPR(Soundable, GetEmitAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitLife(float life)", asMETHODPR(Soundable, SetEmitLife, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetEmitLife() const", asMETHODPR(Soundable, GetEmitLife, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetFaceType(FaceType type)", asMETHODPR(Soundable, SetFaceType, (Effectable::FaceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "FaceType GetFaceType() const", asMETHODPR(Soundable, GetFaceType, () const, Effectable::FaceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetMaterialType(MaterialType type)", asMETHODPR(Soundable, SetMaterialType, (Effectable::MaterialType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "MaterialType GetMaterialType() const", asMETHODPR(Soundable, GetMaterialType, () const, Effectable::MaterialType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetBackCull(bool isBackCull)", asMETHODPR(Soundable, SetBackCull, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsBackCull() const", asMETHODPR(Soundable, IsBackCull, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetBlendMode(BlendMode mode)", asMETHODPR(Soundable, SetBlendMode, (Effectable::BlendMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "BlendMode GetBlendMode() const", asMETHODPR(Soundable, GetBlendMode, () const, Effectable::BlendMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetTexMode(TexMode mode)", asMETHODPR(Soundable, SetTexMode, (Effectable::TexMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "TexMode GetTexMode() const", asMETHODPR(Soundable, GetTexMode, () const, Effectable::TexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool SetTex(const string & filename)", asMETHODPR(Soundable, SetTex, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetTex() const", asMETHODPR(Soundable, GetTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool SetTexPack_Ele(const string & packFileName, const string & eleName)", asMETHODPR(Soundable, SetTexPack_Ele, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void GetTexPack_Ele(string & packFileName, string & eleName) const", asMETHODPR(Soundable, GetTexPack_Ele, (std::string & , std::string & ) const, void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool SetTexAnim(const string & filename)", asMETHODPR(Soundable, SetTexAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetTexAnim() const", asMETHODPR(Soundable, GetTexAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetTexAnim_Repeat(const Float2 & repeat)", asMETHODPR(Soundable, SetTexAnim_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetTexAnim_Repeat() const", asMETHODPR(Soundable, GetTexAnim_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool AddTexsAnim_Frame(const string & filename)", asMETHODPR(Soundable, AddTexsAnim_Frame, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool SetTexPackAnim(const string & texPackFilename)", asMETHODPR(Soundable, SetTexPackAnim, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetTexPackAnim() const", asMETHODPR(Soundable, GetTexPackAnim, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool AddTexPackAnim_Frame(const string & texPackFilename, const string & eleName)", asMETHODPR(Soundable, AddTexPackAnim_Frame, (const std::string & , const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetNumTexAnimTexPackAnimFrames() const", asMETHODPR(Soundable, GetNumTexAnimTexPackAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void ClearTexAnimTexPackAnimFrames()", asMETHODPR(Soundable, ClearTexAnimTexPackAnimFrames, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetAnimInterval(float seconds)", asMETHODPR(Soundable, SetAnimInterval, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetAnimInterval() const", asMETHODPR(Soundable, GetAnimInterval, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetAnimStartDoRandom(bool doRandom)", asMETHODPR(Soundable, SetAnimStartDoRandom, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsAnimStartDoRandom() const", asMETHODPR(Soundable, IsAnimStartDoRandom, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetUserNumAnimFrames(int userNumAnimFrames)", asMETHODPR(Soundable, SetUserNumAnimFrames, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetUserNumAnimFrames() const", asMETHODPR(Soundable, GetUserNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetNumAnimFrames() const", asMETHODPR(Soundable, GetNumAnimFrames, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetAnimFramesPlayOnce(bool playOnce)", asMETHODPR(Soundable, SetAnimFramesPlayOnce, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsAnimFramesPlayOnce() const", asMETHODPR(Soundable, IsAnimFramesPlayOnce, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetMaskTex(const string & filename)", asMETHODPR(Soundable, SetMaskTex, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetMaskTex() const", asMETHODPR(Soundable, GetMaskTex, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitUV0_Offset(const Float2 & offset)", asMETHODPR(Soundable, SetEmitUV0_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetEmitUV0_Offset() const", asMETHODPR(Soundable, GetEmitUV0_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitUV0_Speed(const Float2 & speed)", asMETHODPR(Soundable, SetEmitUV0_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetEmitUV0_Speed() const", asMETHODPR(Soundable, GetEmitUV0_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetEmitUV0_Repeat(const Float2 & repeat)", asMETHODPR(Soundable, SetEmitUV0_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetEmitUV0_Repeat() const", asMETHODPR(Soundable, GetEmitUV0_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetUV1_Offset(const Float2 & offset)", asMETHODPR(Soundable, SetUV1_Offset, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetUV1_Offset() const", asMETHODPR(Soundable, GetUV1_Offset, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetUV1_Repeat(const Float2 & repeat)", asMETHODPR(Soundable, SetUV1_Repeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetUV1_Repeat() const", asMETHODPR(Soundable, GetUV1_Repeat, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetUV1_Speed(const Float2 & speed)", asMETHODPR(Soundable, SetUV1_Speed, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const Float2 & GetUV1_Speed() const", asMETHODPR(Soundable, GetUV1_Speed, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetCoordinateType0(CoordinateType type)", asMETHODPR(Soundable, SetCoordinateType0, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "CoordinateType GetCoordinateType0() const", asMETHODPR(Soundable, GetCoordinateType0, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetCoordinateType1(CoordinateType type)", asMETHODPR(Soundable, SetCoordinateType1, (Effectable::CoordinateType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "CoordinateType GetCoordinateType1() const", asMETHODPR(Soundable, GetCoordinateType1, () const, Effectable::CoordinateType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetSourceType(SourceType st)", asMETHODPR(Soundable, SetSourceType, (Soundable::SourceType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "SourceType GetSourceType() const", asMETHODPR(Soundable, GetSourceType, () const, Soundable::SourceType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetMusicChannel(int channel)", asMETHODPR(Soundable, SetMusicChannel, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "int GetMusicChannel() const", asMETHODPR(Soundable, GetMusicChannel, () const, int), asCALL_THISCALL);
	assert(r >= 0);
				r = asEngine->RegisterObjectMethod("Soundable", "void SetIngoreStopSound(bool stop)", asMETHODPR(Soundable, SetIngoreStopSound, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsIngoreStopSound() const", asMETHODPR(Soundable, IsIngoreStopSound, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetSoundFilename(const string & filename)", asMETHODPR(Soundable, SetSoundFilename, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const string & GetSoundFilename() const", asMETHODPR(Soundable, GetSoundFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void Set3D(bool is3D)", asMETHODPR(Soundable, Set3D, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool Is3D() const", asMETHODPR(Soundable, Is3D, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetVolume(float volume)", asMETHODPR(Soundable, SetVolume, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetVolume() const", asMETHODPR(Soundable, GetVolume, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetVelocity(const AVector & velocity)", asMETHODPR(Soundable, SetVelocity, (const AVector & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "const AVector & GetVelocity() const", asMETHODPR(Soundable, GetVelocity, () const, const AVector & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetDistance(float minDistance, float maxDistance)", asMETHODPR(Soundable, SetDistance, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetMinDistance(float minDistance)", asMETHODPR(Soundable, SetMinDistance, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetMaxDistance(float maxDistance)", asMETHODPR(Soundable, SetMaxDistance, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetMinDistance() const", asMETHODPR(Soundable, GetMinDistance, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "float GetMaxDistance() const", asMETHODPR(Soundable, GetMaxDistance, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetLoop(bool isLoop)", asMETHODPR(Soundable, SetLoop, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsLoop() const", asMETHODPR(Soundable, IsLoop, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetDistanceUseX(bool use)", asMETHODPR(Soundable, SetDistanceUseX, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsDistanceUseX() const", asMETHODPR(Soundable, IsDistanceUseX, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetDistanceUseY(bool use)", asMETHODPR(Soundable, SetDistanceUseY, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsDistanceUseY() const", asMETHODPR(Soundable, IsDistanceUseY, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "void SetDistanceUseZ(bool use)", asMETHODPR(Soundable, SetDistanceUseZ, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Soundable", "bool IsDistanceUseZ() const", asMETHODPR(Soundable, IsDistanceUseZ, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Soundable_TYPE", (void*)&Soundable::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "Transform LocalTransform", asOFFSET(Soundable, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "Transform WorldTransform", asOFFSET(Soundable, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "bool WorldTransformIsCurrent", asOFFSET(Soundable, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Soundable, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "Transform BoundWorldTransform", asOFFSET(Soundable, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "Bound WorldBound", asOFFSET(Soundable, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "bool WorldBoundIsCurrent", asOFFSET(Soundable, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Soundable", "CullingMode Culling", asOFFSET(Soundable, Culling));
	assert(r >= 0);
	// Class: EffectableController
	r = asEngine->RegisterObjectBehaviour("EffectableController", asBEHAVE_FACTORY, "EffectableController @ f()", asFUNCTION(fEffectableController0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectableController", asBEHAVE_ADDREF, "void f()", asMETHOD(EffectableController, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("EffectableController", asBEHAVE_RELEASE, "void f()", asMETHOD(EffectableController, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "Controller@+ opImplCast()", asFUNCTION((RefCast<EffectableController, Controller>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controller", "EffectableController@+ opCast()", asFUNCTION((RefCast<Controller, EffectableController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "Object@+ opImplCast()", asFUNCTION((RefCast<EffectableController, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "EffectableController@+ opCast()", asFUNCTION((RefCast<Object, EffectableController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "RefObject@+ opImplCast()", asFUNCTION((RefCast<EffectableController, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "EffectableController@+ opCast()", asFUNCTION((RefCast<RefObject, EffectableController>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void IncrementReferences()", asMETHODPR(EffectableController, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void DecrementReferences()", asMETHODPR(EffectableController, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "int GetReferences() const", asMETHODPR(EffectableController, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void Enable(bool enable)", asMETHODPR(EffectableController, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsEnable() const", asMETHODPR(EffectableController, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetActivate(bool act)", asMETHODPR(EffectableController, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsActivated() const", asMETHODPR(EffectableController, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "const Rtti & GetRttiType() const", asMETHODPR(EffectableController, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "uint16 GetRttiVersion() const", asMETHODPR(EffectableController, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsExactly(const Rtti & type) const", asMETHODPR(EffectableController, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsDerived(const Rtti & type) const", asMETHODPR(EffectableController, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(EffectableController, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(EffectableController, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(EffectableController, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(EffectableController, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "const string & GetResourcePath() const", asMETHODPR(EffectableController, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetName(const string & name)", asMETHODPR(EffectableController, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "const string & GetName() const", asMETHODPR(EffectableController, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "Object @+ GetObjectByName(const string & name)", asMETHODPR(EffectableController, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetID(int id)", asMETHODPR(EffectableController, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "int GetID() const", asMETHODPR(EffectableController, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "Object @+ GetObjectByID(int id)", asMETHODPR(EffectableController, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void ComeInEventWorld()", asMETHODPR(EffectableController, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void GoOutEventWorld()", asMETHODPR(EffectableController, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsInEventWorld()", asMETHODPR(EffectableController, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetPriority(int priority)", asMETHODPR(EffectableController, SetPriority, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "int GetPriority() const", asMETHODPR(EffectableController, GetPriority, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void ResetPlay()", asMETHODPR(EffectableController, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void Play()", asMETHODPR(EffectableController, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsPlaying() const", asMETHODPR(EffectableController, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void Stop()", asMETHODPR(EffectableController, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void Reset()", asMETHODPR(EffectableController, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetMaxPlayTime(float time)", asMETHODPR(EffectableController, SetMaxPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "float GetMaxPlayTime() const", asMETHODPR(EffectableController, GetMaxPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetDelayPlayTime(float time)", asMETHODPR(EffectableController, SetDelayPlayTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "float GetDelayPlayTime() const", asMETHODPR(EffectableController, GetDelayPlayTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "float GetPlayedTime() const", asMETHODPR(EffectableController, GetPlayedTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "float GetPlayedTimeMinusDelay() const", asMETHODPR(EffectableController, GetPlayedTimeMinusDelay, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "void SetPlayedDoDetach(bool doDetach)", asMETHODPR(EffectableController, SetPlayedDoDetach, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool IsPlayedDoDetach() const", asMETHODPR(EffectableController, IsPlayedDoDetach, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "Controlledable @+ GetControlledable() const", asMETHODPR(EffectableController, GetControlledable, () const, Controlledable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("EffectableController", "bool Update(double applicationTime, double elapsedTime)", asMETHODPR(EffectableController, Update, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterGlobalProperty("Rtti EffectableController_TYPE", (void*)&EffectableController::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectableController", "RepeatType Repeat", asOFFSET(EffectableController, Repeat));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectableController", "double MinTime", asOFFSET(EffectableController, MinTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectableController", "double MaxTime", asOFFSET(EffectableController, MaxTime));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectableController", "double Phase", asOFFSET(EffectableController, Phase));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectableController", "double Frequency", asOFFSET(EffectableController, Frequency));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("EffectableController", "bool Active", asOFFSET(EffectableController, Active));
	assert(r >= 0);
	// Class: Terrain
	r = asEngine->RegisterObjectBehaviour("Terrain", asBEHAVE_ADDREF, "void f()", asMETHOD(Terrain, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Terrain", asBEHAVE_RELEASE, "void f()", asMETHOD(Terrain, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Node@+ opImplCast()", asFUNCTION((RefCast<Terrain, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Terrain@+ opCast()", asFUNCTION((RefCast<Node, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Movable@+ opImplCast()", asFUNCTION((RefCast<Terrain, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Terrain@+ opCast()", asFUNCTION((RefCast<Movable, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Terrain, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Terrain@+ opCast()", asFUNCTION((RefCast<Controlledable, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Object@+ opImplCast()", asFUNCTION((RefCast<Terrain, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Terrain@+ opCast()", asFUNCTION((RefCast<Object, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Terrain, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Terrain@+ opCast()", asFUNCTION((RefCast<RefObject, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void IncrementReferences()", asMETHODPR(Terrain, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void DecrementReferences()", asMETHODPR(Terrain, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetReferences() const", asMETHODPR(Terrain, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void Enable(bool enable)", asMETHODPR(Terrain, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsEnable() const", asMETHODPR(Terrain, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetActivate(bool act)", asMETHODPR(Terrain, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsActivated() const", asMETHODPR(Terrain, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "const Rtti & GetRttiType() const", asMETHODPR(Terrain, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "uint16 GetRttiVersion() const", asMETHODPR(Terrain, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsExactly(const Rtti & type) const", asMETHODPR(Terrain, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsDerived(const Rtti & type) const", asMETHODPR(Terrain, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Terrain, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Terrain, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Terrain, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Terrain, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "const string & GetResourcePath() const", asMETHODPR(Terrain, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetName(const string & name)", asMETHODPR(Terrain, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "const string & GetName() const", asMETHODPR(Terrain, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Terrain, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetID(int id)", asMETHODPR(Terrain, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetID() const", asMETHODPR(Terrain, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Object @+ GetObjectByID(int id)", asMETHODPR(Terrain, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void ComeInEventWorld()", asMETHODPR(Terrain, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void GoOutEventWorld()", asMETHODPR(Terrain, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsInEventWorld()", asMETHODPR(Terrain, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void ResetPlay()", asMETHODPR(Terrain, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void Play()", asMETHODPR(Terrain, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsPlaying() const", asMETHODPR(Terrain, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void Stop()", asMETHODPR(Terrain, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void Reset()", asMETHODPR(Terrain, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Terrain, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsSelfCtrled() const", asMETHODPR(Terrain, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Terrain, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsAutoPlay() const", asMETHODPR(Terrain, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetNumControllers() const", asMETHODPR(Terrain, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Controller @+ GetController(int i) const", asMETHODPR(Terrain, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Terrain, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool HasController(Controller @+ controller)", asMETHODPR(Terrain, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void AttachController(Controller @+ controller)", asMETHODPR(Terrain, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void DetachController(Controller @+ controller)", asMETHODPR(Terrain, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void DetachAllControllers()", asMETHODPR(Terrain, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SortControls()", asMETHODPR(Terrain, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Terrain, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void Show(bool show)", asMETHODPR(Terrain, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsShow() const", asMETHODPR(Terrain, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Terrain, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsColorSelfCtrled() const", asMETHODPR(Terrain, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetColor(const Float3 & color)", asMETHODPR(Terrain, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "const Float3 & GetColor() const", asMETHODPR(Terrain, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Terrain, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsAlphaSelfCtrled() const", asMETHODPR(Terrain, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetAlpha(float alpha)", asMETHODPR(Terrain, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetAlpha() const", asMETHODPR(Terrain, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Terrain, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Terrain, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetBrightness(float brightness)", asMETHODPR(Terrain, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetBrightness() const", asMETHODPR(Terrain, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "const Float3 & GetLastColor() const", asMETHODPR(Terrain, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetLastAlpha() const", asMETHODPR(Terrain, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetLastBrightness() const", asMETHODPR(Terrain, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Movable @+ GetParent()", asMETHODPR(Terrain, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("Terrain", "int GetNumChildren() const", asMETHODPR(Terrain, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetNumValidChildren() const", asMETHODPR(Terrain, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int AttachChild(Movable @+ child)", asMETHODPR(Terrain, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(Terrain, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int DetachChild(Movable @+ child)", asMETHODPR(Terrain, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool DetachChildByName(const string & name)", asMETHODPR(Terrain, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void DetachAllChildren()", asMETHODPR(Terrain, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("Terrain", "void SetCastShadow(bool castShadow)", asMETHODPR(Terrain, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(Terrain, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(Terrain, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsDoPickPriority() const", asMETHODPR(Terrain, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void OnNotPicked(int pickInfo)", asMETHODPR(Terrain, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(Terrain, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "bool IsNeedCalUpdateChild() const", asMETHODPR(Terrain, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "void SetAnchorID(int anchorID)", asMETHODPR(Terrain, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetAnchorID() const", asMETHODPR(Terrain, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetRowQuantity() const", asMETHODPR(Terrain, GetRowQuantity, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetColQuantity() const", asMETHODPR(Terrain, GetColQuantity, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "int GetNumVertexPage() const", asMETHODPR(Terrain, GetNumVertexPage, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetSpacing() const", asMETHODPR(Terrain, GetSpacing, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "float GetHeight(float x, float y) const", asMETHODPR(Terrain, GetHeight, (float, float) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "Shine @+ GetTerrainShine()", asMETHODPR(Terrain, GetTerrainShine, (), Shine * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Terrain_TYPE", (void*)&Terrain::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "Transform LocalTransform", asOFFSET(Terrain, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "Transform WorldTransform", asOFFSET(Terrain, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "bool WorldTransformIsCurrent", asOFFSET(Terrain, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Terrain, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "Transform BoundWorldTransform", asOFFSET(Terrain, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "Bound WorldBound", asOFFSET(Terrain, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "bool WorldBoundIsCurrent", asOFFSET(Terrain, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Terrain", "CullingMode Culling", asOFFSET(Terrain, Culling));
	assert(r >= 0);
	// Class: RawTerrain
	r = asEngine->RegisterObjectBehaviour("RawTerrain", asBEHAVE_FACTORY, "RawTerrain @ f()", asFUNCTION(fRawTerrain0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("RawTerrain", asBEHAVE_ADDREF, "void f()", asMETHOD(RawTerrain, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("RawTerrain", asBEHAVE_RELEASE, "void f()", asMETHOD(RawTerrain, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Terrain@+ opImplCast()", asFUNCTION((RefCast<RawTerrain, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "RawTerrain@+ opCast()", asFUNCTION((RefCast<Terrain, RawTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Node@+ opImplCast()", asFUNCTION((RefCast<RawTerrain, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "RawTerrain@+ opCast()", asFUNCTION((RefCast<Node, RawTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Movable@+ opImplCast()", asFUNCTION((RefCast<RawTerrain, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "RawTerrain@+ opCast()", asFUNCTION((RefCast<Movable, RawTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<RawTerrain, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "RawTerrain@+ opCast()", asFUNCTION((RefCast<Controlledable, RawTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Object@+ opImplCast()", asFUNCTION((RefCast<RawTerrain, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "RawTerrain@+ opCast()", asFUNCTION((RefCast<Object, RawTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "RefObject@+ opImplCast()", asFUNCTION((RefCast<RawTerrain, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "RawTerrain@+ opCast()", asFUNCTION((RefCast<RefObject, RawTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void IncrementReferences()", asMETHODPR(RawTerrain, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void DecrementReferences()", asMETHODPR(RawTerrain, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetReferences() const", asMETHODPR(RawTerrain, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void Enable(bool enable)", asMETHODPR(RawTerrain, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsEnable() const", asMETHODPR(RawTerrain, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetActivate(bool act)", asMETHODPR(RawTerrain, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsActivated() const", asMETHODPR(RawTerrain, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "const Rtti & GetRttiType() const", asMETHODPR(RawTerrain, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "uint16 GetRttiVersion() const", asMETHODPR(RawTerrain, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsExactly(const Rtti & type) const", asMETHODPR(RawTerrain, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsDerived(const Rtti & type) const", asMETHODPR(RawTerrain, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(RawTerrain, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(RawTerrain, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(RawTerrain, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(RawTerrain, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "const string & GetResourcePath() const", asMETHODPR(RawTerrain, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetName(const string & name)", asMETHODPR(RawTerrain, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "const string & GetName() const", asMETHODPR(RawTerrain, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Object @+ GetObjectByName(const string & name)", asMETHODPR(RawTerrain, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetID(int id)", asMETHODPR(RawTerrain, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetID() const", asMETHODPR(RawTerrain, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Object @+ GetObjectByID(int id)", asMETHODPR(RawTerrain, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void ComeInEventWorld()", asMETHODPR(RawTerrain, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void GoOutEventWorld()", asMETHODPR(RawTerrain, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsInEventWorld()", asMETHODPR(RawTerrain, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void ResetPlay()", asMETHODPR(RawTerrain, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void Play()", asMETHODPR(RawTerrain, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsPlaying() const", asMETHODPR(RawTerrain, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void Stop()", asMETHODPR(RawTerrain, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void Reset()", asMETHODPR(RawTerrain, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(RawTerrain, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsSelfCtrled() const", asMETHODPR(RawTerrain, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetAutoPlay(bool autoPlay)", asMETHODPR(RawTerrain, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsAutoPlay() const", asMETHODPR(RawTerrain, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetNumControllers() const", asMETHODPR(RawTerrain, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Controller @+ GetController(int i) const", asMETHODPR(RawTerrain, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(RawTerrain, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool HasController(Controller @+ controller)", asMETHODPR(RawTerrain, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void AttachController(Controller @+ controller)", asMETHODPR(RawTerrain, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void DetachController(Controller @+ controller)", asMETHODPR(RawTerrain, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void DetachAllControllers()", asMETHODPR(RawTerrain, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SortControls()", asMETHODPR(RawTerrain, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(RawTerrain, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void Show(bool show)", asMETHODPR(RawTerrain, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsShow() const", asMETHODPR(RawTerrain, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(RawTerrain, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsColorSelfCtrled() const", asMETHODPR(RawTerrain, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetColor(const Float3 & color)", asMETHODPR(RawTerrain, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "const Float3 & GetColor() const", asMETHODPR(RawTerrain, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(RawTerrain, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsAlphaSelfCtrled() const", asMETHODPR(RawTerrain, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetAlpha(float alpha)", asMETHODPR(RawTerrain, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetAlpha() const", asMETHODPR(RawTerrain, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(RawTerrain, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsBrightnessSelfCtrled() const", asMETHODPR(RawTerrain, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetBrightness(float brightness)", asMETHODPR(RawTerrain, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetBrightness() const", asMETHODPR(RawTerrain, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "const Float3 & GetLastColor() const", asMETHODPR(RawTerrain, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetLastAlpha() const", asMETHODPR(RawTerrain, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetLastBrightness() const", asMETHODPR(RawTerrain, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Movable @+ GetParent()", asMETHODPR(RawTerrain, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("RawTerrain", "int GetNumChildren() const", asMETHODPR(RawTerrain, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetNumValidChildren() const", asMETHODPR(RawTerrain, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int AttachChild(Movable @+ child)", asMETHODPR(RawTerrain, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(RawTerrain, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int DetachChild(Movable @+ child)", asMETHODPR(RawTerrain, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool DetachChildByName(const string & name)", asMETHODPR(RawTerrain, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void DetachAllChildren()", asMETHODPR(RawTerrain, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("RawTerrain", "void SetCastShadow(bool castShadow)", asMETHODPR(RawTerrain, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(RawTerrain, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(RawTerrain, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsDoPickPriority() const", asMETHODPR(RawTerrain, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void OnNotPicked(int pickInfo)", asMETHODPR(RawTerrain, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(RawTerrain, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "bool IsNeedCalUpdateChild() const", asMETHODPR(RawTerrain, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "void SetAnchorID(int anchorID)", asMETHODPR(RawTerrain, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetAnchorID() const", asMETHODPR(RawTerrain, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetRowQuantity() const", asMETHODPR(RawTerrain, GetRowQuantity, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetColQuantity() const", asMETHODPR(RawTerrain, GetColQuantity, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "int GetNumVertexPage() const", asMETHODPR(RawTerrain, GetNumVertexPage, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetSpacing() const", asMETHODPR(RawTerrain, GetSpacing, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "float GetHeight(float x, float y) const", asMETHODPR(RawTerrain, GetHeight, (float, float) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RawTerrain", "Shine @+ GetTerrainShine()", asMETHODPR(RawTerrain, GetTerrainShine, (), Shine * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti RawTerrain_TYPE", (void*)&RawTerrain::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "Transform LocalTransform", asOFFSET(RawTerrain, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "Transform WorldTransform", asOFFSET(RawTerrain, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "bool WorldTransformIsCurrent", asOFFSET(RawTerrain, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "bool IsSkinCtrlSetWroldTrans", asOFFSET(RawTerrain, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "Transform BoundWorldTransform", asOFFSET(RawTerrain, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "Bound WorldBound", asOFFSET(RawTerrain, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "bool WorldBoundIsCurrent", asOFFSET(RawTerrain, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("RawTerrain", "CullingMode Culling", asOFFSET(RawTerrain, Culling));
	assert(r >= 0);
	// Class: LODTerrain
	r = asEngine->RegisterObjectBehaviour("LODTerrain", asBEHAVE_FACTORY, "LODTerrain @ f()", asFUNCTION(fLODTerrain0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("LODTerrain", asBEHAVE_ADDREF, "void f()", asMETHOD(LODTerrain, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("LODTerrain", asBEHAVE_RELEASE, "void f()", asMETHOD(LODTerrain, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Terrain@+ opImplCast()", asFUNCTION((RefCast<LODTerrain, Terrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Terrain", "LODTerrain@+ opCast()", asFUNCTION((RefCast<Terrain, LODTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Node@+ opImplCast()", asFUNCTION((RefCast<LODTerrain, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "LODTerrain@+ opCast()", asFUNCTION((RefCast<Node, LODTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Movable@+ opImplCast()", asFUNCTION((RefCast<LODTerrain, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "LODTerrain@+ opCast()", asFUNCTION((RefCast<Movable, LODTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<LODTerrain, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "LODTerrain@+ opCast()", asFUNCTION((RefCast<Controlledable, LODTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Object@+ opImplCast()", asFUNCTION((RefCast<LODTerrain, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "LODTerrain@+ opCast()", asFUNCTION((RefCast<Object, LODTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "RefObject@+ opImplCast()", asFUNCTION((RefCast<LODTerrain, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "LODTerrain@+ opCast()", asFUNCTION((RefCast<RefObject, LODTerrain>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void IncrementReferences()", asMETHODPR(LODTerrain, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void DecrementReferences()", asMETHODPR(LODTerrain, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetReferences() const", asMETHODPR(LODTerrain, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void Enable(bool enable)", asMETHODPR(LODTerrain, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsEnable() const", asMETHODPR(LODTerrain, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetActivate(bool act)", asMETHODPR(LODTerrain, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsActivated() const", asMETHODPR(LODTerrain, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "const Rtti & GetRttiType() const", asMETHODPR(LODTerrain, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "uint16 GetRttiVersion() const", asMETHODPR(LODTerrain, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsExactly(const Rtti & type) const", asMETHODPR(LODTerrain, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsDerived(const Rtti & type) const", asMETHODPR(LODTerrain, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(LODTerrain, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(LODTerrain, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(LODTerrain, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(LODTerrain, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "const string & GetResourcePath() const", asMETHODPR(LODTerrain, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetName(const string & name)", asMETHODPR(LODTerrain, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "const string & GetName() const", asMETHODPR(LODTerrain, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Object @+ GetObjectByName(const string & name)", asMETHODPR(LODTerrain, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetID(int id)", asMETHODPR(LODTerrain, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetID() const", asMETHODPR(LODTerrain, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Object @+ GetObjectByID(int id)", asMETHODPR(LODTerrain, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void ComeInEventWorld()", asMETHODPR(LODTerrain, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void GoOutEventWorld()", asMETHODPR(LODTerrain, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsInEventWorld()", asMETHODPR(LODTerrain, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void ResetPlay()", asMETHODPR(LODTerrain, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void Play()", asMETHODPR(LODTerrain, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsPlaying() const", asMETHODPR(LODTerrain, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void Stop()", asMETHODPR(LODTerrain, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void Reset()", asMETHODPR(LODTerrain, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(LODTerrain, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsSelfCtrled() const", asMETHODPR(LODTerrain, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetAutoPlay(bool autoPlay)", asMETHODPR(LODTerrain, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsAutoPlay() const", asMETHODPR(LODTerrain, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetNumControllers() const", asMETHODPR(LODTerrain, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Controller @+ GetController(int i) const", asMETHODPR(LODTerrain, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(LODTerrain, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool HasController(Controller @+ controller)", asMETHODPR(LODTerrain, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void AttachController(Controller @+ controller)", asMETHODPR(LODTerrain, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void DetachController(Controller @+ controller)", asMETHODPR(LODTerrain, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void DetachAllControllers()", asMETHODPR(LODTerrain, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SortControls()", asMETHODPR(LODTerrain, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(LODTerrain, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void Show(bool show)", asMETHODPR(LODTerrain, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsShow() const", asMETHODPR(LODTerrain, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(LODTerrain, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsColorSelfCtrled() const", asMETHODPR(LODTerrain, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetColor(const Float3 & color)", asMETHODPR(LODTerrain, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "const Float3 & GetColor() const", asMETHODPR(LODTerrain, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(LODTerrain, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsAlphaSelfCtrled() const", asMETHODPR(LODTerrain, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetAlpha(float alpha)", asMETHODPR(LODTerrain, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetAlpha() const", asMETHODPR(LODTerrain, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(LODTerrain, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsBrightnessSelfCtrled() const", asMETHODPR(LODTerrain, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetBrightness(float brightness)", asMETHODPR(LODTerrain, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetBrightness() const", asMETHODPR(LODTerrain, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "const Float3 & GetLastColor() const", asMETHODPR(LODTerrain, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetLastAlpha() const", asMETHODPR(LODTerrain, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetLastBrightness() const", asMETHODPR(LODTerrain, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Movable @+ GetParent()", asMETHODPR(LODTerrain, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("LODTerrain", "int GetNumChildren() const", asMETHODPR(LODTerrain, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetNumValidChildren() const", asMETHODPR(LODTerrain, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int AttachChild(Movable @+ child)", asMETHODPR(LODTerrain, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(LODTerrain, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int DetachChild(Movable @+ child)", asMETHODPR(LODTerrain, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool DetachChildByName(const string & name)", asMETHODPR(LODTerrain, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void DetachAllChildren()", asMETHODPR(LODTerrain, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("LODTerrain", "void SetCastShadow(bool castShadow)", asMETHODPR(LODTerrain, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(LODTerrain, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(LODTerrain, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsDoPickPriority() const", asMETHODPR(LODTerrain, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void OnNotPicked(int pickInfo)", asMETHODPR(LODTerrain, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(LODTerrain, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsNeedCalUpdateChild() const", asMETHODPR(LODTerrain, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetAnchorID(int anchorID)", asMETHODPR(LODTerrain, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetAnchorID() const", asMETHODPR(LODTerrain, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetRowQuantity() const", asMETHODPR(LODTerrain, GetRowQuantity, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetColQuantity() const", asMETHODPR(LODTerrain, GetColQuantity, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "int GetNumVertexPage() const", asMETHODPR(LODTerrain, GetNumVertexPage, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetSpacing() const", asMETHODPR(LODTerrain, GetSpacing, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetHeight(float x, float y) const", asMETHODPR(LODTerrain, GetHeight, (float, float) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "Shine @+ GetTerrainShine()", asMETHODPR(LODTerrain, GetTerrainShine, (), Shine * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetPixelTolerance(float tolerance)", asMETHODPR(LODTerrain, SetPixelTolerance, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "float GetPixelTolerance()", asMETHODPR(LODTerrain, GetPixelTolerance, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "void SetCloseAssumption(bool ca)", asMETHODPR(LODTerrain, SetCloseAssumption, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("LODTerrain", "bool IsCloseAssumption()", asMETHODPR(LODTerrain, IsCloseAssumption, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti LODTerrain_TYPE", (void*)&LODTerrain::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "Transform LocalTransform", asOFFSET(LODTerrain, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "Transform WorldTransform", asOFFSET(LODTerrain, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "bool WorldTransformIsCurrent", asOFFSET(LODTerrain, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "bool IsSkinCtrlSetWroldTrans", asOFFSET(LODTerrain, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "Transform BoundWorldTransform", asOFFSET(LODTerrain, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "Bound WorldBound", asOFFSET(LODTerrain, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "bool WorldBoundIsCurrent", asOFFSET(LODTerrain, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("LODTerrain", "CullingMode Culling", asOFFSET(LODTerrain, Culling));
	assert(r >= 0);
	// Class: UIInputData
	// Enum: MouseTag
	r = asEngine->RegisterEnum("MouseTag");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MouseTag", "MT_NONE", UIInputData::MouseTag::MT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MouseTag", "MT_LEFT", UIInputData::MouseTag::MT_LEFT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MouseTag", "MT_RIGHT", UIInputData::MouseTag::MT_RIGHT);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MouseTag", "MT_MIDDLE", UIInputData::MouseTag::MT_MIDDLE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("MouseTag", "MT_MAX_TYPE", UIInputData::MouseTag::MT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIInputData", asBEHAVE_CONSTRUCT, "void f()", asFUNCTION(Ctor_UIInputData0), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIInputData", asBEHAVE_DESTRUCT, "void f()", asFUNCTION(DCtor_UIInputData), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIInputData", "MouseTag TheMouseTag", asOFFSET(UIInputData, TheMouseTag));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIInputData", "UIPickType PickType", asOFFSET(UIInputData, PickType));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIInputData", "APoint WorldPos", asOFFSET(UIInputData, WorldPos));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIInputData", "AVector MoveDelta", asOFFSET(UIInputData, MoveDelta));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIInputData", "float Wheel", asOFFSET(UIInputData, Wheel));
	assert(r >= 0);
	// Class: UIFrame
	r = asEngine->RegisterObjectBehaviour("UIFrame", asBEHAVE_FACTORY, "UIFrame @ f()", asFUNCTION(fUIFrame0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIFrame", asBEHAVE_ADDREF, "void f()", asMETHOD(UIFrame, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIFrame", asBEHAVE_RELEASE, "void f()", asMETHOD(UIFrame, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "SizeNode@+ opImplCast()", asFUNCTION((RefCast<UIFrame, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "UIFrame@+ opCast()", asFUNCTION((RefCast<SizeNode, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Node@+ opImplCast()", asFUNCTION((RefCast<UIFrame, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "UIFrame@+ opCast()", asFUNCTION((RefCast<Node, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIFrame, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIFrame@+ opCast()", asFUNCTION((RefCast<Movable, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIFrame, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIFrame@+ opCast()", asFUNCTION((RefCast<Controlledable, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Object@+ opImplCast()", asFUNCTION((RefCast<UIFrame, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIFrame@+ opCast()", asFUNCTION((RefCast<Object, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIFrame, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIFrame@+ opCast()", asFUNCTION((RefCast<RefObject, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void IncrementReferences()", asMETHODPR(UIFrame, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void DecrementReferences()", asMETHODPR(UIFrame, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int GetReferences() const", asMETHODPR(UIFrame, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void Enable(bool enable)", asMETHODPR(UIFrame, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsEnable() const", asMETHODPR(UIFrame, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetActivate(bool act)", asMETHODPR(UIFrame, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsActivated() const", asMETHODPR(UIFrame, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Rtti & GetRttiType() const", asMETHODPR(UIFrame, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "uint16 GetRttiVersion() const", asMETHODPR(UIFrame, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIFrame, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIFrame, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIFrame, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIFrame, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIFrame, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIFrame, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const string & GetResourcePath() const", asMETHODPR(UIFrame, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetName(const string & name)", asMETHODPR(UIFrame, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const string & GetName() const", asMETHODPR(UIFrame, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIFrame, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetID(int id)", asMETHODPR(UIFrame, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int GetID() const", asMETHODPR(UIFrame, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Object @+ GetObjectByID(int id)", asMETHODPR(UIFrame, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void ComeInEventWorld()", asMETHODPR(UIFrame, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void GoOutEventWorld()", asMETHODPR(UIFrame, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsInEventWorld()", asMETHODPR(UIFrame, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void ResetPlay()", asMETHODPR(UIFrame, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void Play()", asMETHODPR(UIFrame, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsPlaying() const", asMETHODPR(UIFrame, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void Stop()", asMETHODPR(UIFrame, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void Reset()", asMETHODPR(UIFrame, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIFrame, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsSelfCtrled() const", asMETHODPR(UIFrame, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIFrame, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsAutoPlay() const", asMETHODPR(UIFrame, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int GetNumControllers() const", asMETHODPR(UIFrame, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Controller @+ GetController(int i) const", asMETHODPR(UIFrame, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIFrame, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool HasController(Controller @+ controller)", asMETHODPR(UIFrame, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void AttachController(Controller @+ controller)", asMETHODPR(UIFrame, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void DetachController(Controller @+ controller)", asMETHODPR(UIFrame, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void DetachAllControllers()", asMETHODPR(UIFrame, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SortControls()", asMETHODPR(UIFrame, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIFrame, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void Show(bool show)", asMETHODPR(UIFrame, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsShow() const", asMETHODPR(UIFrame, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIFrame, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsColorSelfCtrled() const", asMETHODPR(UIFrame, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetColor(const Float3 & color)", asMETHODPR(UIFrame, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float3 & GetColor() const", asMETHODPR(UIFrame, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIFrame, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIFrame, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAlpha(float alpha)", asMETHODPR(UIFrame, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetAlpha() const", asMETHODPR(UIFrame, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIFrame, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIFrame, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetBrightness(float brightness)", asMETHODPR(UIFrame, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetBrightness() const", asMETHODPR(UIFrame, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float3 & GetLastColor() const", asMETHODPR(UIFrame, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetLastAlpha() const", asMETHODPR(UIFrame, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetLastBrightness() const", asMETHODPR(UIFrame, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "Movable @+ GetParent()", asMETHODPR(UIFrame, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("UIFrame", "int GetNumChildren() const", asMETHODPR(UIFrame, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int GetNumValidChildren() const", asMETHODPR(UIFrame, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int AttachChild(Movable @+ child)", asMETHODPR(UIFrame, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(UIFrame, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int DetachChild(Movable @+ child)", asMETHODPR(UIFrame, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool DetachChildByName(const string & name)", asMETHODPR(UIFrame, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void DetachAllChildren()", asMETHODPR(UIFrame, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIFrame", "void SetCastShadow(bool castShadow)", asMETHODPR(UIFrame, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(UIFrame, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(UIFrame, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsDoPickPriority() const", asMETHODPR(UIFrame, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void OnNotPicked(int pickInfo)", asMETHODPR(UIFrame, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(UIFrame, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsNeedCalUpdateChild() const", asMETHODPR(UIFrame, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorID(int anchorID)", asMETHODPR(UIFrame, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int GetAnchorID() const", asMETHODPR(UIFrame, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetSize(float width, float height)", asMETHODPR(UIFrame, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetSize(const Sizef & size)", asMETHODPR(UIFrame, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Sizef & GetSize() const", asMETHODPR(UIFrame, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetWidth(float width)", asMETHODPR(UIFrame, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetWidth() const", asMETHODPR(UIFrame, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetHeight(float height)", asMETHODPR(UIFrame, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetHeight() const", asMETHODPR(UIFrame, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetPivot(float x, float y)", asMETHODPR(UIFrame, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetPivot(const Float2 & pvoit)", asMETHODPR(UIFrame, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float2 & GetPvoit() const", asMETHODPR(UIFrame, GetPvoit, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void EnableAnchorLayout(bool enable)", asMETHODPR(UIFrame, EnableAnchorLayout, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsAnchorLayoutEnable() const", asMETHODPR(UIFrame, IsAnchorLayoutEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorHor(float anchorX, float anchorY)", asMETHODPR(UIFrame, SetAnchorHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorHor(const Float2 & anchor)", asMETHODPR(UIFrame, SetAnchorHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float2 & GetAnchorHor() const", asMETHODPR(UIFrame, GetAnchorHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorParamHor(float param0, float param1)", asMETHODPR(UIFrame, SetAnchorParamHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorParamHor(const Float2 & param)", asMETHODPR(UIFrame, SetAnchorParamHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float2 & GetAnchorParamHor() const", asMETHODPR(UIFrame, GetAnchorParamHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorVer(float anchorX, float anchorY)", asMETHODPR(UIFrame, SetAnchorVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorVer(const Float2 & anchor)", asMETHODPR(UIFrame, SetAnchorVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float2 & GetAnchorVer() const", asMETHODPR(UIFrame, GetAnchorVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorParamVer(float param0, float param1)", asMETHODPR(UIFrame, SetAnchorParamVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetAnchorParamVer(const Float2 & param)", asMETHODPR(UIFrame, SetAnchorParamVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float2 & GetAnchorParamVer() const", asMETHODPR(UIFrame, GetAnchorParamVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UICanvas @+ GetBelongUICanvas()", asMETHODPR(UIFrame, GetBelongUICanvas, (), UICanvas * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIPicBox @+ CreateAddBackgroundPicBox(bool setWhite)", asMETHODPR(UIFrame, CreateAddBackgroundPicBox, (bool), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIPicBox @+ GetBackgroundPicBox()", asMETHODPR(UIFrame, GetBackgroundPicBox, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void DestoryBackgroundPicBox()", asMETHODPR(UIFrame, DestoryBackgroundPicBox, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetActivateColor(const Float3 & color)", asMETHODPR(UIFrame, SetActivateColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const Float3 & GetActivateColor() const", asMETHODPR(UIFrame, GetActivateColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetActivateAlpha(float alpha)", asMETHODPR(UIFrame, SetActivateAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetActivateAlpha() const", asMETHODPR(UIFrame, GetActivateAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetActivateBrightness(float brightness)", asMETHODPR(UIFrame, SetActivateBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "float GetActivateBrightness() const", asMETHODPR(UIFrame, GetActivateBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetUIChildPickOnlyInSizeRange(bool onlyInRange)", asMETHODPR(UIFrame, SetUIChildPickOnlyInSizeRange, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsUIChildPickOnlyInSizeRange() const", asMETHODPR(UIFrame, IsUIChildPickOnlyInSizeRange, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetWidget(bool isWidget)", asMETHODPR(UIFrame, SetWidget, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "bool IsWidget() const", asMETHODPR(UIFrame, IsWidget, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetScriptHandler(const string & scriptHandler)", asMETHODPR(UIFrame, SetScriptHandler, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "const string & GetScriptHandler() const", asMETHODPR(UIFrame, GetScriptHandler, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIPicBox @+ CreateAddMask()", asMETHODPR(UIFrame, CreateAddMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void SetMaskVal(int maskVal)", asMETHODPR(UIFrame, SetMaskVal, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "int GetMaskVal() const", asMETHODPR(UIFrame, GetMaskVal, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIPicBox @+ GetMask()", asMETHODPR(UIFrame, GetMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "void DestoryMask()", asMETHODPR(UIFrame, DestoryMask, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIFrame_TYPE", (void*)&UIFrame::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "Transform LocalTransform", asOFFSET(UIFrame, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "Transform WorldTransform", asOFFSET(UIFrame, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "bool WorldTransformIsCurrent", asOFFSET(UIFrame, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIFrame, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "Transform BoundWorldTransform", asOFFSET(UIFrame, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "Bound WorldBound", asOFFSET(UIFrame, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "bool WorldBoundIsCurrent", asOFFSET(UIFrame, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFrame", "CullingMode Culling", asOFFSET(UIFrame, Culling));
	assert(r >= 0);
	// Class: UIPicBox
	// Enum: PicBoxType
	r = asEngine->RegisterEnum("PicBoxType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxType", "PBT_NORMAL", UIPicBox::PicBoxType::PBT_NORMAL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxType", "PBT_NINE", UIPicBox::PicBoxType::PBT_NINE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxType", "PBT_NORAML_UVREVERSE", UIPicBox::PicBoxType::PBT_NORAML_UVREVERSE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxType", "PBT_MAX_TYPE", UIPicBox::PicBoxType::PBT_MAX_TYPE);
	assert(r >= 0);
	// Enum: PicBoxTexMode
	r = asEngine->RegisterEnum("PicBoxTexMode");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxTexMode", "PBTM_TEX", UIPicBox::PicBoxTexMode::PBTM_TEX);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxTexMode", "PBTM_TEXPACK_ELE", UIPicBox::PicBoxTexMode::PBTM_TEXPACK_ELE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PicBoxTexMode", "PBTM_MAX_MODE", UIPicBox::PicBoxTexMode::PBTM_MAX_MODE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIPicBox", asBEHAVE_FACTORY, "UIPicBox @ f(const string & filename, int isDynamicBuffer)", asFUNCTION(fUIPicBox0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIPicBox", asBEHAVE_FACTORY, "UIPicBox @ f(const string & packName, const string & eleName, int isDynamicBuffer)", asFUNCTION(fUIPicBox1), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIPicBox", asBEHAVE_ADDREF, "void f()", asMETHOD(UIPicBox, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIPicBox", asBEHAVE_RELEASE, "void f()", asMETHOD(UIPicBox, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "UIPicBox@+ opCast()", asFUNCTION((RefCast<TriMesh, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Triangles@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "UIPicBox@+ opCast()", asFUNCTION((RefCast<Triangles, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Renderable@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "UIPicBox@+ opCast()", asFUNCTION((RefCast<Renderable, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIPicBox@+ opCast()", asFUNCTION((RefCast<Movable, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIPicBox@+ opCast()", asFUNCTION((RefCast<Controlledable, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Object@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIPicBox@+ opCast()", asFUNCTION((RefCast<Object, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIPicBox, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIPicBox@+ opCast()", asFUNCTION((RefCast<RefObject, UIPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void IncrementReferences()", asMETHODPR(UIPicBox, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void DecrementReferences()", asMETHODPR(UIPicBox, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "int GetReferences() const", asMETHODPR(UIPicBox, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void Enable(bool enable)", asMETHODPR(UIPicBox, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsEnable() const", asMETHODPR(UIPicBox, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetActivate(bool act)", asMETHODPR(UIPicBox, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsActivated() const", asMETHODPR(UIPicBox, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const Rtti & GetRttiType() const", asMETHODPR(UIPicBox, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "uint16 GetRttiVersion() const", asMETHODPR(UIPicBox, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIPicBox, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIPicBox, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIPicBox, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIPicBox, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIPicBox, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIPicBox, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const string & GetResourcePath() const", asMETHODPR(UIPicBox, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetName(const string & name)", asMETHODPR(UIPicBox, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const string & GetName() const", asMETHODPR(UIPicBox, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIPicBox, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetID(int id)", asMETHODPR(UIPicBox, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "int GetID() const", asMETHODPR(UIPicBox, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Object @+ GetObjectByID(int id)", asMETHODPR(UIPicBox, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void ComeInEventWorld()", asMETHODPR(UIPicBox, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void GoOutEventWorld()", asMETHODPR(UIPicBox, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsInEventWorld()", asMETHODPR(UIPicBox, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void ResetPlay()", asMETHODPR(UIPicBox, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void Play()", asMETHODPR(UIPicBox, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsPlaying() const", asMETHODPR(UIPicBox, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void Stop()", asMETHODPR(UIPicBox, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void Reset()", asMETHODPR(UIPicBox, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIPicBox, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsSelfCtrled() const", asMETHODPR(UIPicBox, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIPicBox, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsAutoPlay() const", asMETHODPR(UIPicBox, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "int GetNumControllers() const", asMETHODPR(UIPicBox, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Controller @+ GetController(int i) const", asMETHODPR(UIPicBox, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIPicBox, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool HasController(Controller @+ controller)", asMETHODPR(UIPicBox, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void AttachController(Controller @+ controller)", asMETHODPR(UIPicBox, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void DetachController(Controller @+ controller)", asMETHODPR(UIPicBox, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void DetachAllControllers()", asMETHODPR(UIPicBox, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SortControls()", asMETHODPR(UIPicBox, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIPicBox, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void Show(bool show)", asMETHODPR(UIPicBox, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsShow() const", asMETHODPR(UIPicBox, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIPicBox, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsColorSelfCtrled() const", asMETHODPR(UIPicBox, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetColor(const Float3 & color)", asMETHODPR(UIPicBox, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const Float3 & GetColor() const", asMETHODPR(UIPicBox, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIPicBox, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIPicBox, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetAlpha(float alpha)", asMETHODPR(UIPicBox, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetAlpha() const", asMETHODPR(UIPicBox, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIPicBox, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIPicBox, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetBrightness(float brightness)", asMETHODPR(UIPicBox, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetBrightness() const", asMETHODPR(UIPicBox, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const Float3 & GetLastColor() const", asMETHODPR(UIPicBox, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetLastAlpha() const", asMETHODPR(UIPicBox, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetLastBrightness() const", asMETHODPR(UIPicBox, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Movable @+ GetParent()", asMETHODPR(UIPicBox, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "PrimitiveType GetPrimitiveType() const", asMETHODPR(UIPicBox, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "int GetNumTriangles() const", asMETHODPR(UIPicBox, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(UIPicBox, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetPicBoxType(PicBoxType type)", asMETHODPR(UIPicBox, SetPicBoxType, (UIPicBox::PicBoxType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "PicBoxType GetPicBoxType()", asMETHODPR(UIPicBox, GetPicBoxType, (), UIPicBox::PicBoxType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetPivot(float anchX, float anchZ)", asMETHODPR(UIPicBox, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetPivot(Float2 anchor)", asMETHODPR(UIPicBox, SetPivot, (Float2), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const Float2 & GetPivot() const", asMETHODPR(UIPicBox, GetPivot, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Float2 & GetPivot()", asMETHODPR(UIPicBox, GetPivot, (), Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetSize(float width, float height)", asMETHODPR(UIPicBox, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetSize(const Sizef & size)", asMETHODPR(UIPicBox, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const Sizef & GetSize() const", asMETHODPR(UIPicBox, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetWidth(float width)", asMETHODPR(UIPicBox, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetWidth() const", asMETHODPR(UIPicBox, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetHeight(float height)", asMETHODPR(UIPicBox, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetHeight() const", asMETHODPR(UIPicBox, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void MakeSizeWithTex()", asMETHODPR(UIPicBox, MakeSizeWithTex, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexCornerSize(float width, float height)", asMETHODPR(UIPicBox, SetTexCornerSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexCornerSize(const Sizef & size)", asMETHODPR(UIPicBox, SetTexCornerSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const Sizef & GetTexCornerSize() const", asMETHODPR(UIPicBox, GetTexCornerSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Sizef & GetTexCornerSize()", asMETHODPR(UIPicBox, GetTexCornerSize, (), Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexCornerWidth(float width)", asMETHODPR(UIPicBox, SetTexCornerWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetTexCornerWidth() const", asMETHODPR(UIPicBox, GetTexCornerWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexCornerHeight(float height)", asMETHODPR(UIPicBox, SetTexCornerHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "float GetTexCornerHeight() const", asMETHODPR(UIPicBox, GetTexCornerHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIPicBox", "PicBoxTexMode GetPicBoxTexMode() const", asMETHODPR(UIPicBox, GetPicBoxTexMode, () const, UIPicBox::PicBoxTexMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexture(const string & filename)", asMETHODPR(UIPicBox, SetTexture, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexture(const string & texPackName, const string & eleName)", asMETHODPR(UIPicBox, SetTexture, (const std::string & , const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetTexture(Texture @+ tex)", asMETHODPR(UIPicBox, SetTexture, (Texture * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "Texture @+ GetTexture()", asMETHODPR(UIPicBox, GetTexture, (), Texture * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const string & GetTextureFilename() const", asMETHODPR(UIPicBox, GetTextureFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const string & GetTexturePackName() const", asMETHODPR(UIPicBox, GetTexturePackName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "const string & GetElementName() const", asMETHODPR(UIPicBox, GetElementName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIPicBox", "void SetUVRepeat(const Float2 & uvRepeat)", asMETHODPR(UIPicBox, SetUVRepeat, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIPicBox_TYPE", (void*)&UIPicBox::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "Transform LocalTransform", asOFFSET(UIPicBox, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "Transform WorldTransform", asOFFSET(UIPicBox, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "bool WorldTransformIsCurrent", asOFFSET(UIPicBox, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIPicBox, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "Transform BoundWorldTransform", asOFFSET(UIPicBox, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "Bound WorldBound", asOFFSET(UIPicBox, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "bool WorldBoundIsCurrent", asOFFSET(UIPicBox, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIPicBox", "CullingMode Culling", asOFFSET(UIPicBox, Culling));
	assert(r >= 0);
	// Class: UIButtonBase
	// Enum: ButType
	r = asEngine->RegisterEnum("ButType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButType", "BT_COLOR", UIButtonBase::ButType::BT_COLOR);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButType", "BT_PICBOXSWAP", UIButtonBase::ButType::BT_PICBOXSWAP);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButType", "BT_MAX_TYPE", UIButtonBase::ButType::BT_MAX_TYPE);
	assert(r >= 0);
	// Enum: ButtonState
	r = asEngine->RegisterEnum("ButtonState");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButtonState", "BS_NORMAL", UIButtonBase::ButtonState::BS_NORMAL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButtonState", "BS_HOVERED", UIButtonBase::ButtonState::BS_HOVERED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButtonState", "BS_PRESSED", UIButtonBase::ButtonState::BS_PRESSED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButtonState", "BS_DISABLED", UIButtonBase::ButtonState::BS_DISABLED);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("ButtonState", "BS_MAX_STATE", UIButtonBase::ButtonState::BS_MAX_STATE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIButtonBase", asBEHAVE_ADDREF, "void f()", asMETHOD(UIButtonBase, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIButtonBase", asBEHAVE_RELEASE, "void f()", asMETHOD(UIButtonBase, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIFrame@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<UIFrame, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "SizeNode@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<SizeNode, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Node@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<Node, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<Movable, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<Controlledable, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Object@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<Object, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIButtonBase, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIButtonBase@+ opCast()", asFUNCTION((RefCast<RefObject, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void IncrementReferences()", asMETHODPR(UIButtonBase, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void DecrementReferences()", asMETHODPR(UIButtonBase, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetReferences() const", asMETHODPR(UIButtonBase, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void Enable(bool enable)", asMETHODPR(UIButtonBase, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsEnable() const", asMETHODPR(UIButtonBase, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetActivate(bool act)", asMETHODPR(UIButtonBase, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsActivated() const", asMETHODPR(UIButtonBase, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Rtti & GetRttiType() const", asMETHODPR(UIButtonBase, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "uint16 GetRttiVersion() const", asMETHODPR(UIButtonBase, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIButtonBase, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIButtonBase, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIButtonBase, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIButtonBase, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIButtonBase, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIButtonBase, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const string & GetResourcePath() const", asMETHODPR(UIButtonBase, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetName(const string & name)", asMETHODPR(UIButtonBase, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const string & GetName() const", asMETHODPR(UIButtonBase, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIButtonBase, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetID(int id)", asMETHODPR(UIButtonBase, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetID() const", asMETHODPR(UIButtonBase, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Object @+ GetObjectByID(int id)", asMETHODPR(UIButtonBase, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void ComeInEventWorld()", asMETHODPR(UIButtonBase, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void GoOutEventWorld()", asMETHODPR(UIButtonBase, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsInEventWorld()", asMETHODPR(UIButtonBase, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void ResetPlay()", asMETHODPR(UIButtonBase, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void Play()", asMETHODPR(UIButtonBase, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsPlaying() const", asMETHODPR(UIButtonBase, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void Stop()", asMETHODPR(UIButtonBase, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void Reset()", asMETHODPR(UIButtonBase, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIButtonBase, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsSelfCtrled() const", asMETHODPR(UIButtonBase, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIButtonBase, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsAutoPlay() const", asMETHODPR(UIButtonBase, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetNumControllers() const", asMETHODPR(UIButtonBase, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Controller @+ GetController(int i) const", asMETHODPR(UIButtonBase, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIButtonBase, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool HasController(Controller @+ controller)", asMETHODPR(UIButtonBase, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void AttachController(Controller @+ controller)", asMETHODPR(UIButtonBase, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void DetachController(Controller @+ controller)", asMETHODPR(UIButtonBase, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void DetachAllControllers()", asMETHODPR(UIButtonBase, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SortControls()", asMETHODPR(UIButtonBase, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIButtonBase, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void Show(bool show)", asMETHODPR(UIButtonBase, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsShow() const", asMETHODPR(UIButtonBase, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIButtonBase, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsColorSelfCtrled() const", asMETHODPR(UIButtonBase, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetColor(const Float3 & color)", asMETHODPR(UIButtonBase, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float3 & GetColor() const", asMETHODPR(UIButtonBase, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIButtonBase, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIButtonBase, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAlpha(float alpha)", asMETHODPR(UIButtonBase, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetAlpha() const", asMETHODPR(UIButtonBase, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIButtonBase, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIButtonBase, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetBrightness(float brightness)", asMETHODPR(UIButtonBase, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetBrightness() const", asMETHODPR(UIButtonBase, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float3 & GetLastColor() const", asMETHODPR(UIButtonBase, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetLastAlpha() const", asMETHODPR(UIButtonBase, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetLastBrightness() const", asMETHODPR(UIButtonBase, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "Movable @+ GetParent()", asMETHODPR(UIButtonBase, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetNumChildren() const", asMETHODPR(UIButtonBase, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetNumValidChildren() const", asMETHODPR(UIButtonBase, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int AttachChild(Movable @+ child)", asMETHODPR(UIButtonBase, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(UIButtonBase, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int DetachChild(Movable @+ child)", asMETHODPR(UIButtonBase, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool DetachChildByName(const string & name)", asMETHODPR(UIButtonBase, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void DetachAllChildren()", asMETHODPR(UIButtonBase, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetCastShadow(bool castShadow)", asMETHODPR(UIButtonBase, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(UIButtonBase, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(UIButtonBase, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsDoPickPriority() const", asMETHODPR(UIButtonBase, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void OnNotPicked(int pickInfo)", asMETHODPR(UIButtonBase, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(UIButtonBase, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsNeedCalUpdateChild() const", asMETHODPR(UIButtonBase, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorID(int anchorID)", asMETHODPR(UIButtonBase, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetAnchorID() const", asMETHODPR(UIButtonBase, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetSize(float width, float height)", asMETHODPR(UIButtonBase, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetSize(const Sizef & size)", asMETHODPR(UIButtonBase, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Sizef & GetSize() const", asMETHODPR(UIButtonBase, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetWidth(float width)", asMETHODPR(UIButtonBase, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetWidth() const", asMETHODPR(UIButtonBase, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetHeight(float height)", asMETHODPR(UIButtonBase, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetHeight() const", asMETHODPR(UIButtonBase, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetPivot(float x, float y)", asMETHODPR(UIButtonBase, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetPivot(const Float2 & pvoit)", asMETHODPR(UIButtonBase, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float2 & GetPvoit() const", asMETHODPR(UIButtonBase, GetPvoit, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void EnableAnchorLayout(bool enable)", asMETHODPR(UIButtonBase, EnableAnchorLayout, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsAnchorLayoutEnable() const", asMETHODPR(UIButtonBase, IsAnchorLayoutEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorHor(float anchorX, float anchorY)", asMETHODPR(UIButtonBase, SetAnchorHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorHor(const Float2 & anchor)", asMETHODPR(UIButtonBase, SetAnchorHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float2 & GetAnchorHor() const", asMETHODPR(UIButtonBase, GetAnchorHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorParamHor(float param0, float param1)", asMETHODPR(UIButtonBase, SetAnchorParamHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorParamHor(const Float2 & param)", asMETHODPR(UIButtonBase, SetAnchorParamHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float2 & GetAnchorParamHor() const", asMETHODPR(UIButtonBase, GetAnchorParamHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorVer(float anchorX, float anchorY)", asMETHODPR(UIButtonBase, SetAnchorVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorVer(const Float2 & anchor)", asMETHODPR(UIButtonBase, SetAnchorVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float2 & GetAnchorVer() const", asMETHODPR(UIButtonBase, GetAnchorVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorParamVer(float param0, float param1)", asMETHODPR(UIButtonBase, SetAnchorParamVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetAnchorParamVer(const Float2 & param)", asMETHODPR(UIButtonBase, SetAnchorParamVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float2 & GetAnchorParamVer() const", asMETHODPR(UIButtonBase, GetAnchorParamVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UICanvas @+ GetBelongUICanvas()", asMETHODPR(UIButtonBase, GetBelongUICanvas, (), UICanvas * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIPicBox @+ CreateAddBackgroundPicBox(bool setWhite)", asMETHODPR(UIButtonBase, CreateAddBackgroundPicBox, (bool), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIPicBox @+ GetBackgroundPicBox()", asMETHODPR(UIButtonBase, GetBackgroundPicBox, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void DestoryBackgroundPicBox()", asMETHODPR(UIButtonBase, DestoryBackgroundPicBox, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetActivateColor(const Float3 & color)", asMETHODPR(UIButtonBase, SetActivateColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float3 & GetActivateColor() const", asMETHODPR(UIButtonBase, GetActivateColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetActivateAlpha(float alpha)", asMETHODPR(UIButtonBase, SetActivateAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetActivateAlpha() const", asMETHODPR(UIButtonBase, GetActivateAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetActivateBrightness(float brightness)", asMETHODPR(UIButtonBase, SetActivateBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetActivateBrightness() const", asMETHODPR(UIButtonBase, GetActivateBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetUIChildPickOnlyInSizeRange(bool onlyInRange)", asMETHODPR(UIButtonBase, SetUIChildPickOnlyInSizeRange, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsUIChildPickOnlyInSizeRange() const", asMETHODPR(UIButtonBase, IsUIChildPickOnlyInSizeRange, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetWidget(bool isWidget)", asMETHODPR(UIButtonBase, SetWidget, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "bool IsWidget() const", asMETHODPR(UIButtonBase, IsWidget, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetScriptHandler(const string & scriptHandler)", asMETHODPR(UIButtonBase, SetScriptHandler, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const string & GetScriptHandler() const", asMETHODPR(UIButtonBase, GetScriptHandler, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIPicBox @+ CreateAddMask()", asMETHODPR(UIButtonBase, CreateAddMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetMaskVal(int maskVal)", asMETHODPR(UIButtonBase, SetMaskVal, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "int GetMaskVal() const", asMETHODPR(UIButtonBase, GetMaskVal, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIPicBox @+ GetMask()", asMETHODPR(UIButtonBase, GetMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void DestoryMask()", asMETHODPR(UIButtonBase, DestoryMask, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetButType(ButType butType)", asMETHODPR(UIButtonBase, SetButType, (UIButtonBase::ButType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "ButType GetButType() const", asMETHODPR(UIButtonBase, GetButType, () const, UIButtonBase::ButType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetButtonState(ButtonState state)", asMETHODPR(UIButtonBase, SetButtonState, (UIButtonBase::ButtonState), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "ButtonState GetButtonState() const", asMETHODPR(UIButtonBase, GetButtonState, () const, UIButtonBase::ButtonState), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetPicBox(ButtonState state, UIPicBox @+ pic)", asMETHODPR(UIButtonBase, SetPicBox, (UIButtonBase::ButtonState, UIPicBox * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIPicBox @+ GetPicBoxAtState(ButtonState state)", asMETHODPR(UIButtonBase, GetPicBoxAtState, (UIButtonBase::ButtonState), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetStateColor(ButtonState state, const Float3 & color)", asMETHODPR(UIButtonBase, SetStateColor, (UIButtonBase::ButtonState, const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "const Float3 & GetStateColor(ButtonState state) const", asMETHODPR(UIButtonBase, GetStateColor, (UIButtonBase::ButtonState) const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetStateAlpha(ButtonState state, float alpha)", asMETHODPR(UIButtonBase, SetStateAlpha, (UIButtonBase::ButtonState, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetStateAlpha(ButtonState state) const", asMETHODPR(UIButtonBase, GetStateAlpha, (UIButtonBase::ButtonState) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "void SetStateBrightness(ButtonState state, float brightness)", asMETHODPR(UIButtonBase, SetStateBrightness, (UIButtonBase::ButtonState, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "float GetStateBrightness(ButtonState state) const", asMETHODPR(UIButtonBase, GetStateBrightness, (UIButtonBase::ButtonState) const, float), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIButtonBase", "UIFText @+ CreateAddText(const string & text)", asMETHODPR(UIButtonBase, CreateAddText, (const std::string & ), UIFText * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIText @+ GetText()", asMETHODPR(UIButtonBase, GetText, (), UIText * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIButtonBase_TYPE", (void*)&UIButtonBase::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "Transform LocalTransform", asOFFSET(UIButtonBase, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "Transform WorldTransform", asOFFSET(UIButtonBase, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "bool WorldTransformIsCurrent", asOFFSET(UIButtonBase, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIButtonBase, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "Transform BoundWorldTransform", asOFFSET(UIButtonBase, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "Bound WorldBound", asOFFSET(UIButtonBase, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "bool WorldBoundIsCurrent", asOFFSET(UIButtonBase, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButtonBase", "CullingMode Culling", asOFFSET(UIButtonBase, Culling));
	assert(r >= 0);
	// Class: UIButton
	// Enum: AfterReleasedType
	r = asEngine->RegisterEnum("AfterReleasedType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("AfterReleasedType", "ART_NORMAL", UIButton::AfterReleasedType::ART_NORMAL);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("AfterReleasedType", "ART_DISABLE", UIButton::AfterReleasedType::ART_DISABLE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("AfterReleasedType", "ART_DISABLE_RECOVER", UIButton::AfterReleasedType::ART_DISABLE_RECOVER);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("AfterReleasedType", "ART_MAX_TYPE", UIButton::AfterReleasedType::ART_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIButton", asBEHAVE_FACTORY, "UIButton @ f()", asFUNCTION(fUIButton0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIButton", asBEHAVE_ADDREF, "void f()", asMETHOD(UIButton, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIButton", asBEHAVE_RELEASE, "void f()", asMETHOD(UIButton, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIButtonBase@+ opImplCast()", asFUNCTION((RefCast<UIButton, UIButtonBase>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButtonBase", "UIButton@+ opCast()", asFUNCTION((RefCast<UIButtonBase, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIFrame@+ opImplCast()", asFUNCTION((RefCast<UIButton, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIButton@+ opCast()", asFUNCTION((RefCast<UIFrame, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "SizeNode@+ opImplCast()", asFUNCTION((RefCast<UIButton, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "UIButton@+ opCast()", asFUNCTION((RefCast<SizeNode, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Node@+ opImplCast()", asFUNCTION((RefCast<UIButton, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "UIButton@+ opCast()", asFUNCTION((RefCast<Node, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIButton, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIButton@+ opCast()", asFUNCTION((RefCast<Movable, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIButton, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIButton@+ opCast()", asFUNCTION((RefCast<Controlledable, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Object@+ opImplCast()", asFUNCTION((RefCast<UIButton, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIButton@+ opCast()", asFUNCTION((RefCast<Object, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIButton, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIButton@+ opCast()", asFUNCTION((RefCast<RefObject, UIButton>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void IncrementReferences()", asMETHODPR(UIButton, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void DecrementReferences()", asMETHODPR(UIButton, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int GetReferences() const", asMETHODPR(UIButton, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void Enable(bool enable)", asMETHODPR(UIButton, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsEnable() const", asMETHODPR(UIButton, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetActivate(bool act)", asMETHODPR(UIButton, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsActivated() const", asMETHODPR(UIButton, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Rtti & GetRttiType() const", asMETHODPR(UIButton, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "uint16 GetRttiVersion() const", asMETHODPR(UIButton, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIButton, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIButton, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIButton, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIButton, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIButton, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIButton, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const string & GetResourcePath() const", asMETHODPR(UIButton, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetName(const string & name)", asMETHODPR(UIButton, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const string & GetName() const", asMETHODPR(UIButton, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIButton, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetID(int id)", asMETHODPR(UIButton, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int GetID() const", asMETHODPR(UIButton, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Object @+ GetObjectByID(int id)", asMETHODPR(UIButton, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void ComeInEventWorld()", asMETHODPR(UIButton, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void GoOutEventWorld()", asMETHODPR(UIButton, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsInEventWorld()", asMETHODPR(UIButton, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void ResetPlay()", asMETHODPR(UIButton, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void Play()", asMETHODPR(UIButton, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsPlaying() const", asMETHODPR(UIButton, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void Stop()", asMETHODPR(UIButton, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void Reset()", asMETHODPR(UIButton, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIButton, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsSelfCtrled() const", asMETHODPR(UIButton, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIButton, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsAutoPlay() const", asMETHODPR(UIButton, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int GetNumControllers() const", asMETHODPR(UIButton, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Controller @+ GetController(int i) const", asMETHODPR(UIButton, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIButton, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool HasController(Controller @+ controller)", asMETHODPR(UIButton, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void AttachController(Controller @+ controller)", asMETHODPR(UIButton, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void DetachController(Controller @+ controller)", asMETHODPR(UIButton, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void DetachAllControllers()", asMETHODPR(UIButton, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SortControls()", asMETHODPR(UIButton, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIButton, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void Show(bool show)", asMETHODPR(UIButton, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsShow() const", asMETHODPR(UIButton, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIButton, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsColorSelfCtrled() const", asMETHODPR(UIButton, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetColor(const Float3 & color)", asMETHODPR(UIButton, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float3 & GetColor() const", asMETHODPR(UIButton, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIButton, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIButton, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAlpha(float alpha)", asMETHODPR(UIButton, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetAlpha() const", asMETHODPR(UIButton, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIButton, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIButton, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetBrightness(float brightness)", asMETHODPR(UIButton, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetBrightness() const", asMETHODPR(UIButton, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float3 & GetLastColor() const", asMETHODPR(UIButton, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetLastAlpha() const", asMETHODPR(UIButton, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetLastBrightness() const", asMETHODPR(UIButton, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Movable @+ GetParent()", asMETHODPR(UIButton, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("UIButton", "int GetNumChildren() const", asMETHODPR(UIButton, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int GetNumValidChildren() const", asMETHODPR(UIButton, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int AttachChild(Movable @+ child)", asMETHODPR(UIButton, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(UIButton, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int DetachChild(Movable @+ child)", asMETHODPR(UIButton, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool DetachChildByName(const string & name)", asMETHODPR(UIButton, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void DetachAllChildren()", asMETHODPR(UIButton, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIButton", "void SetCastShadow(bool castShadow)", asMETHODPR(UIButton, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(UIButton, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(UIButton, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsDoPickPriority() const", asMETHODPR(UIButton, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void OnNotPicked(int pickInfo)", asMETHODPR(UIButton, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(UIButton, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsNeedCalUpdateChild() const", asMETHODPR(UIButton, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorID(int anchorID)", asMETHODPR(UIButton, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int GetAnchorID() const", asMETHODPR(UIButton, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetSize(float width, float height)", asMETHODPR(UIButton, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetSize(const Sizef & size)", asMETHODPR(UIButton, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Sizef & GetSize() const", asMETHODPR(UIButton, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetWidth(float width)", asMETHODPR(UIButton, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetWidth() const", asMETHODPR(UIButton, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetHeight(float height)", asMETHODPR(UIButton, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetHeight() const", asMETHODPR(UIButton, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetPivot(float x, float y)", asMETHODPR(UIButton, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetPivot(const Float2 & pvoit)", asMETHODPR(UIButton, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float2 & GetPvoit() const", asMETHODPR(UIButton, GetPvoit, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void EnableAnchorLayout(bool enable)", asMETHODPR(UIButton, EnableAnchorLayout, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsAnchorLayoutEnable() const", asMETHODPR(UIButton, IsAnchorLayoutEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorHor(float anchorX, float anchorY)", asMETHODPR(UIButton, SetAnchorHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorHor(const Float2 & anchor)", asMETHODPR(UIButton, SetAnchorHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float2 & GetAnchorHor() const", asMETHODPR(UIButton, GetAnchorHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorParamHor(float param0, float param1)", asMETHODPR(UIButton, SetAnchorParamHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorParamHor(const Float2 & param)", asMETHODPR(UIButton, SetAnchorParamHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float2 & GetAnchorParamHor() const", asMETHODPR(UIButton, GetAnchorParamHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorVer(float anchorX, float anchorY)", asMETHODPR(UIButton, SetAnchorVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorVer(const Float2 & anchor)", asMETHODPR(UIButton, SetAnchorVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float2 & GetAnchorVer() const", asMETHODPR(UIButton, GetAnchorVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorParamVer(float param0, float param1)", asMETHODPR(UIButton, SetAnchorParamVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAnchorParamVer(const Float2 & param)", asMETHODPR(UIButton, SetAnchorParamVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float2 & GetAnchorParamVer() const", asMETHODPR(UIButton, GetAnchorParamVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UICanvas @+ GetBelongUICanvas()", asMETHODPR(UIButton, GetBelongUICanvas, (), UICanvas * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIPicBox @+ CreateAddBackgroundPicBox(bool setWhite)", asMETHODPR(UIButton, CreateAddBackgroundPicBox, (bool), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIPicBox @+ GetBackgroundPicBox()", asMETHODPR(UIButton, GetBackgroundPicBox, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void DestoryBackgroundPicBox()", asMETHODPR(UIButton, DestoryBackgroundPicBox, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetActivateColor(const Float3 & color)", asMETHODPR(UIButton, SetActivateColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float3 & GetActivateColor() const", asMETHODPR(UIButton, GetActivateColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetActivateAlpha(float alpha)", asMETHODPR(UIButton, SetActivateAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetActivateAlpha() const", asMETHODPR(UIButton, GetActivateAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetActivateBrightness(float brightness)", asMETHODPR(UIButton, SetActivateBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetActivateBrightness() const", asMETHODPR(UIButton, GetActivateBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetUIChildPickOnlyInSizeRange(bool onlyInRange)", asMETHODPR(UIButton, SetUIChildPickOnlyInSizeRange, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsUIChildPickOnlyInSizeRange() const", asMETHODPR(UIButton, IsUIChildPickOnlyInSizeRange, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetWidget(bool isWidget)", asMETHODPR(UIButton, SetWidget, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "bool IsWidget() const", asMETHODPR(UIButton, IsWidget, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetScriptHandler(const string & scriptHandler)", asMETHODPR(UIButton, SetScriptHandler, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const string & GetScriptHandler() const", asMETHODPR(UIButton, GetScriptHandler, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIPicBox @+ CreateAddMask()", asMETHODPR(UIButton, CreateAddMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetMaskVal(int maskVal)", asMETHODPR(UIButton, SetMaskVal, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "int GetMaskVal() const", asMETHODPR(UIButton, GetMaskVal, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIPicBox @+ GetMask()", asMETHODPR(UIButton, GetMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void DestoryMask()", asMETHODPR(UIButton, DestoryMask, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetButType(ButType butType)", asMETHODPR(UIButton, SetButType, (UIButtonBase::ButType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "ButType GetButType() const", asMETHODPR(UIButton, GetButType, () const, UIButtonBase::ButType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetButtonState(ButtonState state)", asMETHODPR(UIButton, SetButtonState, (UIButtonBase::ButtonState), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "ButtonState GetButtonState() const", asMETHODPR(UIButton, GetButtonState, () const, UIButtonBase::ButtonState), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetPicBox(ButtonState state, UIPicBox @+ pic)", asMETHODPR(UIButton, SetPicBox, (UIButtonBase::ButtonState, UIPicBox * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIPicBox @+ GetPicBoxAtState(ButtonState state)", asMETHODPR(UIButton, GetPicBoxAtState, (UIButtonBase::ButtonState), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetStateColor(ButtonState state, const Float3 & color)", asMETHODPR(UIButton, SetStateColor, (UIButtonBase::ButtonState, const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "const Float3 & GetStateColor(ButtonState state) const", asMETHODPR(UIButton, GetStateColor, (UIButtonBase::ButtonState) const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetStateAlpha(ButtonState state, float alpha)", asMETHODPR(UIButton, SetStateAlpha, (UIButtonBase::ButtonState, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetStateAlpha(ButtonState state) const", asMETHODPR(UIButton, GetStateAlpha, (UIButtonBase::ButtonState) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetStateBrightness(ButtonState state, float brightness)", asMETHODPR(UIButton, SetStateBrightness, (UIButtonBase::ButtonState, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetStateBrightness(ButtonState state) const", asMETHODPR(UIButton, GetStateBrightness, (UIButtonBase::ButtonState) const, float), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIButton", "UIFText @+ CreateAddText(const string & text)", asMETHODPR(UIButton, CreateAddText, (const std::string & ), UIFText * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "UIText @+ GetText()", asMETHODPR(UIButton, GetText, (), UIText * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "Object @+ New()", asFUNCTIONPR(UIButton::New, (), Object * ), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIButton", "void SetAfterReleasedType(AfterReleasedType type)", asMETHODPR(UIButton, SetAfterReleasedType, (UIButton::AfterReleasedType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "AfterReleasedType GetAfterReleasedType() const", asMETHODPR(UIButton, GetAfterReleasedType, () const, UIButton::AfterReleasedType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "void SetAfterReleasedRecoverTime(float time)", asMETHODPR(UIButton, SetAfterReleasedRecoverTime, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIButton", "float GetAfterReleasedRecoverTime() const", asMETHODPR(UIButton, GetAfterReleasedRecoverTime, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIButton_TYPE", (void*)&UIButton::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "Transform LocalTransform", asOFFSET(UIButton, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "Transform WorldTransform", asOFFSET(UIButton, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "bool WorldTransformIsCurrent", asOFFSET(UIButton, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIButton, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "Transform BoundWorldTransform", asOFFSET(UIButton, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "Bound WorldBound", asOFFSET(UIButton, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "bool WorldBoundIsCurrent", asOFFSET(UIButton, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIButton", "CullingMode Culling", asOFFSET(UIButton, Culling));
	assert(r >= 0);
	// Class: UIFPicBox
	r = asEngine->RegisterObjectBehaviour("UIFPicBox", asBEHAVE_FACTORY, "UIFPicBox @ f()", asFUNCTION(fUIFPicBox0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIFPicBox", asBEHAVE_ADDREF, "void f()", asMETHOD(UIFPicBox, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIFPicBox", asBEHAVE_RELEASE, "void f()", asMETHOD(UIFPicBox, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UIFrame@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<UIFrame, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "SizeNode@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<SizeNode, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Node@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<Node, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<Movable, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<Controlledable, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Object@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<Object, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIFPicBox, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIFPicBox@+ opCast()", asFUNCTION((RefCast<RefObject, UIFPicBox>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void IncrementReferences()", asMETHODPR(UIFPicBox, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void DecrementReferences()", asMETHODPR(UIFPicBox, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetReferences() const", asMETHODPR(UIFPicBox, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void Enable(bool enable)", asMETHODPR(UIFPicBox, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsEnable() const", asMETHODPR(UIFPicBox, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetActivate(bool act)", asMETHODPR(UIFPicBox, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsActivated() const", asMETHODPR(UIFPicBox, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Rtti & GetRttiType() const", asMETHODPR(UIFPicBox, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "uint16 GetRttiVersion() const", asMETHODPR(UIFPicBox, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIFPicBox, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIFPicBox, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIFPicBox, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIFPicBox, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIFPicBox, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIFPicBox, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const string & GetResourcePath() const", asMETHODPR(UIFPicBox, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetName(const string & name)", asMETHODPR(UIFPicBox, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const string & GetName() const", asMETHODPR(UIFPicBox, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIFPicBox, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetID(int id)", asMETHODPR(UIFPicBox, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetID() const", asMETHODPR(UIFPicBox, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Object @+ GetObjectByID(int id)", asMETHODPR(UIFPicBox, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void ComeInEventWorld()", asMETHODPR(UIFPicBox, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void GoOutEventWorld()", asMETHODPR(UIFPicBox, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsInEventWorld()", asMETHODPR(UIFPicBox, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void ResetPlay()", asMETHODPR(UIFPicBox, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void Play()", asMETHODPR(UIFPicBox, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsPlaying() const", asMETHODPR(UIFPicBox, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void Stop()", asMETHODPR(UIFPicBox, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void Reset()", asMETHODPR(UIFPicBox, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIFPicBox, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsSelfCtrled() const", asMETHODPR(UIFPicBox, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIFPicBox, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsAutoPlay() const", asMETHODPR(UIFPicBox, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetNumControllers() const", asMETHODPR(UIFPicBox, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Controller @+ GetController(int i) const", asMETHODPR(UIFPicBox, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIFPicBox, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool HasController(Controller @+ controller)", asMETHODPR(UIFPicBox, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void AttachController(Controller @+ controller)", asMETHODPR(UIFPicBox, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void DetachController(Controller @+ controller)", asMETHODPR(UIFPicBox, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void DetachAllControllers()", asMETHODPR(UIFPicBox, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SortControls()", asMETHODPR(UIFPicBox, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIFPicBox, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void Show(bool show)", asMETHODPR(UIFPicBox, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsShow() const", asMETHODPR(UIFPicBox, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIFPicBox, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsColorSelfCtrled() const", asMETHODPR(UIFPicBox, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetColor(const Float3 & color)", asMETHODPR(UIFPicBox, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float3 & GetColor() const", asMETHODPR(UIFPicBox, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIFPicBox, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIFPicBox, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAlpha(float alpha)", asMETHODPR(UIFPicBox, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetAlpha() const", asMETHODPR(UIFPicBox, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIFPicBox, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIFPicBox, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetBrightness(float brightness)", asMETHODPR(UIFPicBox, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetBrightness() const", asMETHODPR(UIFPicBox, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float3 & GetLastColor() const", asMETHODPR(UIFPicBox, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetLastAlpha() const", asMETHODPR(UIFPicBox, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetLastBrightness() const", asMETHODPR(UIFPicBox, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "Movable @+ GetParent()", asMETHODPR(UIFPicBox, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetNumChildren() const", asMETHODPR(UIFPicBox, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetNumValidChildren() const", asMETHODPR(UIFPicBox, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int AttachChild(Movable @+ child)", asMETHODPR(UIFPicBox, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(UIFPicBox, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int DetachChild(Movable @+ child)", asMETHODPR(UIFPicBox, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool DetachChildByName(const string & name)", asMETHODPR(UIFPicBox, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void DetachAllChildren()", asMETHODPR(UIFPicBox, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetCastShadow(bool castShadow)", asMETHODPR(UIFPicBox, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(UIFPicBox, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(UIFPicBox, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsDoPickPriority() const", asMETHODPR(UIFPicBox, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void OnNotPicked(int pickInfo)", asMETHODPR(UIFPicBox, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(UIFPicBox, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsNeedCalUpdateChild() const", asMETHODPR(UIFPicBox, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorID(int anchorID)", asMETHODPR(UIFPicBox, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetAnchorID() const", asMETHODPR(UIFPicBox, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetSize(float width, float height)", asMETHODPR(UIFPicBox, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetSize(const Sizef & size)", asMETHODPR(UIFPicBox, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Sizef & GetSize() const", asMETHODPR(UIFPicBox, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetWidth(float width)", asMETHODPR(UIFPicBox, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetWidth() const", asMETHODPR(UIFPicBox, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetHeight(float height)", asMETHODPR(UIFPicBox, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetHeight() const", asMETHODPR(UIFPicBox, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetPivot(float x, float y)", asMETHODPR(UIFPicBox, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetPivot(const Float2 & pvoit)", asMETHODPR(UIFPicBox, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float2 & GetPvoit() const", asMETHODPR(UIFPicBox, GetPvoit, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void EnableAnchorLayout(bool enable)", asMETHODPR(UIFPicBox, EnableAnchorLayout, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsAnchorLayoutEnable() const", asMETHODPR(UIFPicBox, IsAnchorLayoutEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorHor(float anchorX, float anchorY)", asMETHODPR(UIFPicBox, SetAnchorHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorHor(const Float2 & anchor)", asMETHODPR(UIFPicBox, SetAnchorHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float2 & GetAnchorHor() const", asMETHODPR(UIFPicBox, GetAnchorHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorParamHor(float param0, float param1)", asMETHODPR(UIFPicBox, SetAnchorParamHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorParamHor(const Float2 & param)", asMETHODPR(UIFPicBox, SetAnchorParamHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float2 & GetAnchorParamHor() const", asMETHODPR(UIFPicBox, GetAnchorParamHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorVer(float anchorX, float anchorY)", asMETHODPR(UIFPicBox, SetAnchorVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorVer(const Float2 & anchor)", asMETHODPR(UIFPicBox, SetAnchorVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float2 & GetAnchorVer() const", asMETHODPR(UIFPicBox, GetAnchorVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorParamVer(float param0, float param1)", asMETHODPR(UIFPicBox, SetAnchorParamVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetAnchorParamVer(const Float2 & param)", asMETHODPR(UIFPicBox, SetAnchorParamVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float2 & GetAnchorParamVer() const", asMETHODPR(UIFPicBox, GetAnchorParamVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UICanvas @+ GetBelongUICanvas()", asMETHODPR(UIFPicBox, GetBelongUICanvas, (), UICanvas * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UIPicBox @+ CreateAddBackgroundPicBox(bool setWhite)", asMETHODPR(UIFPicBox, CreateAddBackgroundPicBox, (bool), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UIPicBox @+ GetBackgroundPicBox()", asMETHODPR(UIFPicBox, GetBackgroundPicBox, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void DestoryBackgroundPicBox()", asMETHODPR(UIFPicBox, DestoryBackgroundPicBox, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetActivateColor(const Float3 & color)", asMETHODPR(UIFPicBox, SetActivateColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const Float3 & GetActivateColor() const", asMETHODPR(UIFPicBox, GetActivateColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetActivateAlpha(float alpha)", asMETHODPR(UIFPicBox, SetActivateAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetActivateAlpha() const", asMETHODPR(UIFPicBox, GetActivateAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetActivateBrightness(float brightness)", asMETHODPR(UIFPicBox, SetActivateBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "float GetActivateBrightness() const", asMETHODPR(UIFPicBox, GetActivateBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetUIChildPickOnlyInSizeRange(bool onlyInRange)", asMETHODPR(UIFPicBox, SetUIChildPickOnlyInSizeRange, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsUIChildPickOnlyInSizeRange() const", asMETHODPR(UIFPicBox, IsUIChildPickOnlyInSizeRange, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetWidget(bool isWidget)", asMETHODPR(UIFPicBox, SetWidget, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "bool IsWidget() const", asMETHODPR(UIFPicBox, IsWidget, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetScriptHandler(const string & scriptHandler)", asMETHODPR(UIFPicBox, SetScriptHandler, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "const string & GetScriptHandler() const", asMETHODPR(UIFPicBox, GetScriptHandler, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UIPicBox @+ CreateAddMask()", asMETHODPR(UIFPicBox, CreateAddMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void SetMaskVal(int maskVal)", asMETHODPR(UIFPicBox, SetMaskVal, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "int GetMaskVal() const", asMETHODPR(UIFPicBox, GetMaskVal, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UIPicBox @+ GetMask()", asMETHODPR(UIFPicBox, GetMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "void DestoryMask()", asMETHODPR(UIFPicBox, DestoryMask, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFPicBox", "UIPicBox @+ GetUIPicBox()", asMETHODPR(UIFPicBox, GetUIPicBox, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIFPicBox_TYPE", (void*)&UIFPicBox::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "Transform LocalTransform", asOFFSET(UIFPicBox, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "Transform WorldTransform", asOFFSET(UIFPicBox, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "bool WorldTransformIsCurrent", asOFFSET(UIFPicBox, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIFPicBox, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "Transform BoundWorldTransform", asOFFSET(UIFPicBox, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "Bound WorldBound", asOFFSET(UIFPicBox, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "bool WorldBoundIsCurrent", asOFFSET(UIFPicBox, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFPicBox", "CullingMode Culling", asOFFSET(UIFPicBox, Culling));
	assert(r >= 0);
	// Class: UIText
	r = asEngine->RegisterObjectBehaviour("UIText", asBEHAVE_FACTORY, "UIText @ f()", asFUNCTION(fUIText0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIText", asBEHAVE_ADDREF, "void f()", asMETHOD(UIText, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIText", asBEHAVE_RELEASE, "void f()", asMETHOD(UIText, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "TriMesh@+ opImplCast()", asFUNCTION((RefCast<UIText, TriMesh>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("TriMesh", "UIText@+ opCast()", asFUNCTION((RefCast<TriMesh, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Triangles@+ opImplCast()", asFUNCTION((RefCast<UIText, Triangles>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Triangles", "UIText@+ opCast()", asFUNCTION((RefCast<Triangles, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Renderable@+ opImplCast()", asFUNCTION((RefCast<UIText, Renderable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Renderable", "UIText@+ opCast()", asFUNCTION((RefCast<Renderable, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIText, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIText@+ opCast()", asFUNCTION((RefCast<Movable, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIText, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIText@+ opCast()", asFUNCTION((RefCast<Controlledable, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Object@+ opImplCast()", asFUNCTION((RefCast<UIText, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIText@+ opCast()", asFUNCTION((RefCast<Object, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIText, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIText@+ opCast()", asFUNCTION((RefCast<RefObject, UIText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void IncrementReferences()", asMETHODPR(UIText, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void DecrementReferences()", asMETHODPR(UIText, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "int GetReferences() const", asMETHODPR(UIText, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void Enable(bool enable)", asMETHODPR(UIText, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsEnable() const", asMETHODPR(UIText, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetActivate(bool act)", asMETHODPR(UIText, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsActivated() const", asMETHODPR(UIText, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "const Rtti & GetRttiType() const", asMETHODPR(UIText, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "uint16 GetRttiVersion() const", asMETHODPR(UIText, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIText, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIText, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIText, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIText, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIText, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIText, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "const string & GetResourcePath() const", asMETHODPR(UIText, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetName(const string & name)", asMETHODPR(UIText, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "const string & GetName() const", asMETHODPR(UIText, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIText, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetID(int id)", asMETHODPR(UIText, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "int GetID() const", asMETHODPR(UIText, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Object @+ GetObjectByID(int id)", asMETHODPR(UIText, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void ComeInEventWorld()", asMETHODPR(UIText, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void GoOutEventWorld()", asMETHODPR(UIText, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsInEventWorld()", asMETHODPR(UIText, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void ResetPlay()", asMETHODPR(UIText, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void Play()", asMETHODPR(UIText, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsPlaying() const", asMETHODPR(UIText, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void Stop()", asMETHODPR(UIText, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void Reset()", asMETHODPR(UIText, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIText, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsSelfCtrled() const", asMETHODPR(UIText, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIText, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsAutoPlay() const", asMETHODPR(UIText, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "int GetNumControllers() const", asMETHODPR(UIText, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Controller @+ GetController(int i) const", asMETHODPR(UIText, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIText, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool HasController(Controller @+ controller)", asMETHODPR(UIText, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void AttachController(Controller @+ controller)", asMETHODPR(UIText, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void DetachController(Controller @+ controller)", asMETHODPR(UIText, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void DetachAllControllers()", asMETHODPR(UIText, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SortControls()", asMETHODPR(UIText, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIText, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void Show(bool show)", asMETHODPR(UIText, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsShow() const", asMETHODPR(UIText, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIText, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsColorSelfCtrled() const", asMETHODPR(UIText, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetColor(const Float3 & color)", asMETHODPR(UIText, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "const Float3 & GetColor() const", asMETHODPR(UIText, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIText, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIText, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetAlpha(float alpha)", asMETHODPR(UIText, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "float GetAlpha() const", asMETHODPR(UIText, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIText, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIText, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetBrightness(float brightness)", asMETHODPR(UIText, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "float GetBrightness() const", asMETHODPR(UIText, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "const Float3 & GetLastColor() const", asMETHODPR(UIText, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "float GetLastAlpha() const", asMETHODPR(UIText, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "float GetLastBrightness() const", asMETHODPR(UIText, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "Movable @+ GetParent()", asMETHODPR(UIText, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "PrimitiveType GetPrimitiveType() const", asMETHODPR(UIText, GetPrimitiveType, () const, Renderable::PrimitiveType), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "int GetNumTriangles() const", asMETHODPR(UIText, GetNumTriangles, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "bool GetTriangle(int i, int & v0, int & v1, int & v2) const", asMETHODPR(UIText, GetTriangle, (int, int & , int & , int & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIText", "void SetFont(const string & fontFilename, int fontWidth, int fontHeight, uint32 fontStyle)", asMETHODPR(UIText, SetFont, (const std::string & , int, int, unsigned int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIText_TYPE", (void*)&UIText::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "Transform LocalTransform", asOFFSET(UIText, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "Transform WorldTransform", asOFFSET(UIText, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "bool WorldTransformIsCurrent", asOFFSET(UIText, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIText, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "Transform BoundWorldTransform", asOFFSET(UIText, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "Bound WorldBound", asOFFSET(UIText, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "bool WorldBoundIsCurrent", asOFFSET(UIText, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIText", "CullingMode Culling", asOFFSET(UIText, Culling));
	assert(r >= 0);
	// Class: UIFText
	r = asEngine->RegisterObjectBehaviour("UIFText", asBEHAVE_FACTORY, "UIFText @ f()", asFUNCTION(fUIFText0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIFText", asBEHAVE_ADDREF, "void f()", asMETHOD(UIFText, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UIFText", asBEHAVE_RELEASE, "void f()", asMETHOD(UIFText, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UIFrame@+ opImplCast()", asFUNCTION((RefCast<UIFText, UIFrame>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFrame", "UIFText@+ opCast()", asFUNCTION((RefCast<UIFrame, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "SizeNode@+ opImplCast()", asFUNCTION((RefCast<UIFText, SizeNode>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("SizeNode", "UIFText@+ opCast()", asFUNCTION((RefCast<SizeNode, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Node@+ opImplCast()", asFUNCTION((RefCast<UIFText, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "UIFText@+ opCast()", asFUNCTION((RefCast<Node, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Movable@+ opImplCast()", asFUNCTION((RefCast<UIFText, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "UIFText@+ opCast()", asFUNCTION((RefCast<Movable, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<UIFText, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "UIFText@+ opCast()", asFUNCTION((RefCast<Controlledable, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Object@+ opImplCast()", asFUNCTION((RefCast<UIFText, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UIFText@+ opCast()", asFUNCTION((RefCast<Object, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UIFText, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UIFText@+ opCast()", asFUNCTION((RefCast<RefObject, UIFText>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void IncrementReferences()", asMETHODPR(UIFText, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void DecrementReferences()", asMETHODPR(UIFText, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int GetReferences() const", asMETHODPR(UIFText, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void Enable(bool enable)", asMETHODPR(UIFText, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsEnable() const", asMETHODPR(UIFText, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetActivate(bool act)", asMETHODPR(UIFText, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsActivated() const", asMETHODPR(UIFText, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Rtti & GetRttiType() const", asMETHODPR(UIFText, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "uint16 GetRttiVersion() const", asMETHODPR(UIFText, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsExactly(const Rtti & type) const", asMETHODPR(UIFText, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsDerived(const Rtti & type) const", asMETHODPR(UIFText, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UIFText, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UIFText, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UIFText, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UIFText, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const string & GetResourcePath() const", asMETHODPR(UIFText, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetName(const string & name)", asMETHODPR(UIFText, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const string & GetName() const", asMETHODPR(UIFText, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UIFText, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetID(int id)", asMETHODPR(UIFText, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int GetID() const", asMETHODPR(UIFText, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Object @+ GetObjectByID(int id)", asMETHODPR(UIFText, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void ComeInEventWorld()", asMETHODPR(UIFText, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void GoOutEventWorld()", asMETHODPR(UIFText, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsInEventWorld()", asMETHODPR(UIFText, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void ResetPlay()", asMETHODPR(UIFText, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void Play()", asMETHODPR(UIFText, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsPlaying() const", asMETHODPR(UIFText, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void Stop()", asMETHODPR(UIFText, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void Reset()", asMETHODPR(UIFText, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(UIFText, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsSelfCtrled() const", asMETHODPR(UIFText, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAutoPlay(bool autoPlay)", asMETHODPR(UIFText, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsAutoPlay() const", asMETHODPR(UIFText, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int GetNumControllers() const", asMETHODPR(UIFText, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Controller @+ GetController(int i) const", asMETHODPR(UIFText, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(UIFText, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool HasController(Controller @+ controller)", asMETHODPR(UIFText, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void AttachController(Controller @+ controller)", asMETHODPR(UIFText, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void DetachController(Controller @+ controller)", asMETHODPR(UIFText, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void DetachAllControllers()", asMETHODPR(UIFText, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SortControls()", asMETHODPR(UIFText, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(UIFText, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void Show(bool show)", asMETHODPR(UIFText, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsShow() const", asMETHODPR(UIFText, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(UIFText, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsColorSelfCtrled() const", asMETHODPR(UIFText, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetColor(const Float3 & color)", asMETHODPR(UIFText, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float3 & GetColor() const", asMETHODPR(UIFText, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(UIFText, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsAlphaSelfCtrled() const", asMETHODPR(UIFText, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAlpha(float alpha)", asMETHODPR(UIFText, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetAlpha() const", asMETHODPR(UIFText, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(UIFText, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsBrightnessSelfCtrled() const", asMETHODPR(UIFText, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetBrightness(float brightness)", asMETHODPR(UIFText, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetBrightness() const", asMETHODPR(UIFText, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float3 & GetLastColor() const", asMETHODPR(UIFText, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetLastAlpha() const", asMETHODPR(UIFText, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetLastBrightness() const", asMETHODPR(UIFText, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "Movable @+ GetParent()", asMETHODPR(UIFText, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("UIFText", "int GetNumChildren() const", asMETHODPR(UIFText, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int GetNumValidChildren() const", asMETHODPR(UIFText, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int AttachChild(Movable @+ child)", asMETHODPR(UIFText, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(UIFText, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int DetachChild(Movable @+ child)", asMETHODPR(UIFText, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool DetachChildByName(const string & name)", asMETHODPR(UIFText, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void DetachAllChildren()", asMETHODPR(UIFText, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("UIFText", "void SetCastShadow(bool castShadow)", asMETHODPR(UIFText, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(UIFText, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(UIFText, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsDoPickPriority() const", asMETHODPR(UIFText, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void OnNotPicked(int pickInfo)", asMETHODPR(UIFText, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(UIFText, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsNeedCalUpdateChild() const", asMETHODPR(UIFText, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorID(int anchorID)", asMETHODPR(UIFText, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int GetAnchorID() const", asMETHODPR(UIFText, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetSize(float width, float height)", asMETHODPR(UIFText, SetSize, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetSize(const Sizef & size)", asMETHODPR(UIFText, SetSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Sizef & GetSize() const", asMETHODPR(UIFText, GetSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetWidth(float width)", asMETHODPR(UIFText, SetWidth, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetWidth() const", asMETHODPR(UIFText, GetWidth, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetHeight(float height)", asMETHODPR(UIFText, SetHeight, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetHeight() const", asMETHODPR(UIFText, GetHeight, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetPivot(float x, float y)", asMETHODPR(UIFText, SetPivot, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetPivot(const Float2 & pvoit)", asMETHODPR(UIFText, SetPivot, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float2 & GetPvoit() const", asMETHODPR(UIFText, GetPvoit, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void EnableAnchorLayout(bool enable)", asMETHODPR(UIFText, EnableAnchorLayout, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsAnchorLayoutEnable() const", asMETHODPR(UIFText, IsAnchorLayoutEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorHor(float anchorX, float anchorY)", asMETHODPR(UIFText, SetAnchorHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorHor(const Float2 & anchor)", asMETHODPR(UIFText, SetAnchorHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float2 & GetAnchorHor() const", asMETHODPR(UIFText, GetAnchorHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorParamHor(float param0, float param1)", asMETHODPR(UIFText, SetAnchorParamHor, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorParamHor(const Float2 & param)", asMETHODPR(UIFText, SetAnchorParamHor, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float2 & GetAnchorParamHor() const", asMETHODPR(UIFText, GetAnchorParamHor, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorVer(float anchorX, float anchorY)", asMETHODPR(UIFText, SetAnchorVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorVer(const Float2 & anchor)", asMETHODPR(UIFText, SetAnchorVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float2 & GetAnchorVer() const", asMETHODPR(UIFText, GetAnchorVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorParamVer(float param0, float param1)", asMETHODPR(UIFText, SetAnchorParamVer, (float, float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetAnchorParamVer(const Float2 & param)", asMETHODPR(UIFText, SetAnchorParamVer, (const Float2 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float2 & GetAnchorParamVer() const", asMETHODPR(UIFText, GetAnchorParamVer, () const, const Float2 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UICanvas @+ GetBelongUICanvas()", asMETHODPR(UIFText, GetBelongUICanvas, (), UICanvas * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UIPicBox @+ CreateAddBackgroundPicBox(bool setWhite)", asMETHODPR(UIFText, CreateAddBackgroundPicBox, (bool), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UIPicBox @+ GetBackgroundPicBox()", asMETHODPR(UIFText, GetBackgroundPicBox, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void DestoryBackgroundPicBox()", asMETHODPR(UIFText, DestoryBackgroundPicBox, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetActivateColor(const Float3 & color)", asMETHODPR(UIFText, SetActivateColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const Float3 & GetActivateColor() const", asMETHODPR(UIFText, GetActivateColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetActivateAlpha(float alpha)", asMETHODPR(UIFText, SetActivateAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetActivateAlpha() const", asMETHODPR(UIFText, GetActivateAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetActivateBrightness(float brightness)", asMETHODPR(UIFText, SetActivateBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "float GetActivateBrightness() const", asMETHODPR(UIFText, GetActivateBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetUIChildPickOnlyInSizeRange(bool onlyInRange)", asMETHODPR(UIFText, SetUIChildPickOnlyInSizeRange, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsUIChildPickOnlyInSizeRange() const", asMETHODPR(UIFText, IsUIChildPickOnlyInSizeRange, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetWidget(bool isWidget)", asMETHODPR(UIFText, SetWidget, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "bool IsWidget() const", asMETHODPR(UIFText, IsWidget, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetScriptHandler(const string & scriptHandler)", asMETHODPR(UIFText, SetScriptHandler, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "const string & GetScriptHandler() const", asMETHODPR(UIFText, GetScriptHandler, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UIPicBox @+ CreateAddMask()", asMETHODPR(UIFText, CreateAddMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void SetMaskVal(int maskVal)", asMETHODPR(UIFText, SetMaskVal, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "int GetMaskVal() const", asMETHODPR(UIFText, GetMaskVal, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UIPicBox @+ GetMask()", asMETHODPR(UIFText, GetMask, (), UIPicBox * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "void DestoryMask()", asMETHODPR(UIFText, DestoryMask, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UIFText", "UIText @+ GetText()", asMETHODPR(UIFText, GetText, (), UIText * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UIFText_TYPE", (void*)&UIFText::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "Transform LocalTransform", asOFFSET(UIFText, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "Transform WorldTransform", asOFFSET(UIFText, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "bool WorldTransformIsCurrent", asOFFSET(UIFText, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "bool IsSkinCtrlSetWroldTrans", asOFFSET(UIFText, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "Transform BoundWorldTransform", asOFFSET(UIFText, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "Bound WorldBound", asOFFSET(UIFText, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "bool WorldBoundIsCurrent", asOFFSET(UIFText, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("UIFText", "CullingMode Culling", asOFFSET(UIFText, Culling));
	assert(r >= 0);
	// Class: UICanvas
	r = asEngine->RegisterObjectBehaviour("UICanvas", asBEHAVE_FACTORY, "UICanvas @ f()", asFUNCTION(fUICanvas0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UICanvas", asBEHAVE_ADDREF, "void f()", asMETHOD(UICanvas, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("UICanvas", asBEHAVE_RELEASE, "void f()", asMETHOD(UICanvas, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "Canvas@+ opImplCast()", asFUNCTION((RefCast<UICanvas, Canvas>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Canvas", "UICanvas@+ opCast()", asFUNCTION((RefCast<Canvas, UICanvas>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "Object@+ opImplCast()", asFUNCTION((RefCast<UICanvas, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "UICanvas@+ opCast()", asFUNCTION((RefCast<Object, UICanvas>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "RefObject@+ opImplCast()", asFUNCTION((RefCast<UICanvas, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "UICanvas@+ opCast()", asFUNCTION((RefCast<RefObject, UICanvas>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void IncrementReferences()", asMETHODPR(UICanvas, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void DecrementReferences()", asMETHODPR(UICanvas, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "int GetReferences() const", asMETHODPR(UICanvas, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void Enable(bool enable)", asMETHODPR(UICanvas, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsEnable() const", asMETHODPR(UICanvas, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void SetActivate(bool act)", asMETHODPR(UICanvas, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsActivated() const", asMETHODPR(UICanvas, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "const Rtti & GetRttiType() const", asMETHODPR(UICanvas, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "uint16 GetRttiVersion() const", asMETHODPR(UICanvas, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsExactly(const Rtti & type) const", asMETHODPR(UICanvas, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsDerived(const Rtti & type) const", asMETHODPR(UICanvas, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(UICanvas, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(UICanvas, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(UICanvas, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(UICanvas, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "const string & GetResourcePath() const", asMETHODPR(UICanvas, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void SetName(const string & name)", asMETHODPR(UICanvas, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "const string & GetName() const", asMETHODPR(UICanvas, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "Object @+ GetObjectByName(const string & name)", asMETHODPR(UICanvas, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void SetID(int id)", asMETHODPR(UICanvas, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "int GetID() const", asMETHODPR(UICanvas, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "Object @+ GetObjectByID(int id)", asMETHODPR(UICanvas, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void ComeInEventWorld()", asMETHODPR(UICanvas, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "void GoOutEventWorld()", asMETHODPR(UICanvas, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("UICanvas", "bool IsInEventWorld()", asMETHODPR(UICanvas, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti UICanvas_TYPE", (void*)&UICanvas::TYPE); 
	assert(r >= 0);
	// Class: Project
	r = asEngine->RegisterObjectMethod("Project", "void SetScene(Scene @+ scene)", asMETHODPR(Project, SetScene, (Scene * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Project", "Scene @+ GetScene()", asMETHODPR(Project, GetScene, (), Scene * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Project", "const string & GetSceneFilename() const", asMETHODPR(Project, GetSceneFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Project", "void SetUIFrame(UIFrame @+ ui)", asMETHODPR(Project, SetUIFrame, (UIFrame * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Project", "UIFrame @+ GetUIFrame()", asMETHODPR(Project, GetUIFrame, (), UIFrame * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Project", "const string & GetUIFilename() const", asMETHODPR(Project, GetUIFilename, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Scene
	r = asEngine->RegisterObjectBehaviour("Scene", asBEHAVE_FACTORY, "Scene @ f()", asFUNCTION(fScene0), asCALL_CDECL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Scene", asBEHAVE_ADDREF, "void f()", asMETHOD(Scene, IncrementReferences), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectBehaviour("Scene", asBEHAVE_RELEASE, "void f()", asMETHOD(Scene, DecrementReferences), asCALL_THISCALL); 
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Node@+ opImplCast()", asFUNCTION((RefCast<Scene, Node>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Node", "Scene@+ opCast()", asFUNCTION((RefCast<Node, Scene>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Movable@+ opImplCast()", asFUNCTION((RefCast<Scene, Movable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Movable", "Scene@+ opCast()", asFUNCTION((RefCast<Movable, Scene>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Controlledable@+ opImplCast()", asFUNCTION((RefCast<Scene, Controlledable>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Controlledable", "Scene@+ opCast()", asFUNCTION((RefCast<Controlledable, Scene>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Object@+ opImplCast()", asFUNCTION((RefCast<Scene, Object>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Object", "Scene@+ opCast()", asFUNCTION((RefCast<Object, Scene>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "RefObject@+ opImplCast()", asFUNCTION((RefCast<Scene, RefObject>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("RefObject", "Scene@+ opCast()", asFUNCTION((RefCast<RefObject, Scene>)), asCALL_CDECL_OBJLAST);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void IncrementReferences()", asMETHODPR(Scene, IncrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void DecrementReferences()", asMETHODPR(Scene, DecrementReferences, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int GetReferences() const", asMETHODPR(Scene, GetReferences, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void Enable(bool enable)", asMETHODPR(Scene, Enable, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsEnable() const", asMETHODPR(Scene, IsEnable, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetActivate(bool act)", asMETHODPR(Scene, SetActivate, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsActivated() const", asMETHODPR(Scene, IsActivated, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "const Rtti & GetRttiType() const", asMETHODPR(Scene, GetRttiType, () const, const Rtti & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "uint16 GetRttiVersion() const", asMETHODPR(Scene, GetRttiVersion, () const, unsigned short), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsExactly(const Rtti & type) const", asMETHODPR(Scene, IsExactly, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsDerived(const Rtti & type) const", asMETHODPR(Scene, IsDerived, (const Rtti & ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsExactlyTypeOf(const Object @+ object) const", asMETHODPR(Scene, IsExactlyTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsDerivedTypeOf(const Object @+ object) const", asMETHODPR(Scene, IsDerivedTypeOf, (const Object * ) const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetUserDataFloat(const string & name, float val)", asMETHODPR(Scene, SetUserDataFloat, (const std::string & , float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "float GetUserDataFloat(const string & name, bool & isValied) const", asMETHODPR(Scene, GetUserDataFloat, (const std::string & , bool * ) const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "const string & GetResourcePath() const", asMETHODPR(Scene, GetResourcePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetName(const string & name)", asMETHODPR(Scene, SetName, (const std::string & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "const string & GetName() const", asMETHODPR(Scene, GetName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Object @+ GetObjectByName(const string & name)", asMETHODPR(Scene, GetObjectByName, (const std::string & ), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetID(int id)", asMETHODPR(Scene, SetID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int GetID() const", asMETHODPR(Scene, GetID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Object @+ GetObjectByID(int id)", asMETHODPR(Scene, GetObjectByID, (int), Object * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void ComeInEventWorld()", asMETHODPR(Scene, ComeInEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void GoOutEventWorld()", asMETHODPR(Scene, GoOutEventWorld, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsInEventWorld()", asMETHODPR(Scene, IsInEventWorld, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void ResetPlay()", asMETHODPR(Scene, ResetPlay, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void Play()", asMETHODPR(Scene, Play, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsPlaying() const", asMETHODPR(Scene, IsPlaying, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void Stop()", asMETHODPR(Scene, Stop, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void Reset()", asMETHODPR(Scene, Reset, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetSelfCtrled(bool selfCtrled)", asMETHODPR(Scene, SetSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsSelfCtrled() const", asMETHODPR(Scene, IsSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetAutoPlay(bool autoPlay)", asMETHODPR(Scene, SetAutoPlay, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsAutoPlay() const", asMETHODPR(Scene, IsAutoPlay, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int GetNumControllers() const", asMETHODPR(Scene, GetNumControllers, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Controller @+ GetController(int i) const", asMETHODPR(Scene, GetController, (int) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Controller @+ GetControllerByName(const string & name) const", asMETHODPR(Scene, GetControllerByName, (const std::string & ) const, Controller * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool HasController(Controller @+ controller)", asMETHODPR(Scene, HasController, (Controller * ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void AttachController(Controller @+ controller)", asMETHODPR(Scene, AttachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void DetachController(Controller @+ controller)", asMETHODPR(Scene, DetachController, (Controller * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void DetachAllControllers()", asMETHODPR(Scene, DetachAllControllers, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SortControls()", asMETHODPR(Scene, SortControls, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool UpdateControllers(double applicationTime, double elapsedTime)", asMETHODPR(Scene, UpdateControllers, (double, double), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void Show(bool show)", asMETHODPR(Scene, Show, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsShow() const", asMETHODPR(Scene, IsShow, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetColorSelfCtrled(bool selfCtrled)", asMETHODPR(Scene, SetColorSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsColorSelfCtrled() const", asMETHODPR(Scene, IsColorSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetColor(const Float3 & color)", asMETHODPR(Scene, SetColor, (const Float3 & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "const Float3 & GetColor() const", asMETHODPR(Scene, GetColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetAlphaSelfCtrled(bool selfCtrled)", asMETHODPR(Scene, SetAlphaSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsAlphaSelfCtrled() const", asMETHODPR(Scene, IsAlphaSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetAlpha(float alpha)", asMETHODPR(Scene, SetAlpha, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "float GetAlpha() const", asMETHODPR(Scene, GetAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetBrightnessSelfCtrled(bool selfCtrled)", asMETHODPR(Scene, SetBrightnessSelfCtrled, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsBrightnessSelfCtrled() const", asMETHODPR(Scene, IsBrightnessSelfCtrled, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetBrightness(float brightness)", asMETHODPR(Scene, SetBrightness, (float), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "float GetBrightness() const", asMETHODPR(Scene, GetBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "const Float3 & GetLastColor() const", asMETHODPR(Scene, GetLastColor, () const, const Float3 & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "float GetLastAlpha() const", asMETHODPR(Scene, GetLastAlpha, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "float GetLastBrightness() const", asMETHODPR(Scene, GetLastBrightness, () const, float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "Movable @+ GetParent()", asMETHODPR(Scene, GetParent, (), Movable * ), asCALL_THISCALL);
	assert(r >= 0);
					r = asEngine->RegisterObjectMethod("Scene", "int GetNumChildren() const", asMETHODPR(Scene, GetNumChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int GetNumValidChildren() const", asMETHODPR(Scene, GetNumValidChildren, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int AttachChild(Movable @+ child)", asMETHODPR(Scene, AttachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void InsertChild(Movable @+ before, Movable @+ child)", asMETHODPR(Scene, InsertChild, (Movable * , Movable * ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int DetachChild(Movable @+ child)", asMETHODPR(Scene, DetachChild, (Movable * ), int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool DetachChildByName(const string & name)", asMETHODPR(Scene, DetachChildByName, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void DetachAllChildren()", asMETHODPR(Scene, DetachAllChildren, (), void), asCALL_THISCALL);
	assert(r >= 0);
		r = asEngine->RegisterObjectMethod("Scene", "void SetCastShadow(bool castShadow)", asMETHODPR(Scene, SetCastShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetReceiveShadow(bool reciveShadow)", asMETHODPR(Scene, SetReceiveShadow, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetDoPickPriority(bool doPickPriority)", asMETHODPR(Scene, SetDoPickPriority, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsDoPickPriority() const", asMETHODPR(Scene, IsDoPickPriority, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void OnNotPicked(int pickInfo)", asMETHODPR(Scene, OnNotPicked, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetNeedCalUpdateChild(bool needCal)", asMETHODPR(Scene, SetNeedCalUpdateChild, (bool), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "bool IsNeedCalUpdateChild() const", asMETHODPR(Scene, IsNeedCalUpdateChild, () const, bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "void SetAnchorID(int anchorID)", asMETHODPR(Scene, SetAnchorID, (int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Scene", "int GetAnchorID() const", asMETHODPR(Scene, GetAnchorID, () const, int), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterGlobalProperty("Rtti Scene_TYPE", (void*)&Scene::TYPE); 
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "Transform LocalTransform", asOFFSET(Scene, LocalTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "Transform WorldTransform", asOFFSET(Scene, WorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "bool WorldTransformIsCurrent", asOFFSET(Scene, WorldTransformIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "bool IsSkinCtrlSetWroldTrans", asOFFSET(Scene, IsSkinCtrlSetWroldTrans));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "Transform BoundWorldTransform", asOFFSET(Scene, BoundWorldTransform));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "Bound WorldBound", asOFFSET(Scene, WorldBound));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "bool WorldBoundIsCurrent", asOFFSET(Scene, WorldBoundIsCurrent));
	assert(r >= 0);
	r = asEngine->RegisterObjectProperty("Scene", "CullingMode Culling", asOFFSET(Scene, Culling));
	assert(r >= 0);
	// Class: Application
	// Enum: PlayLogicMode
	r = asEngine->RegisterEnum("PlayLogicMode");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayLogicMode", "PLM_SIMPLE", Application::PlayLogicMode::PLM_SIMPLE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayLogicMode", "PLM_LOGIC", Application::PlayLogicMode::PLM_LOGIC);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayLogicMode", "PLM_MAX_MODE", Application::PlayLogicMode::PLM_MAX_MODE);
	assert(r >= 0);
	// Enum: PlayType
	r = asEngine->RegisterEnum("PlayType");
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayType", "PT_NONE", Application::PlayType::PT_NONE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayType", "PT_SIMULATE", Application::PlayType::PT_SIMULATE);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayType", "PT_PLAY", Application::PlayType::PT_PLAY);
	assert(r >= 0);
	r = asEngine->RegisterEnumValue("PlayType", "PT_MAX_TYPE", Application::PlayType::PT_MAX_TYPE);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "float GetElapsedTime()", asMETHODPR(Application, GetElapsedTime, (), float), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void SetScreenSize(const Sizef & screenSize)", asMETHODPR(Application, SetScreenSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "const Sizef & GetScreenSize() const", asMETHODPR(Application, GetScreenSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool LoadBoost(const string & filename)", asMETHODPR(Application, LoadBoost, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "const Sizef & GetBoostSize() const", asMETHODPR(Application, GetBoostSize, () const, const Sizef & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "const string & GetProjectName() const", asMETHODPR(Application, GetProjectName, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "PlayLogicMode GetPlayLogicMode() const", asMETHODPR(Application, GetPlayLogicMode, () const, Application::PlayLogicMode), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "string GetPlayLogicModeStr() const", asMETHODPR(Application, GetPlayLogicModeStr, () const, std::string), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void SetBoostSize(const Sizef & size)", asMETHODPR(Application, SetBoostSize, (const Sizef & ), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void SetPlayLogicMode(PlayLogicMode mode)", asMETHODPR(Application, SetPlayLogicMode, (Application::PlayLogicMode), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool WriteBoost()", asMETHODPR(Application, WriteBoost, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void NewProject(const string & pathname, const string & projName, int so, int width, int height)", asMETHODPR(Application, NewProject, (const std::string & , const std::string & , int, int, int), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool LoadProject(const string & pathname)", asMETHODPR(Application, LoadProject, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool SaveProject()", asMETHODPR(Application, SaveProject, (), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool SaveProjectAs(const string & pathname)", asMETHODPR(Application, SaveProjectAs, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void CloseProject()", asMETHODPR(Application, CloseProject, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "const string & GetProjectFilePath() const", asMETHODPR(Application, GetProjectFilePath, () const, const std::string & ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void NewScene()", asMETHODPR(Application, NewScene, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool LoadScene(const string & pathname)", asMETHODPR(Application, LoadScene, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool SaveScene(const string & pathname)", asMETHODPR(Application, SaveScene, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool SaveSceneAs(const string & pathname)", asMETHODPR(Application, SaveSceneAs, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void CloseScene()", asMETHODPR(Application, CloseScene, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "bool LoadUI(const string & pathname)", asMETHODPR(Application, LoadUI, (const std::string & ), bool), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void CloseUI()", asMETHODPR(Application, CloseUI, (), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "void Play(PlayType type)", asMETHODPR(Application, Play, (Application::PlayType), void), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Application", "PlayType GetPlayType() const", asMETHODPR(Application, GetPlayType, () const, Application::PlayType), asCALL_THISCALL);
	assert(r >= 0);
	// Class: Creater
	r = asEngine->RegisterObjectMethod("Creater", "Node @+ CreateNode()", asMETHODPR(Creater, CreateNode, (), Node * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Creater", "Node @+ CreateNode_Box()", asMETHODPR(Creater, CreateNode_Box, (), Node * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Creater", "CameraNode @+ CreateNode_Camera(bool )", asMETHODPR(Creater, CreateNode_Camera, (bool), CameraNode * ), asCALL_THISCALL);
	assert(r >= 0);
	r = asEngine->RegisterObjectMethod("Creater", "Node @+ CreateNode_Model(const string & filename)", asMETHODPR(Creater, CreateNode_Model, (const std::string & ), Node * ), asCALL_THISCALL);
	assert(r >= 0);

	return 0;
}