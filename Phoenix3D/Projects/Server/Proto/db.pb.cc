// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db_proto {

namespace {

const ::google::protobuf::Descriptor* ADRegAccountC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADRegAccountC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADAuthAccountC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADAuthAccountC_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2eproto() {
  protobuf_AddDesc_db_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db.proto");
  GOOGLE_CHECK(file != NULL);
  ADRegAccountC_descriptor_ = file->message_type(0);
  static const int ADRegAccountC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADRegAccountC, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADRegAccountC, password_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADRegAccountC, clientid_),
  };
  ADRegAccountC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADRegAccountC_descriptor_,
      ADRegAccountC::default_instance_,
      ADRegAccountC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADRegAccountC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADRegAccountC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADRegAccountC));
  ADAuthAccountC_descriptor_ = file->message_type(1);
  static const int ADAuthAccountC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADAuthAccountC, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADAuthAccountC, passworld_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADAuthAccountC, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADAuthAccountC, sessionid_),
  };
  ADAuthAccountC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADAuthAccountC_descriptor_,
      ADAuthAccountC::default_instance_,
      ADAuthAccountC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADAuthAccountC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADAuthAccountC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADAuthAccountC));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADRegAccountC_descriptor_, &ADRegAccountC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADAuthAccountC_descriptor_, &ADAuthAccountC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2eproto() {
  delete ADRegAccountC::default_instance_;
  delete ADRegAccountC_reflection_;
  delete ADAuthAccountC::default_instance_;
  delete ADAuthAccountC_reflection_;
}

void protobuf_AddDesc_db_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010db.proto\022\010db_proto\"I\n\rADRegAccountC\022\020\n"
    "\010username\030\001 \002(\t\022\024\n\014password_md5\030\002 \002(\t\022\020\n"
    "\010clientid\030\003 \002(\005\"^\n\016ADAuthAccountC\022\020\n\010use"
    "rname\030\001 \002(\t\022\025\n\rpassworld_md5\030\002 \002(\t\022\020\n\010cl"
    "ientid\030\003 \002(\005\022\021\n\tsessionid\030\004 \002(\005*C\n\007MsgTy"
    "pe\022\017\n\013DP_RESERVED\020\000\022\022\n\016AD_REG_ACCOUNT\020\001\022"
    "\023\n\017AD_AUTH_ACCOUNT\020\002", 260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db.proto", &protobuf_RegisterTypes);
  ADRegAccountC::default_instance_ = new ADRegAccountC();
  ADAuthAccountC::default_instance_ = new ADAuthAccountC();
  ADRegAccountC::default_instance_->InitAsDefaultInstance();
  ADAuthAccountC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2eproto {
  StaticDescriptorInitializer_db_2eproto() {
    protobuf_AddDesc_db_2eproto();
  }
} static_descriptor_initializer_db_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ADRegAccountC::kUsernameFieldNumber;
const int ADRegAccountC::kPasswordMd5FieldNumber;
const int ADRegAccountC::kClientidFieldNumber;
#endif  // !_MSC_VER

ADRegAccountC::ADRegAccountC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_proto.ADRegAccountC)
}

void ADRegAccountC::InitAsDefaultInstance() {
}

ADRegAccountC::ADRegAccountC(const ADRegAccountC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_proto.ADRegAccountC)
}

void ADRegAccountC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADRegAccountC::~ADRegAccountC() {
  // @@protoc_insertion_point(destructor:db_proto.ADRegAccountC)
  SharedDtor();
}

void ADRegAccountC::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_md5_;
  }
  if (this != default_instance_) {
  }
}

void ADRegAccountC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADRegAccountC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADRegAccountC_descriptor_;
}

const ADRegAccountC& ADRegAccountC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();
  return *default_instance_;
}

ADRegAccountC* ADRegAccountC::default_instance_ = NULL;

ADRegAccountC* ADRegAccountC::New() const {
  return new ADRegAccountC;
}

void ADRegAccountC::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password_md5()) {
      if (password_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_md5_->clear();
      }
    }
    clientid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADRegAccountC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_proto.ADRegAccountC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password_md5;
        break;
      }

      // required string password_md5 = 2;
      case 2: {
        if (tag == 18) {
         parse_password_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password_md5().data(), this->password_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password_md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required int32 clientid = 3;
      case 3: {
        if (tag == 24) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_proto.ADRegAccountC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_proto.ADRegAccountC)
  return false;
#undef DO_
}

void ADRegAccountC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_proto.ADRegAccountC)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string password_md5 = 2;
  if (has_password_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password_md5().data(), this->password_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password_md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password_md5(), output);
  }

  // required int32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_proto.ADRegAccountC)
}

::google::protobuf::uint8* ADRegAccountC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_proto.ADRegAccountC)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password_md5 = 2;
  if (has_password_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password_md5().data(), this->password_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password_md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password_md5(), target);
  }

  // required int32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_proto.ADRegAccountC)
  return target;
}

int ADRegAccountC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password_md5 = 2;
    if (has_password_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_md5());
    }

    // required int32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADRegAccountC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADRegAccountC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADRegAccountC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADRegAccountC::MergeFrom(const ADRegAccountC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password_md5()) {
      set_password_md5(from.password_md5());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADRegAccountC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADRegAccountC::CopyFrom(const ADRegAccountC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADRegAccountC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ADRegAccountC::Swap(ADRegAccountC* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_md5_, other->password_md5_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADRegAccountC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADRegAccountC_descriptor_;
  metadata.reflection = ADRegAccountC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADAuthAccountC::kUsernameFieldNumber;
const int ADAuthAccountC::kPassworldMd5FieldNumber;
const int ADAuthAccountC::kClientidFieldNumber;
const int ADAuthAccountC::kSessionidFieldNumber;
#endif  // !_MSC_VER

ADAuthAccountC::ADAuthAccountC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_proto.ADAuthAccountC)
}

void ADAuthAccountC::InitAsDefaultInstance() {
}

ADAuthAccountC::ADAuthAccountC(const ADAuthAccountC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_proto.ADAuthAccountC)
}

void ADAuthAccountC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passworld_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADAuthAccountC::~ADAuthAccountC() {
  // @@protoc_insertion_point(destructor:db_proto.ADAuthAccountC)
  SharedDtor();
}

void ADAuthAccountC::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (passworld_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passworld_md5_;
  }
  if (this != default_instance_) {
  }
}

void ADAuthAccountC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADAuthAccountC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADAuthAccountC_descriptor_;
}

const ADAuthAccountC& ADAuthAccountC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2eproto();
  return *default_instance_;
}

ADAuthAccountC* ADAuthAccountC::default_instance_ = NULL;

ADAuthAccountC* ADAuthAccountC::New() const {
  return new ADAuthAccountC;
}

void ADAuthAccountC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ADAuthAccountC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(clientid_, sessionid_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_passworld_md5()) {
      if (passworld_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passworld_md5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADAuthAccountC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_proto.ADAuthAccountC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passworld_md5;
        break;
      }

      // required string passworld_md5 = 2;
      case 2: {
        if (tag == 18) {
         parse_passworld_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passworld_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passworld_md5().data(), this->passworld_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passworld_md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required int32 clientid = 3;
      case 3: {
        if (tag == 24) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 4;
      case 4: {
        if (tag == 32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_proto.ADAuthAccountC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_proto.ADAuthAccountC)
  return false;
#undef DO_
}

void ADAuthAccountC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_proto.ADAuthAccountC)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string passworld_md5 = 2;
  if (has_passworld_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passworld_md5().data(), this->passworld_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passworld_md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passworld_md5(), output);
  }

  // required int32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientid(), output);
  }

  // required int32 sessionid = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_proto.ADAuthAccountC)
}

::google::protobuf::uint8* ADAuthAccountC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_proto.ADAuthAccountC)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string passworld_md5 = 2;
  if (has_passworld_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passworld_md5().data(), this->passworld_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passworld_md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passworld_md5(), target);
  }

  // required int32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientid(), target);
  }

  // required int32 sessionid = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_proto.ADAuthAccountC)
  return target;
}

int ADAuthAccountC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string passworld_md5 = 2;
    if (has_passworld_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passworld_md5());
    }

    // required int32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }

    // required int32 sessionid = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADAuthAccountC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADAuthAccountC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADAuthAccountC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADAuthAccountC::MergeFrom(const ADAuthAccountC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_passworld_md5()) {
      set_passworld_md5(from.passworld_md5());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADAuthAccountC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADAuthAccountC::CopyFrom(const ADAuthAccountC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADAuthAccountC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ADAuthAccountC::Swap(ADAuthAccountC* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(passworld_md5_, other->passworld_md5_);
    std::swap(clientid_, other->clientid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADAuthAccountC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADAuthAccountC_descriptor_;
  metadata.reflection = ADAuthAccountC_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db_proto

// @@protoc_insertion_point(global_scope)
