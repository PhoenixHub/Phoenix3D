// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#ifndef PROTOBUF_account_2eproto__INCLUDED
#define PROTOBUF_account_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace account_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_account_2eproto();
void protobuf_AssignDesc_account_2eproto();
void protobuf_ShutdownFile_account_2eproto();

class CSReservedMsg;
class CARegAccountC;
class CARegAccountS;
class CANewAccountC;
class CANewAccountS;
class CAServerListC;
class CAServerDesc;
class CAServerListS;
class CAAuthAccountC;
class CAAuthAccountS;
class GAAuthAccountC;
class GAAuthAccountS;
class GAVerifyBuyC;
class GAVerifyBuyS;
class GABuyNotifyC;
class GABuyNotifyS;
class GAReportStatusC;

enum MsgType {
  AP_RESERVED = 0,
  CA_REG_ACCOUNT = 1,
  CA_NEW_ACCOUNT = 2,
  CA_SERVER_LIST = 3,
  CA_AUTH_ACCOUNT = 4,
  GA_AUTH_ACCOUNT = 5,
  GA_VERIFY_BUY = 9,
  GA_REPORT_STATUS = 10,
  GA_BUY_NOTIFY = 11
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = AP_RESERVED;
const MsgType MsgType_MAX = GA_BUY_NOTIFY;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum CAResult {
  RE_OK = 0,
  RE_REG_ACCOUNT_EXIST = 1,
  RE_AUTH_NOACCOUNT = 2,
  RE_AUTH_WRONG_PWD = 3,
  RE_AUTH_LOCKED = 4,
  RE_ACCOUNT_ILLEGAL = 5,
  RE_DATA_WRONG = 99,
  RE_CONN_OUTSERVER = 100
};
bool CAResult_IsValid(int value);
const CAResult CAResult_MIN = RE_OK;
const CAResult CAResult_MAX = RE_CONN_OUTSERVER;
const int CAResult_ARRAYSIZE = CAResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CAResult_descriptor();
inline const ::std::string& CAResult_Name(CAResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CAResult_descriptor(), value);
}
inline bool CAResult_Parse(
    const ::std::string& name, CAResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CAResult>(
    CAResult_descriptor(), name, value);
}
enum AccountPlatform {
  ACCOUNT_DEFALUT = 0,
  ACCOUNT_360 = 1,
  ACCOUNT_91 = 2
};
bool AccountPlatform_IsValid(int value);
const AccountPlatform AccountPlatform_MIN = ACCOUNT_DEFALUT;
const AccountPlatform AccountPlatform_MAX = ACCOUNT_91;
const int AccountPlatform_ARRAYSIZE = AccountPlatform_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountPlatform_descriptor();
inline const ::std::string& AccountPlatform_Name(AccountPlatform value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountPlatform_descriptor(), value);
}
inline bool AccountPlatform_Parse(
    const ::std::string& name, AccountPlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountPlatform>(
    AccountPlatform_descriptor(), name, value);
}
enum PayPlatform {
  PAY_DEFAULT = 0,
  PAY_IOS_STORE = 1,
  PAY_GOOGLE_STORE = 2,
  PAY_91 = 3
};
bool PayPlatform_IsValid(int value);
const PayPlatform PayPlatform_MIN = PAY_DEFAULT;
const PayPlatform PayPlatform_MAX = PAY_91;
const int PayPlatform_ARRAYSIZE = PayPlatform_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayPlatform_descriptor();
inline const ::std::string& PayPlatform_Name(PayPlatform value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayPlatform_descriptor(), value);
}
inline bool PayPlatform_Parse(
    const ::std::string& name, PayPlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayPlatform>(
    PayPlatform_descriptor(), name, value);
}
enum ServerGroupType {
  SVGROUP_DEFAULT = 0,
  SVGROUP_HONGKONG = 1
};
bool ServerGroupType_IsValid(int value);
const ServerGroupType ServerGroupType_MIN = SVGROUP_DEFAULT;
const ServerGroupType ServerGroupType_MAX = SVGROUP_HONGKONG;
const int ServerGroupType_ARRAYSIZE = ServerGroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerGroupType_descriptor();
inline const ::std::string& ServerGroupType_Name(ServerGroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerGroupType_descriptor(), value);
}
inline bool ServerGroupType_Parse(
    const ::std::string& name, ServerGroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerGroupType>(
    ServerGroupType_descriptor(), name, value);
}
// ===================================================================

class CSReservedMsg : public ::google::protobuf::Message {
 public:
  CSReservedMsg();
  virtual ~CSReservedMsg();

  CSReservedMsg(const CSReservedMsg& from);

  inline CSReservedMsg& operator=(const CSReservedMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSReservedMsg& default_instance();

  void Swap(CSReservedMsg* other);

  // implements Message ----------------------------------------------

  CSReservedMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSReservedMsg& from);
  void MergeFrom(const CSReservedMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reserved = 1;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 1;
  inline ::google::protobuf::int32 reserved() const;
  inline void set_reserved(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:account_proto.CSReservedMsg)
 private:
  inline void set_has_reserved();
  inline void clear_has_reserved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 reserved_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CSReservedMsg* default_instance_;
};
// -------------------------------------------------------------------

class CARegAccountC : public ::google::protobuf::Message {
 public:
  CARegAccountC();
  virtual ~CARegAccountC();

  CARegAccountC(const CARegAccountC& from);

  inline CARegAccountC& operator=(const CARegAccountC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CARegAccountC& default_instance();

  void Swap(CARegAccountC* other);

  // implements Message ----------------------------------------------

  CARegAccountC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CARegAccountC& from);
  void MergeFrom(const CARegAccountC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string passwd_md5 = 2;
  inline bool has_passwd_md5() const;
  inline void clear_passwd_md5();
  static const int kPasswdMd5FieldNumber = 2;
  inline const ::std::string& passwd_md5() const;
  inline void set_passwd_md5(const ::std::string& value);
  inline void set_passwd_md5(const char* value);
  inline void set_passwd_md5(const char* value, size_t size);
  inline ::std::string* mutable_passwd_md5();
  inline ::std::string* release_passwd_md5();
  inline void set_allocated_passwd_md5(::std::string* passwd_md5);

  // optional string mail = 3;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 3;
  inline const ::std::string& mail() const;
  inline void set_mail(const ::std::string& value);
  inline void set_mail(const char* value);
  inline void set_mail(const char* value, size_t size);
  inline ::std::string* mutable_mail();
  inline ::std::string* release_mail();
  inline void set_allocated_mail(::std::string* mail);

  // optional string mobile = 4;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 4;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // @@protoc_insertion_point(class_scope:account_proto.CARegAccountC)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passwd_md5();
  inline void clear_has_passwd_md5();
  inline void set_has_mail();
  inline void clear_has_mail();
  inline void set_has_mobile();
  inline void clear_has_mobile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* passwd_md5_;
  ::std::string* mail_;
  ::std::string* mobile_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CARegAccountC* default_instance_;
};
// -------------------------------------------------------------------

class CARegAccountS : public ::google::protobuf::Message {
 public:
  CARegAccountS();
  virtual ~CARegAccountS();

  CARegAccountS(const CARegAccountS& from);

  inline CARegAccountS& operator=(const CARegAccountS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CARegAccountS& default_instance();

  void Swap(CARegAccountS* other);

  // implements Message ----------------------------------------------

  CARegAccountS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CARegAccountS& from);
  void MergeFrom(const CARegAccountS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:account_proto.CARegAccountS)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uin();
  inline void clear_has_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 uin_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CARegAccountS* default_instance_;
};
// -------------------------------------------------------------------

class CANewAccountC : public ::google::protobuf::Message {
 public:
  CANewAccountC();
  virtual ~CANewAccountC();

  CANewAccountC(const CANewAccountC& from);

  inline CANewAccountC& operator=(const CANewAccountC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CANewAccountC& default_instance();

  void Swap(CANewAccountC* other);

  // implements Message ----------------------------------------------

  CANewAccountC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CANewAccountC& from);
  void MergeFrom(const CANewAccountC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:account_proto.CANewAccountC)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_id_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CANewAccountC* default_instance_;
};
// -------------------------------------------------------------------

class CANewAccountS : public ::google::protobuf::Message {
 public:
  CANewAccountS();
  virtual ~CANewAccountS();

  CANewAccountS(const CANewAccountS& from);

  inline CANewAccountS& operator=(const CANewAccountS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CANewAccountS& default_instance();

  void Swap(CANewAccountS* other);

  // implements Message ----------------------------------------------

  CANewAccountS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CANewAccountS& from);
  void MergeFrom(const CANewAccountS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional string passwd_md5 = 3;
  inline bool has_passwd_md5() const;
  inline void clear_passwd_md5();
  static const int kPasswdMd5FieldNumber = 3;
  inline const ::std::string& passwd_md5() const;
  inline void set_passwd_md5(const ::std::string& value);
  inline void set_passwd_md5(const char* value);
  inline void set_passwd_md5(const char* value, size_t size);
  inline ::std::string* mutable_passwd_md5();
  inline ::std::string* release_passwd_md5();
  inline void set_allocated_passwd_md5(::std::string* passwd_md5);

  // @@protoc_insertion_point(class_scope:account_proto.CANewAccountS)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_passwd_md5();
  inline void clear_has_passwd_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 uin_;
  ::std::string* passwd_md5_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CANewAccountS* default_instance_;
};
// -------------------------------------------------------------------

class CAServerListC : public ::google::protobuf::Message {
 public:
  CAServerListC();
  virtual ~CAServerListC();

  CAServerListC(const CAServerListC& from);

  inline CAServerListC& operator=(const CAServerListC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAServerListC& default_instance();

  void Swap(CAServerListC* other);

  // implements Message ----------------------------------------------

  CAServerListC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAServerListC& from);
  void MergeFrom(const CAServerListC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required int32 svgroup = 2;
  inline bool has_svgroup() const;
  inline void clear_svgroup();
  static const int kSvgroupFieldNumber = 2;
  inline ::google::protobuf::int32 svgroup() const;
  inline void set_svgroup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:account_proto.CAServerListC)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_svgroup();
  inline void clear_has_svgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 svgroup_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CAServerListC* default_instance_;
};
// -------------------------------------------------------------------

class CAServerDesc : public ::google::protobuf::Message {
 public:
  CAServerDesc();
  virtual ~CAServerDesc();

  CAServerDesc(const CAServerDesc& from);

  inline CAServerDesc& operator=(const CAServerDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAServerDesc& default_instance();

  void Swap(CAServerDesc* other);

  // implements Message ----------------------------------------------

  CAServerDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAServerDesc& from);
  void MergeFrom(const CAServerDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string addr = 4;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 4;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // optional int32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:account_proto.CAServerDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::std::string* name_;
  ::std::string* addr_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CAServerDesc* default_instance_;
};
// -------------------------------------------------------------------

class CAServerListS : public ::google::protobuf::Message {
 public:
  CAServerListS();
  virtual ~CAServerListS();

  CAServerListS(const CAServerListS& from);

  inline CAServerListS& operator=(const CAServerListS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAServerListS& default_instance();

  void Swap(CAServerListS* other);

  // implements Message ----------------------------------------------

  CAServerListS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAServerListS& from);
  void MergeFrom(const CAServerListS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // repeated .account_proto.CAServerDesc desc_array = 2;
  inline int desc_array_size() const;
  inline void clear_desc_array();
  static const int kDescArrayFieldNumber = 2;
  inline const ::account_proto::CAServerDesc& desc_array(int index) const;
  inline ::account_proto::CAServerDesc* mutable_desc_array(int index);
  inline ::account_proto::CAServerDesc* add_desc_array();
  inline const ::google::protobuf::RepeatedPtrField< ::account_proto::CAServerDesc >&
      desc_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::account_proto::CAServerDesc >*
      mutable_desc_array();

  // @@protoc_insertion_point(class_scope:account_proto.CAServerListS)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::account_proto::CAServerDesc > desc_array_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CAServerListS* default_instance_;
};
// -------------------------------------------------------------------

class CAAuthAccountC : public ::google::protobuf::Message {
 public:
  CAAuthAccountC();
  virtual ~CAAuthAccountC();

  CAAuthAccountC(const CAAuthAccountC& from);

  inline CAAuthAccountC& operator=(const CAAuthAccountC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAAuthAccountC& default_instance();

  void Swap(CAAuthAccountC* other);

  // implements Message ----------------------------------------------

  CAAuthAccountC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAAuthAccountC& from);
  void MergeFrom(const CAAuthAccountC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .account_proto.AccountPlatform platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline ::account_proto::AccountPlatform platform() const;
  inline void set_platform(::account_proto::AccountPlatform value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 uin = 3;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 3;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional string passwd_md5 = 4;
  inline bool has_passwd_md5() const;
  inline void clear_passwd_md5();
  static const int kPasswdMd5FieldNumber = 4;
  inline const ::std::string& passwd_md5() const;
  inline void set_passwd_md5(const ::std::string& value);
  inline void set_passwd_md5(const char* value);
  inline void set_passwd_md5(const char* value, size_t size);
  inline ::std::string* mutable_passwd_md5();
  inline ::std::string* release_passwd_md5();
  inline void set_allocated_passwd_md5(::std::string* passwd_md5);

  // optional uint32 cpid = 5;
  inline bool has_cpid() const;
  inline void clear_cpid();
  static const int kCpidFieldNumber = 5;
  inline ::google::protobuf::uint32 cpid() const;
  inline void set_cpid(::google::protobuf::uint32 value);

  // optional uint32 appid = 6;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 6;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional string sid = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 7;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // @@protoc_insertion_point(class_scope:account_proto.CAAuthAccountC)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_passwd_md5();
  inline void clear_has_passwd_md5();
  inline void set_has_cpid();
  inline void clear_has_cpid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_sid();
  inline void clear_has_sid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int platform_;
  ::google::protobuf::uint32 uin_;
  ::std::string* passwd_md5_;
  ::google::protobuf::uint32 cpid_;
  ::google::protobuf::uint32 appid_;
  ::std::string* sid_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CAAuthAccountC* default_instance_;
};
// -------------------------------------------------------------------

class CAAuthAccountS : public ::google::protobuf::Message {
 public:
  CAAuthAccountS();
  virtual ~CAAuthAccountS();

  CAAuthAccountS(const CAAuthAccountS& from);

  inline CAAuthAccountS& operator=(const CAAuthAccountS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAAuthAccountS& default_instance();

  void Swap(CAAuthAccountS* other);

  // implements Message ----------------------------------------------

  CAAuthAccountS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAAuthAccountS& from);
  void MergeFrom(const CAAuthAccountS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // optional uint32 uin = 3;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 3;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:account_proto.CAAuthAccountS)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_uin();
  inline void clear_has_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 uin_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static CAAuthAccountS* default_instance_;
};
// -------------------------------------------------------------------

class GAAuthAccountC : public ::google::protobuf::Message {
 public:
  GAAuthAccountC();
  virtual ~GAAuthAccountC();

  GAAuthAccountC(const GAAuthAccountC& from);

  inline GAAuthAccountC& operator=(const GAAuthAccountC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GAAuthAccountC& default_instance();

  void Swap(GAAuthAccountC* other);

  // implements Message ----------------------------------------------

  GAAuthAccountC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GAAuthAccountC& from);
  void MergeFrom(const GAAuthAccountC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // required string sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required uint32 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:account_proto.GAAuthAccountC)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sid_;
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 clientid_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GAAuthAccountC* default_instance_;
};
// -------------------------------------------------------------------

class GAAuthAccountS : public ::google::protobuf::Message {
 public:
  GAAuthAccountS();
  virtual ~GAAuthAccountS();

  GAAuthAccountS(const GAAuthAccountS& from);

  inline GAAuthAccountS& operator=(const GAAuthAccountS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GAAuthAccountS& default_instance();

  void Swap(GAAuthAccountS* other);

  // implements Message ----------------------------------------------

  GAAuthAccountS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GAAuthAccountS& from);
  void MergeFrom(const GAAuthAccountS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint32 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required uint32 uin = 4;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 4;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:account_proto.GAAuthAccountS)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 clientid_;
  ::std::string* info_;
  ::google::protobuf::uint32 uin_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GAAuthAccountS* default_instance_;
};
// -------------------------------------------------------------------

class GAVerifyBuyC : public ::google::protobuf::Message {
 public:
  GAVerifyBuyC();
  virtual ~GAVerifyBuyC();

  GAVerifyBuyC(const GAVerifyBuyC& from);

  inline GAVerifyBuyC& operator=(const GAVerifyBuyC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GAVerifyBuyC& default_instance();

  void Swap(GAVerifyBuyC* other);

  // implements Message ----------------------------------------------

  GAVerifyBuyC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GAVerifyBuyC& from);
  void MergeFrom(const GAVerifyBuyC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // required uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // required string itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline const ::std::string& itemid() const;
  inline void set_itemid(const ::std::string& value);
  inline void set_itemid(const char* value);
  inline void set_itemid(const char* value, size_t size);
  inline ::std::string* mutable_itemid();
  inline ::std::string* release_itemid();
  inline void set_allocated_itemid(::std::string* itemid);

  // required string receipt = 4;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 4;
  inline const ::std::string& receipt() const;
  inline void set_receipt(const ::std::string& value);
  inline void set_receipt(const char* value);
  inline void set_receipt(const char* value, size_t size);
  inline ::std::string* mutable_receipt();
  inline ::std::string* release_receipt();
  inline void set_allocated_receipt(::std::string* receipt);

  // required int32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:account_proto.GAVerifyBuyC)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_receipt();
  inline void clear_has_receipt();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 platform_;
  ::google::protobuf::uint32 uin_;
  ::std::string* itemid_;
  ::std::string* receipt_;
  ::google::protobuf::int32 price_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GAVerifyBuyC* default_instance_;
};
// -------------------------------------------------------------------

class GAVerifyBuyS : public ::google::protobuf::Message {
 public:
  GAVerifyBuyS();
  virtual ~GAVerifyBuyS();

  GAVerifyBuyS(const GAVerifyBuyS& from);

  inline GAVerifyBuyS& operator=(const GAVerifyBuyS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GAVerifyBuyS& default_instance();

  void Swap(GAVerifyBuyS* other);

  // implements Message ----------------------------------------------

  GAVerifyBuyS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GAVerifyBuyS& from);
  void MergeFrom(const GAVerifyBuyS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // required string itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline const ::std::string& itemid() const;
  inline void set_itemid(const ::std::string& value);
  inline void set_itemid(const char* value);
  inline void set_itemid(const char* value, size_t size);
  inline ::std::string* mutable_itemid();
  inline ::std::string* release_itemid();
  inline void set_allocated_itemid(::std::string* itemid);

  // required string receipt = 4;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 4;
  inline const ::std::string& receipt() const;
  inline void set_receipt(const ::std::string& value);
  inline void set_receipt(const char* value);
  inline void set_receipt(const char* value, size_t size);
  inline ::std::string* mutable_receipt();
  inline ::std::string* release_receipt();
  inline void set_allocated_receipt(::std::string* receipt);

  // @@protoc_insertion_point(class_scope:account_proto.GAVerifyBuyS)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_receipt();
  inline void clear_has_receipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 uin_;
  ::std::string* itemid_;
  ::std::string* receipt_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GAVerifyBuyS* default_instance_;
};
// -------------------------------------------------------------------

class GABuyNotifyC : public ::google::protobuf::Message {
 public:
  GABuyNotifyC();
  virtual ~GABuyNotifyC();

  GABuyNotifyC(const GABuyNotifyC& from);

  inline GABuyNotifyC& operator=(const GABuyNotifyC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GABuyNotifyC& default_instance();

  void Swap(GABuyNotifyC* other);

  // implements Message ----------------------------------------------

  GABuyNotifyC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GABuyNotifyC& from);
  void MergeFrom(const GABuyNotifyC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .account_proto.PayPlatform platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline ::account_proto::PayPlatform platform() const;
  inline void set_platform(::account_proto::PayPlatform value);

  // required uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // required string itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline const ::std::string& itemid() const;
  inline void set_itemid(const ::std::string& value);
  inline void set_itemid(const char* value);
  inline void set_itemid(const char* value, size_t size);
  inline ::std::string* mutable_itemid();
  inline ::std::string* release_itemid();
  inline void set_allocated_itemid(::std::string* itemid);

  // required string receipt = 4;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 4;
  inline const ::std::string& receipt() const;
  inline void set_receipt(const ::std::string& value);
  inline void set_receipt(const char* value);
  inline void set_receipt(const char* value, size_t size);
  inline ::std::string* mutable_receipt();
  inline ::std::string* release_receipt();
  inline void set_allocated_receipt(::std::string* receipt);

  // required int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:account_proto.GABuyNotifyC)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_receipt();
  inline void clear_has_receipt();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int platform_;
  ::google::protobuf::uint32 uin_;
  ::std::string* itemid_;
  ::std::string* receipt_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 money_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GABuyNotifyC* default_instance_;
};
// -------------------------------------------------------------------

class GABuyNotifyS : public ::google::protobuf::Message {
 public:
  GABuyNotifyS();
  virtual ~GABuyNotifyS();

  GABuyNotifyS(const GABuyNotifyS& from);

  inline GABuyNotifyS& operator=(const GABuyNotifyS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GABuyNotifyS& default_instance();

  void Swap(GABuyNotifyS* other);

  // implements Message ----------------------------------------------

  GABuyNotifyS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GABuyNotifyS& from);
  void MergeFrom(const GABuyNotifyS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string receipt = 2;
  inline bool has_receipt() const;
  inline void clear_receipt();
  static const int kReceiptFieldNumber = 2;
  inline const ::std::string& receipt() const;
  inline void set_receipt(const ::std::string& value);
  inline void set_receipt(const char* value);
  inline void set_receipt(const char* value, size_t size);
  inline ::std::string* mutable_receipt();
  inline ::std::string* release_receipt();
  inline void set_allocated_receipt(::std::string* receipt);

  // @@protoc_insertion_point(class_scope:account_proto.GABuyNotifyS)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_receipt();
  inline void clear_has_receipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* receipt_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GABuyNotifyS* default_instance_;
};
// -------------------------------------------------------------------

class GAReportStatusC : public ::google::protobuf::Message {
 public:
  GAReportStatusC();
  virtual ~GAReportStatusC();

  GAReportStatusC(const GAReportStatusC& from);

  inline GAReportStatusC& operator=(const GAReportStatusC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GAReportStatusC& default_instance();

  void Swap(GAReportStatusC* other);

  // implements Message ----------------------------------------------

  GAReportStatusC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GAReportStatusC& from);
  void MergeFrom(const GAReportStatusC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nconn = 1;
  inline bool has_nconn() const;
  inline void clear_nconn();
  static const int kNconnFieldNumber = 1;
  inline ::google::protobuf::int32 nconn() const;
  inline void set_nconn(::google::protobuf::int32 value);

  // required int32 nlogin = 2;
  inline bool has_nlogin() const;
  inline void clear_nlogin();
  static const int kNloginFieldNumber = 2;
  inline ::google::protobuf::int32 nlogin() const;
  inline void set_nlogin(::google::protobuf::int32 value);

  // required uint32 servertime = 3;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 3;
  inline ::google::protobuf::uint32 servertime() const;
  inline void set_servertime(::google::protobuf::uint32 value);

  // required int32 memory = 4;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 4;
  inline ::google::protobuf::int32 memory() const;
  inline void set_memory(::google::protobuf::int32 value);

  // required int32 cpu = 5;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 5;
  inline ::google::protobuf::int32 cpu() const;
  inline void set_cpu(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:account_proto.GAReportStatusC)
 private:
  inline void set_has_nconn();
  inline void clear_has_nconn();
  inline void set_has_nlogin();
  inline void clear_has_nlogin();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_memory();
  inline void clear_has_memory();
  inline void set_has_cpu();
  inline void clear_has_cpu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nconn_;
  ::google::protobuf::int32 nlogin_;
  ::google::protobuf::uint32 servertime_;
  ::google::protobuf::int32 memory_;
  ::google::protobuf::int32 cpu_;
  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static GAReportStatusC* default_instance_;
};
// ===================================================================


// ===================================================================

// CSReservedMsg

// required int32 reserved = 1;
inline bool CSReservedMsg::has_reserved() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSReservedMsg::set_has_reserved() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSReservedMsg::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSReservedMsg::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
inline ::google::protobuf::int32 CSReservedMsg::reserved() const {
  // @@protoc_insertion_point(field_get:account_proto.CSReservedMsg.reserved)
  return reserved_;
}
inline void CSReservedMsg::set_reserved(::google::protobuf::int32 value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CSReservedMsg.reserved)
}

// -------------------------------------------------------------------

// CARegAccountC

// required string name = 1;
inline bool CARegAccountC::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CARegAccountC::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CARegAccountC::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CARegAccountC::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CARegAccountC::name() const {
  // @@protoc_insertion_point(field_get:account_proto.CARegAccountC.name)
  return *name_;
}
inline void CARegAccountC::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CARegAccountC.name)
}
inline void CARegAccountC::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CARegAccountC.name)
}
inline void CARegAccountC::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CARegAccountC.name)
}
inline ::std::string* CARegAccountC::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CARegAccountC.name)
  return name_;
}
inline ::std::string* CARegAccountC::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CARegAccountC::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CARegAccountC.name)
}

// required string passwd_md5 = 2;
inline bool CARegAccountC::has_passwd_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CARegAccountC::set_has_passwd_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CARegAccountC::clear_has_passwd_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CARegAccountC::clear_passwd_md5() {
  if (passwd_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_->clear();
  }
  clear_has_passwd_md5();
}
inline const ::std::string& CARegAccountC::passwd_md5() const {
  // @@protoc_insertion_point(field_get:account_proto.CARegAccountC.passwd_md5)
  return *passwd_md5_;
}
inline void CARegAccountC::set_passwd_md5(const ::std::string& value) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CARegAccountC.passwd_md5)
}
inline void CARegAccountC::set_passwd_md5(const char* value) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CARegAccountC.passwd_md5)
}
inline void CARegAccountC::set_passwd_md5(const char* value, size_t size) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CARegAccountC.passwd_md5)
}
inline ::std::string* CARegAccountC::mutable_passwd_md5() {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CARegAccountC.passwd_md5)
  return passwd_md5_;
}
inline ::std::string* CARegAccountC::release_passwd_md5() {
  clear_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_md5_;
    passwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CARegAccountC::set_allocated_passwd_md5(::std::string* passwd_md5) {
  if (passwd_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_md5_;
  }
  if (passwd_md5) {
    set_has_passwd_md5();
    passwd_md5_ = passwd_md5;
  } else {
    clear_has_passwd_md5();
    passwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CARegAccountC.passwd_md5)
}

// optional string mail = 3;
inline bool CARegAccountC::has_mail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CARegAccountC::set_has_mail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CARegAccountC::clear_has_mail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CARegAccountC::clear_mail() {
  if (mail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mail_->clear();
  }
  clear_has_mail();
}
inline const ::std::string& CARegAccountC::mail() const {
  // @@protoc_insertion_point(field_get:account_proto.CARegAccountC.mail)
  return *mail_;
}
inline void CARegAccountC::set_mail(const ::std::string& value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CARegAccountC.mail)
}
inline void CARegAccountC::set_mail(const char* value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CARegAccountC.mail)
}
inline void CARegAccountC::set_mail(const char* value, size_t size) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mail_ = new ::std::string;
  }
  mail_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CARegAccountC.mail)
}
inline ::std::string* CARegAccountC::mutable_mail() {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mail_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CARegAccountC.mail)
  return mail_;
}
inline ::std::string* CARegAccountC::release_mail() {
  clear_has_mail();
  if (mail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mail_;
    mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CARegAccountC::set_allocated_mail(::std::string* mail) {
  if (mail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mail_;
  }
  if (mail) {
    set_has_mail();
    mail_ = mail;
  } else {
    clear_has_mail();
    mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CARegAccountC.mail)
}

// optional string mobile = 4;
inline bool CARegAccountC::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CARegAccountC::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CARegAccountC::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CARegAccountC::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& CARegAccountC::mobile() const {
  // @@protoc_insertion_point(field_get:account_proto.CARegAccountC.mobile)
  return *mobile_;
}
inline void CARegAccountC::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CARegAccountC.mobile)
}
inline void CARegAccountC::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CARegAccountC.mobile)
}
inline void CARegAccountC::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CARegAccountC.mobile)
}
inline ::std::string* CARegAccountC::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CARegAccountC.mobile)
  return mobile_;
}
inline ::std::string* CARegAccountC::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CARegAccountC::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CARegAccountC.mobile)
}

// -------------------------------------------------------------------

// CARegAccountS

// required int32 result = 1;
inline bool CARegAccountS::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CARegAccountS::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CARegAccountS::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CARegAccountS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CARegAccountS::result() const {
  // @@protoc_insertion_point(field_get:account_proto.CARegAccountS.result)
  return result_;
}
inline void CARegAccountS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CARegAccountS.result)
}

// optional uint32 uin = 2;
inline bool CARegAccountS::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CARegAccountS::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CARegAccountS::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CARegAccountS::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 CARegAccountS::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.CARegAccountS.uin)
  return uin_;
}
inline void CARegAccountS::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CARegAccountS.uin)
}

// -------------------------------------------------------------------

// CANewAccountC

// required string device_id = 1;
inline bool CANewAccountC::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CANewAccountC::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CANewAccountC::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CANewAccountC::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& CANewAccountC::device_id() const {
  // @@protoc_insertion_point(field_get:account_proto.CANewAccountC.device_id)
  return *device_id_;
}
inline void CANewAccountC::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CANewAccountC.device_id)
}
inline void CANewAccountC::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CANewAccountC.device_id)
}
inline void CANewAccountC::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CANewAccountC.device_id)
}
inline ::std::string* CANewAccountC::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CANewAccountC.device_id)
  return device_id_;
}
inline ::std::string* CANewAccountC::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CANewAccountC::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CANewAccountC.device_id)
}

// -------------------------------------------------------------------

// CANewAccountS

// required int32 result = 1;
inline bool CANewAccountS::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CANewAccountS::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CANewAccountS::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CANewAccountS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CANewAccountS::result() const {
  // @@protoc_insertion_point(field_get:account_proto.CANewAccountS.result)
  return result_;
}
inline void CANewAccountS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CANewAccountS.result)
}

// optional uint32 uin = 2;
inline bool CANewAccountS::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CANewAccountS::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CANewAccountS::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CANewAccountS::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 CANewAccountS::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.CANewAccountS.uin)
  return uin_;
}
inline void CANewAccountS::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CANewAccountS.uin)
}

// optional string passwd_md5 = 3;
inline bool CANewAccountS::has_passwd_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CANewAccountS::set_has_passwd_md5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CANewAccountS::clear_has_passwd_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CANewAccountS::clear_passwd_md5() {
  if (passwd_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_->clear();
  }
  clear_has_passwd_md5();
}
inline const ::std::string& CANewAccountS::passwd_md5() const {
  // @@protoc_insertion_point(field_get:account_proto.CANewAccountS.passwd_md5)
  return *passwd_md5_;
}
inline void CANewAccountS::set_passwd_md5(const ::std::string& value) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CANewAccountS.passwd_md5)
}
inline void CANewAccountS::set_passwd_md5(const char* value) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CANewAccountS.passwd_md5)
}
inline void CANewAccountS::set_passwd_md5(const char* value, size_t size) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CANewAccountS.passwd_md5)
}
inline ::std::string* CANewAccountS::mutable_passwd_md5() {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CANewAccountS.passwd_md5)
  return passwd_md5_;
}
inline ::std::string* CANewAccountS::release_passwd_md5() {
  clear_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_md5_;
    passwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CANewAccountS::set_allocated_passwd_md5(::std::string* passwd_md5) {
  if (passwd_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_md5_;
  }
  if (passwd_md5) {
    set_has_passwd_md5();
    passwd_md5_ = passwd_md5;
  } else {
    clear_has_passwd_md5();
    passwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CANewAccountS.passwd_md5)
}

// -------------------------------------------------------------------

// CAServerListC

// required int32 version = 1;
inline bool CAServerListC::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAServerListC::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAServerListC::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAServerListC::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CAServerListC::version() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerListC.version)
  return version_;
}
inline void CAServerListC::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAServerListC.version)
}

// required int32 svgroup = 2;
inline bool CAServerListC::has_svgroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAServerListC::set_has_svgroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAServerListC::clear_has_svgroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAServerListC::clear_svgroup() {
  svgroup_ = 0;
  clear_has_svgroup();
}
inline ::google::protobuf::int32 CAServerListC::svgroup() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerListC.svgroup)
  return svgroup_;
}
inline void CAServerListC::set_svgroup(::google::protobuf::int32 value) {
  set_has_svgroup();
  svgroup_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAServerListC.svgroup)
}

// -------------------------------------------------------------------

// CAServerDesc

// required int32 id = 1;
inline bool CAServerDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAServerDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAServerDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAServerDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CAServerDesc::id() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerDesc.id)
  return id_;
}
inline void CAServerDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAServerDesc.id)
}

// required int32 status = 2;
inline bool CAServerDesc::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAServerDesc::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAServerDesc::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAServerDesc::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 CAServerDesc::status() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerDesc.status)
  return status_;
}
inline void CAServerDesc::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAServerDesc.status)
}

// optional string name = 3;
inline bool CAServerDesc::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAServerDesc::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAServerDesc::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAServerDesc::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CAServerDesc::name() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerDesc.name)
  return *name_;
}
inline void CAServerDesc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CAServerDesc.name)
}
inline void CAServerDesc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CAServerDesc.name)
}
inline void CAServerDesc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CAServerDesc.name)
}
inline ::std::string* CAServerDesc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CAServerDesc.name)
  return name_;
}
inline ::std::string* CAServerDesc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAServerDesc::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CAServerDesc.name)
}

// optional string addr = 4;
inline bool CAServerDesc::has_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAServerDesc::set_has_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAServerDesc::clear_has_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAServerDesc::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& CAServerDesc::addr() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerDesc.addr)
  return *addr_;
}
inline void CAServerDesc::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CAServerDesc.addr)
}
inline void CAServerDesc::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CAServerDesc.addr)
}
inline void CAServerDesc::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CAServerDesc.addr)
}
inline ::std::string* CAServerDesc::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CAServerDesc.addr)
  return addr_;
}
inline ::std::string* CAServerDesc::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAServerDesc::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CAServerDesc.addr)
}

// optional int32 port = 5;
inline bool CAServerDesc::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAServerDesc::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAServerDesc::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAServerDesc::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CAServerDesc::port() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerDesc.port)
  return port_;
}
inline void CAServerDesc::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAServerDesc.port)
}

// -------------------------------------------------------------------

// CAServerListS

// required int32 version = 1;
inline bool CAServerListS::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAServerListS::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAServerListS::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAServerListS::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 CAServerListS::version() const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerListS.version)
  return version_;
}
inline void CAServerListS::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAServerListS.version)
}

// repeated .account_proto.CAServerDesc desc_array = 2;
inline int CAServerListS::desc_array_size() const {
  return desc_array_.size();
}
inline void CAServerListS::clear_desc_array() {
  desc_array_.Clear();
}
inline const ::account_proto::CAServerDesc& CAServerListS::desc_array(int index) const {
  // @@protoc_insertion_point(field_get:account_proto.CAServerListS.desc_array)
  return desc_array_.Get(index);
}
inline ::account_proto::CAServerDesc* CAServerListS::mutable_desc_array(int index) {
  // @@protoc_insertion_point(field_mutable:account_proto.CAServerListS.desc_array)
  return desc_array_.Mutable(index);
}
inline ::account_proto::CAServerDesc* CAServerListS::add_desc_array() {
  // @@protoc_insertion_point(field_add:account_proto.CAServerListS.desc_array)
  return desc_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::account_proto::CAServerDesc >&
CAServerListS::desc_array() const {
  // @@protoc_insertion_point(field_list:account_proto.CAServerListS.desc_array)
  return desc_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::account_proto::CAServerDesc >*
CAServerListS::mutable_desc_array() {
  // @@protoc_insertion_point(field_mutable_list:account_proto.CAServerListS.desc_array)
  return &desc_array_;
}

// -------------------------------------------------------------------

// CAAuthAccountC

// required .account_proto.AccountPlatform platform = 1;
inline bool CAAuthAccountC::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAAuthAccountC::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAAuthAccountC::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAAuthAccountC::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::account_proto::AccountPlatform CAAuthAccountC::platform() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.platform)
  return static_cast< ::account_proto::AccountPlatform >(platform_);
}
inline void CAAuthAccountC::set_platform(::account_proto::AccountPlatform value) {
  assert(::account_proto::AccountPlatform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.platform)
}

// optional string name = 2;
inline bool CAAuthAccountC::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAAuthAccountC::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAAuthAccountC::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAAuthAccountC::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CAAuthAccountC::name() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.name)
  return *name_;
}
inline void CAAuthAccountC::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.name)
}
inline void CAAuthAccountC::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CAAuthAccountC.name)
}
inline void CAAuthAccountC::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CAAuthAccountC.name)
}
inline ::std::string* CAAuthAccountC::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CAAuthAccountC.name)
  return name_;
}
inline ::std::string* CAAuthAccountC::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAAuthAccountC::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CAAuthAccountC.name)
}

// optional uint32 uin = 3;
inline bool CAAuthAccountC::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAAuthAccountC::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAAuthAccountC::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAAuthAccountC::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 CAAuthAccountC::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.uin)
  return uin_;
}
inline void CAAuthAccountC::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.uin)
}

// optional string passwd_md5 = 4;
inline bool CAAuthAccountC::has_passwd_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAAuthAccountC::set_has_passwd_md5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAAuthAccountC::clear_has_passwd_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAAuthAccountC::clear_passwd_md5() {
  if (passwd_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_->clear();
  }
  clear_has_passwd_md5();
}
inline const ::std::string& CAAuthAccountC::passwd_md5() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.passwd_md5)
  return *passwd_md5_;
}
inline void CAAuthAccountC::set_passwd_md5(const ::std::string& value) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.passwd_md5)
}
inline void CAAuthAccountC::set_passwd_md5(const char* value) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CAAuthAccountC.passwd_md5)
}
inline void CAAuthAccountC::set_passwd_md5(const char* value, size_t size) {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  passwd_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CAAuthAccountC.passwd_md5)
}
inline ::std::string* CAAuthAccountC::mutable_passwd_md5() {
  set_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CAAuthAccountC.passwd_md5)
  return passwd_md5_;
}
inline ::std::string* CAAuthAccountC::release_passwd_md5() {
  clear_has_passwd_md5();
  if (passwd_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_md5_;
    passwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAAuthAccountC::set_allocated_passwd_md5(::std::string* passwd_md5) {
  if (passwd_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_md5_;
  }
  if (passwd_md5) {
    set_has_passwd_md5();
    passwd_md5_ = passwd_md5;
  } else {
    clear_has_passwd_md5();
    passwd_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CAAuthAccountC.passwd_md5)
}

// optional uint32 cpid = 5;
inline bool CAAuthAccountC::has_cpid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CAAuthAccountC::set_has_cpid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CAAuthAccountC::clear_has_cpid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CAAuthAccountC::clear_cpid() {
  cpid_ = 0u;
  clear_has_cpid();
}
inline ::google::protobuf::uint32 CAAuthAccountC::cpid() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.cpid)
  return cpid_;
}
inline void CAAuthAccountC::set_cpid(::google::protobuf::uint32 value) {
  set_has_cpid();
  cpid_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.cpid)
}

// optional uint32 appid = 6;
inline bool CAAuthAccountC::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CAAuthAccountC::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CAAuthAccountC::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CAAuthAccountC::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CAAuthAccountC::appid() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.appid)
  return appid_;
}
inline void CAAuthAccountC::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.appid)
}

// optional string sid = 7;
inline bool CAAuthAccountC::has_sid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CAAuthAccountC::set_has_sid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CAAuthAccountC::clear_has_sid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CAAuthAccountC::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& CAAuthAccountC::sid() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountC.sid)
  return *sid_;
}
inline void CAAuthAccountC::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountC.sid)
}
inline void CAAuthAccountC::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CAAuthAccountC.sid)
}
inline void CAAuthAccountC::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CAAuthAccountC.sid)
}
inline ::std::string* CAAuthAccountC::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CAAuthAccountC.sid)
  return sid_;
}
inline ::std::string* CAAuthAccountC::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAAuthAccountC::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CAAuthAccountC.sid)
}

// -------------------------------------------------------------------

// CAAuthAccountS

// required int32 result = 1;
inline bool CAAuthAccountS::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAAuthAccountS::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAAuthAccountS::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAAuthAccountS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CAAuthAccountS::result() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountS.result)
  return result_;
}
inline void CAAuthAccountS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountS.result)
}

// optional string sid = 2;
inline bool CAAuthAccountS::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAAuthAccountS::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAAuthAccountS::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAAuthAccountS::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& CAAuthAccountS::sid() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountS.sid)
  return *sid_;
}
inline void CAAuthAccountS::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountS.sid)
}
inline void CAAuthAccountS::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.CAAuthAccountS.sid)
}
inline void CAAuthAccountS::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.CAAuthAccountS.sid)
}
inline ::std::string* CAAuthAccountS::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.CAAuthAccountS.sid)
  return sid_;
}
inline ::std::string* CAAuthAccountS::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAAuthAccountS::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.CAAuthAccountS.sid)
}

// optional uint32 uin = 3;
inline bool CAAuthAccountS::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAAuthAccountS::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAAuthAccountS::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAAuthAccountS::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 CAAuthAccountS::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.CAAuthAccountS.uin)
  return uin_;
}
inline void CAAuthAccountS::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.CAAuthAccountS.uin)
}

// -------------------------------------------------------------------

// GAAuthAccountC

// required uint32 uin = 1;
inline bool GAAuthAccountC::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GAAuthAccountC::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GAAuthAccountC::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GAAuthAccountC::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 GAAuthAccountC::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountC.uin)
  return uin_;
}
inline void GAAuthAccountC::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountC.uin)
}

// required string sid = 2;
inline bool GAAuthAccountC::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GAAuthAccountC::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GAAuthAccountC::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GAAuthAccountC::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& GAAuthAccountC::sid() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountC.sid)
  return *sid_;
}
inline void GAAuthAccountC::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountC.sid)
}
inline void GAAuthAccountC::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GAAuthAccountC.sid)
}
inline void GAAuthAccountC::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GAAuthAccountC.sid)
}
inline ::std::string* GAAuthAccountC::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GAAuthAccountC.sid)
  return sid_;
}
inline ::std::string* GAAuthAccountC::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GAAuthAccountC::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GAAuthAccountC.sid)
}

// required uint32 clientid = 3;
inline bool GAAuthAccountC::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GAAuthAccountC::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GAAuthAccountC::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GAAuthAccountC::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 GAAuthAccountC::clientid() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountC.clientid)
  return clientid_;
}
inline void GAAuthAccountC::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountC.clientid)
}

// -------------------------------------------------------------------

// GAAuthAccountS

// required int32 result = 1;
inline bool GAAuthAccountS::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GAAuthAccountS::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GAAuthAccountS::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GAAuthAccountS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GAAuthAccountS::result() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountS.result)
  return result_;
}
inline void GAAuthAccountS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountS.result)
}

// required uint32 clientid = 3;
inline bool GAAuthAccountS::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GAAuthAccountS::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GAAuthAccountS::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GAAuthAccountS::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 GAAuthAccountS::clientid() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountS.clientid)
  return clientid_;
}
inline void GAAuthAccountS::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountS.clientid)
}

// required uint32 uin = 4;
inline bool GAAuthAccountS::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GAAuthAccountS::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GAAuthAccountS::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GAAuthAccountS::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 GAAuthAccountS::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountS.uin)
  return uin_;
}
inline void GAAuthAccountS::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountS.uin)
}

// optional string info = 2;
inline bool GAAuthAccountS::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GAAuthAccountS::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GAAuthAccountS::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GAAuthAccountS::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& GAAuthAccountS::info() const {
  // @@protoc_insertion_point(field_get:account_proto.GAAuthAccountS.info)
  return *info_;
}
inline void GAAuthAccountS::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GAAuthAccountS.info)
}
inline void GAAuthAccountS::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GAAuthAccountS.info)
}
inline void GAAuthAccountS::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GAAuthAccountS.info)
}
inline ::std::string* GAAuthAccountS::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GAAuthAccountS.info)
  return info_;
}
inline ::std::string* GAAuthAccountS::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GAAuthAccountS::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GAAuthAccountS.info)
}

// -------------------------------------------------------------------

// GAVerifyBuyC

// required int32 platform = 1;
inline bool GAVerifyBuyC::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GAVerifyBuyC::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GAVerifyBuyC::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GAVerifyBuyC::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 GAVerifyBuyC::platform() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyC.platform)
  return platform_;
}
inline void GAVerifyBuyC::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyC.platform)
}

// required uint32 uin = 2;
inline bool GAVerifyBuyC::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GAVerifyBuyC::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GAVerifyBuyC::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GAVerifyBuyC::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 GAVerifyBuyC::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyC.uin)
  return uin_;
}
inline void GAVerifyBuyC::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyC.uin)
}

// required string itemid = 3;
inline bool GAVerifyBuyC::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GAVerifyBuyC::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GAVerifyBuyC::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GAVerifyBuyC::clear_itemid() {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_->clear();
  }
  clear_has_itemid();
}
inline const ::std::string& GAVerifyBuyC::itemid() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyC.itemid)
  return *itemid_;
}
inline void GAVerifyBuyC::set_itemid(const ::std::string& value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyC.itemid)
}
inline void GAVerifyBuyC::set_itemid(const char* value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GAVerifyBuyC.itemid)
}
inline void GAVerifyBuyC::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GAVerifyBuyC.itemid)
}
inline ::std::string* GAVerifyBuyC::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GAVerifyBuyC.itemid)
  return itemid_;
}
inline ::std::string* GAVerifyBuyC::release_itemid() {
  clear_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemid_;
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GAVerifyBuyC::set_allocated_itemid(::std::string* itemid) {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemid_;
  }
  if (itemid) {
    set_has_itemid();
    itemid_ = itemid;
  } else {
    clear_has_itemid();
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GAVerifyBuyC.itemid)
}

// required string receipt = 4;
inline bool GAVerifyBuyC::has_receipt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GAVerifyBuyC::set_has_receipt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GAVerifyBuyC::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GAVerifyBuyC::clear_receipt() {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_->clear();
  }
  clear_has_receipt();
}
inline const ::std::string& GAVerifyBuyC::receipt() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyC.receipt)
  return *receipt_;
}
inline void GAVerifyBuyC::set_receipt(const ::std::string& value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyC.receipt)
}
inline void GAVerifyBuyC::set_receipt(const char* value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GAVerifyBuyC.receipt)
}
inline void GAVerifyBuyC::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GAVerifyBuyC.receipt)
}
inline ::std::string* GAVerifyBuyC::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GAVerifyBuyC.receipt)
  return receipt_;
}
inline ::std::string* GAVerifyBuyC::release_receipt() {
  clear_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receipt_;
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GAVerifyBuyC::set_allocated_receipt(::std::string* receipt) {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receipt_;
  }
  if (receipt) {
    set_has_receipt();
    receipt_ = receipt;
  } else {
    clear_has_receipt();
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GAVerifyBuyC.receipt)
}

// required int32 price = 5;
inline bool GAVerifyBuyC::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GAVerifyBuyC::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GAVerifyBuyC::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GAVerifyBuyC::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 GAVerifyBuyC::price() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyC.price)
  return price_;
}
inline void GAVerifyBuyC::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyC.price)
}

// -------------------------------------------------------------------

// GAVerifyBuyS

// required int32 result = 1;
inline bool GAVerifyBuyS::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GAVerifyBuyS::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GAVerifyBuyS::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GAVerifyBuyS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GAVerifyBuyS::result() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyS.result)
  return result_;
}
inline void GAVerifyBuyS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyS.result)
}

// required uint32 uin = 2;
inline bool GAVerifyBuyS::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GAVerifyBuyS::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GAVerifyBuyS::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GAVerifyBuyS::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 GAVerifyBuyS::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyS.uin)
  return uin_;
}
inline void GAVerifyBuyS::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyS.uin)
}

// required string itemid = 3;
inline bool GAVerifyBuyS::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GAVerifyBuyS::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GAVerifyBuyS::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GAVerifyBuyS::clear_itemid() {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_->clear();
  }
  clear_has_itemid();
}
inline const ::std::string& GAVerifyBuyS::itemid() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyS.itemid)
  return *itemid_;
}
inline void GAVerifyBuyS::set_itemid(const ::std::string& value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyS.itemid)
}
inline void GAVerifyBuyS::set_itemid(const char* value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GAVerifyBuyS.itemid)
}
inline void GAVerifyBuyS::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GAVerifyBuyS.itemid)
}
inline ::std::string* GAVerifyBuyS::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GAVerifyBuyS.itemid)
  return itemid_;
}
inline ::std::string* GAVerifyBuyS::release_itemid() {
  clear_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemid_;
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GAVerifyBuyS::set_allocated_itemid(::std::string* itemid) {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemid_;
  }
  if (itemid) {
    set_has_itemid();
    itemid_ = itemid;
  } else {
    clear_has_itemid();
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GAVerifyBuyS.itemid)
}

// required string receipt = 4;
inline bool GAVerifyBuyS::has_receipt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GAVerifyBuyS::set_has_receipt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GAVerifyBuyS::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GAVerifyBuyS::clear_receipt() {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_->clear();
  }
  clear_has_receipt();
}
inline const ::std::string& GAVerifyBuyS::receipt() const {
  // @@protoc_insertion_point(field_get:account_proto.GAVerifyBuyS.receipt)
  return *receipt_;
}
inline void GAVerifyBuyS::set_receipt(const ::std::string& value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GAVerifyBuyS.receipt)
}
inline void GAVerifyBuyS::set_receipt(const char* value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GAVerifyBuyS.receipt)
}
inline void GAVerifyBuyS::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GAVerifyBuyS.receipt)
}
inline ::std::string* GAVerifyBuyS::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GAVerifyBuyS.receipt)
  return receipt_;
}
inline ::std::string* GAVerifyBuyS::release_receipt() {
  clear_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receipt_;
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GAVerifyBuyS::set_allocated_receipt(::std::string* receipt) {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receipt_;
  }
  if (receipt) {
    set_has_receipt();
    receipt_ = receipt;
  } else {
    clear_has_receipt();
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GAVerifyBuyS.receipt)
}

// -------------------------------------------------------------------

// GABuyNotifyC

// required .account_proto.PayPlatform platform = 1;
inline bool GABuyNotifyC::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GABuyNotifyC::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GABuyNotifyC::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GABuyNotifyC::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::account_proto::PayPlatform GABuyNotifyC::platform() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyC.platform)
  return static_cast< ::account_proto::PayPlatform >(platform_);
}
inline void GABuyNotifyC::set_platform(::account_proto::PayPlatform value) {
  assert(::account_proto::PayPlatform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyC.platform)
}

// required uint32 uin = 2;
inline bool GABuyNotifyC::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GABuyNotifyC::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GABuyNotifyC::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GABuyNotifyC::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 GABuyNotifyC::uin() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyC.uin)
  return uin_;
}
inline void GABuyNotifyC::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyC.uin)
}

// required string itemid = 3;
inline bool GABuyNotifyC::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GABuyNotifyC::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GABuyNotifyC::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GABuyNotifyC::clear_itemid() {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_->clear();
  }
  clear_has_itemid();
}
inline const ::std::string& GABuyNotifyC::itemid() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyC.itemid)
  return *itemid_;
}
inline void GABuyNotifyC::set_itemid(const ::std::string& value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyC.itemid)
}
inline void GABuyNotifyC::set_itemid(const char* value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GABuyNotifyC.itemid)
}
inline void GABuyNotifyC::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GABuyNotifyC.itemid)
}
inline ::std::string* GABuyNotifyC::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GABuyNotifyC.itemid)
  return itemid_;
}
inline ::std::string* GABuyNotifyC::release_itemid() {
  clear_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemid_;
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GABuyNotifyC::set_allocated_itemid(::std::string* itemid) {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemid_;
  }
  if (itemid) {
    set_has_itemid();
    itemid_ = itemid;
  } else {
    clear_has_itemid();
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GABuyNotifyC.itemid)
}

// required string receipt = 4;
inline bool GABuyNotifyC::has_receipt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GABuyNotifyC::set_has_receipt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GABuyNotifyC::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GABuyNotifyC::clear_receipt() {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_->clear();
  }
  clear_has_receipt();
}
inline const ::std::string& GABuyNotifyC::receipt() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyC.receipt)
  return *receipt_;
}
inline void GABuyNotifyC::set_receipt(const ::std::string& value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyC.receipt)
}
inline void GABuyNotifyC::set_receipt(const char* value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GABuyNotifyC.receipt)
}
inline void GABuyNotifyC::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GABuyNotifyC.receipt)
}
inline ::std::string* GABuyNotifyC::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GABuyNotifyC.receipt)
  return receipt_;
}
inline ::std::string* GABuyNotifyC::release_receipt() {
  clear_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receipt_;
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GABuyNotifyC::set_allocated_receipt(::std::string* receipt) {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receipt_;
  }
  if (receipt) {
    set_has_receipt();
    receipt_ = receipt;
  } else {
    clear_has_receipt();
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GABuyNotifyC.receipt)
}

// required int32 count = 5;
inline bool GABuyNotifyC::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GABuyNotifyC::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GABuyNotifyC::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GABuyNotifyC::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GABuyNotifyC::count() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyC.count)
  return count_;
}
inline void GABuyNotifyC::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyC.count)
}

// required int32 money = 6;
inline bool GABuyNotifyC::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GABuyNotifyC::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GABuyNotifyC::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GABuyNotifyC::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 GABuyNotifyC::money() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyC.money)
  return money_;
}
inline void GABuyNotifyC::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyC.money)
}

// -------------------------------------------------------------------

// GABuyNotifyS

// required int32 result = 1;
inline bool GABuyNotifyS::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GABuyNotifyS::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GABuyNotifyS::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GABuyNotifyS::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GABuyNotifyS::result() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyS.result)
  return result_;
}
inline void GABuyNotifyS::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyS.result)
}

// required string receipt = 2;
inline bool GABuyNotifyS::has_receipt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GABuyNotifyS::set_has_receipt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GABuyNotifyS::clear_has_receipt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GABuyNotifyS::clear_receipt() {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_->clear();
  }
  clear_has_receipt();
}
inline const ::std::string& GABuyNotifyS::receipt() const {
  // @@protoc_insertion_point(field_get:account_proto.GABuyNotifyS.receipt)
  return *receipt_;
}
inline void GABuyNotifyS::set_receipt(const ::std::string& value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set:account_proto.GABuyNotifyS.receipt)
}
inline void GABuyNotifyS::set_receipt(const char* value) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(value);
  // @@protoc_insertion_point(field_set_char:account_proto.GABuyNotifyS.receipt)
}
inline void GABuyNotifyS::set_receipt(const char* value, size_t size) {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  receipt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:account_proto.GABuyNotifyS.receipt)
}
inline ::std::string* GABuyNotifyS::mutable_receipt() {
  set_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receipt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:account_proto.GABuyNotifyS.receipt)
  return receipt_;
}
inline ::std::string* GABuyNotifyS::release_receipt() {
  clear_has_receipt();
  if (receipt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receipt_;
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GABuyNotifyS::set_allocated_receipt(::std::string* receipt) {
  if (receipt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receipt_;
  }
  if (receipt) {
    set_has_receipt();
    receipt_ = receipt;
  } else {
    clear_has_receipt();
    receipt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:account_proto.GABuyNotifyS.receipt)
}

// -------------------------------------------------------------------

// GAReportStatusC

// required int32 nconn = 1;
inline bool GAReportStatusC::has_nconn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GAReportStatusC::set_has_nconn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GAReportStatusC::clear_has_nconn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GAReportStatusC::clear_nconn() {
  nconn_ = 0;
  clear_has_nconn();
}
inline ::google::protobuf::int32 GAReportStatusC::nconn() const {
  // @@protoc_insertion_point(field_get:account_proto.GAReportStatusC.nconn)
  return nconn_;
}
inline void GAReportStatusC::set_nconn(::google::protobuf::int32 value) {
  set_has_nconn();
  nconn_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAReportStatusC.nconn)
}

// required int32 nlogin = 2;
inline bool GAReportStatusC::has_nlogin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GAReportStatusC::set_has_nlogin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GAReportStatusC::clear_has_nlogin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GAReportStatusC::clear_nlogin() {
  nlogin_ = 0;
  clear_has_nlogin();
}
inline ::google::protobuf::int32 GAReportStatusC::nlogin() const {
  // @@protoc_insertion_point(field_get:account_proto.GAReportStatusC.nlogin)
  return nlogin_;
}
inline void GAReportStatusC::set_nlogin(::google::protobuf::int32 value) {
  set_has_nlogin();
  nlogin_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAReportStatusC.nlogin)
}

// required uint32 servertime = 3;
inline bool GAReportStatusC::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GAReportStatusC::set_has_servertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GAReportStatusC::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GAReportStatusC::clear_servertime() {
  servertime_ = 0u;
  clear_has_servertime();
}
inline ::google::protobuf::uint32 GAReportStatusC::servertime() const {
  // @@protoc_insertion_point(field_get:account_proto.GAReportStatusC.servertime)
  return servertime_;
}
inline void GAReportStatusC::set_servertime(::google::protobuf::uint32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAReportStatusC.servertime)
}

// required int32 memory = 4;
inline bool GAReportStatusC::has_memory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GAReportStatusC::set_has_memory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GAReportStatusC::clear_has_memory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GAReportStatusC::clear_memory() {
  memory_ = 0;
  clear_has_memory();
}
inline ::google::protobuf::int32 GAReportStatusC::memory() const {
  // @@protoc_insertion_point(field_get:account_proto.GAReportStatusC.memory)
  return memory_;
}
inline void GAReportStatusC::set_memory(::google::protobuf::int32 value) {
  set_has_memory();
  memory_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAReportStatusC.memory)
}

// required int32 cpu = 5;
inline bool GAReportStatusC::has_cpu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GAReportStatusC::set_has_cpu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GAReportStatusC::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GAReportStatusC::clear_cpu() {
  cpu_ = 0;
  clear_has_cpu();
}
inline ::google::protobuf::int32 GAReportStatusC::cpu() const {
  // @@protoc_insertion_point(field_get:account_proto.GAReportStatusC.cpu)
  return cpu_;
}
inline void GAReportStatusC::set_cpu(::google::protobuf::int32 value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:account_proto.GAReportStatusC.cpu)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace account_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::account_proto::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::account_proto::MsgType>() {
  return ::account_proto::MsgType_descriptor();
}
template <> struct is_proto_enum< ::account_proto::CAResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::account_proto::CAResult>() {
  return ::account_proto::CAResult_descriptor();
}
template <> struct is_proto_enum< ::account_proto::AccountPlatform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::account_proto::AccountPlatform>() {
  return ::account_proto::AccountPlatform_descriptor();
}
template <> struct is_proto_enum< ::account_proto::PayPlatform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::account_proto::PayPlatform>() {
  return ::account_proto::PayPlatform_descriptor();
}
template <> struct is_proto_enum< ::account_proto::ServerGroupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::account_proto::ServerGroupType>() {
  return ::account_proto::ServerGroupType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_account_2eproto__INCLUDED
