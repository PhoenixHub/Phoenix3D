// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef PROTOBUF_db_2eproto__INCLUDED
#define PROTOBUF_db_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace db_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2eproto();
void protobuf_AssignDesc_db_2eproto();
void protobuf_ShutdownFile_db_2eproto();

class ADRegAccountC;
class ADAuthAccountC;

enum MsgType {
  DP_RESERVED = 0,
  AD_REG_ACCOUNT = 1,
  AD_AUTH_ACCOUNT = 2
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = DP_RESERVED;
const MsgType MsgType_MAX = AD_AUTH_ACCOUNT;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class ADRegAccountC : public ::google::protobuf::Message {
 public:
  ADRegAccountC();
  virtual ~ADRegAccountC();

  ADRegAccountC(const ADRegAccountC& from);

  inline ADRegAccountC& operator=(const ADRegAccountC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADRegAccountC& default_instance();

  void Swap(ADRegAccountC* other);

  // implements Message ----------------------------------------------

  ADRegAccountC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADRegAccountC& from);
  void MergeFrom(const ADRegAccountC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password_md5 = 2;
  inline bool has_password_md5() const;
  inline void clear_password_md5();
  static const int kPasswordMd5FieldNumber = 2;
  inline const ::std::string& password_md5() const;
  inline void set_password_md5(const ::std::string& value);
  inline void set_password_md5(const char* value);
  inline void set_password_md5(const char* value, size_t size);
  inline ::std::string* mutable_password_md5();
  inline ::std::string* release_password_md5();
  inline void set_allocated_password_md5(::std::string* password_md5);

  // required int32 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::int32 clientid() const;
  inline void set_clientid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db_proto.ADRegAccountC)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password_md5();
  inline void clear_has_password_md5();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_md5_;
  ::google::protobuf::int32 clientid_;
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();

  void InitAsDefaultInstance();
  static ADRegAccountC* default_instance_;
};
// -------------------------------------------------------------------

class ADAuthAccountC : public ::google::protobuf::Message {
 public:
  ADAuthAccountC();
  virtual ~ADAuthAccountC();

  ADAuthAccountC(const ADAuthAccountC& from);

  inline ADAuthAccountC& operator=(const ADAuthAccountC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADAuthAccountC& default_instance();

  void Swap(ADAuthAccountC* other);

  // implements Message ----------------------------------------------

  ADAuthAccountC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADAuthAccountC& from);
  void MergeFrom(const ADAuthAccountC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string passworld_md5 = 2;
  inline bool has_passworld_md5() const;
  inline void clear_passworld_md5();
  static const int kPassworldMd5FieldNumber = 2;
  inline const ::std::string& passworld_md5() const;
  inline void set_passworld_md5(const ::std::string& value);
  inline void set_passworld_md5(const char* value);
  inline void set_passworld_md5(const char* value, size_t size);
  inline ::std::string* mutable_passworld_md5();
  inline ::std::string* release_passworld_md5();
  inline void set_allocated_passworld_md5(::std::string* passworld_md5);

  // required int32 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::int32 clientid() const;
  inline void set_clientid(::google::protobuf::int32 value);

  // required int32 sessionid = 4;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 4;
  inline ::google::protobuf::int32 sessionid() const;
  inline void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db_proto.ADAuthAccountC)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_passworld_md5();
  inline void clear_has_passworld_md5();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* passworld_md5_;
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::int32 sessionid_;
  friend void  protobuf_AddDesc_db_2eproto();
  friend void protobuf_AssignDesc_db_2eproto();
  friend void protobuf_ShutdownFile_db_2eproto();

  void InitAsDefaultInstance();
  static ADAuthAccountC* default_instance_;
};
// ===================================================================


// ===================================================================

// ADRegAccountC

// required string username = 1;
inline bool ADRegAccountC::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADRegAccountC::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADRegAccountC::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADRegAccountC::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ADRegAccountC::username() const {
  // @@protoc_insertion_point(field_get:db_proto.ADRegAccountC.username)
  return *username_;
}
inline void ADRegAccountC::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:db_proto.ADRegAccountC.username)
}
inline void ADRegAccountC::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_proto.ADRegAccountC.username)
}
inline void ADRegAccountC::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_proto.ADRegAccountC.username)
}
inline ::std::string* ADRegAccountC::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_proto.ADRegAccountC.username)
  return username_;
}
inline ::std::string* ADRegAccountC::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ADRegAccountC::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_proto.ADRegAccountC.username)
}

// required string password_md5 = 2;
inline bool ADRegAccountC::has_password_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADRegAccountC::set_has_password_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADRegAccountC::clear_has_password_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADRegAccountC::clear_password_md5() {
  if (password_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_md5_->clear();
  }
  clear_has_password_md5();
}
inline const ::std::string& ADRegAccountC::password_md5() const {
  // @@protoc_insertion_point(field_get:db_proto.ADRegAccountC.password_md5)
  return *password_md5_;
}
inline void ADRegAccountC::set_password_md5(const ::std::string& value) {
  set_has_password_md5();
  if (password_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_md5_ = new ::std::string;
  }
  password_md5_->assign(value);
  // @@protoc_insertion_point(field_set:db_proto.ADRegAccountC.password_md5)
}
inline void ADRegAccountC::set_password_md5(const char* value) {
  set_has_password_md5();
  if (password_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_md5_ = new ::std::string;
  }
  password_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_proto.ADRegAccountC.password_md5)
}
inline void ADRegAccountC::set_password_md5(const char* value, size_t size) {
  set_has_password_md5();
  if (password_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_md5_ = new ::std::string;
  }
  password_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_proto.ADRegAccountC.password_md5)
}
inline ::std::string* ADRegAccountC::mutable_password_md5() {
  set_has_password_md5();
  if (password_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_proto.ADRegAccountC.password_md5)
  return password_md5_;
}
inline ::std::string* ADRegAccountC::release_password_md5() {
  clear_has_password_md5();
  if (password_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_md5_;
    password_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ADRegAccountC::set_allocated_password_md5(::std::string* password_md5) {
  if (password_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_md5_;
  }
  if (password_md5) {
    set_has_password_md5();
    password_md5_ = password_md5;
  } else {
    clear_has_password_md5();
    password_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_proto.ADRegAccountC.password_md5)
}

// required int32 clientid = 3;
inline bool ADRegAccountC::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADRegAccountC::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADRegAccountC::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADRegAccountC::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 ADRegAccountC::clientid() const {
  // @@protoc_insertion_point(field_get:db_proto.ADRegAccountC.clientid)
  return clientid_;
}
inline void ADRegAccountC::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:db_proto.ADRegAccountC.clientid)
}

// -------------------------------------------------------------------

// ADAuthAccountC

// required string username = 1;
inline bool ADAuthAccountC::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADAuthAccountC::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADAuthAccountC::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADAuthAccountC::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ADAuthAccountC::username() const {
  // @@protoc_insertion_point(field_get:db_proto.ADAuthAccountC.username)
  return *username_;
}
inline void ADAuthAccountC::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:db_proto.ADAuthAccountC.username)
}
inline void ADAuthAccountC::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_proto.ADAuthAccountC.username)
}
inline void ADAuthAccountC::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_proto.ADAuthAccountC.username)
}
inline ::std::string* ADAuthAccountC::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_proto.ADAuthAccountC.username)
  return username_;
}
inline ::std::string* ADAuthAccountC::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ADAuthAccountC::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_proto.ADAuthAccountC.username)
}

// required string passworld_md5 = 2;
inline bool ADAuthAccountC::has_passworld_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADAuthAccountC::set_has_passworld_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADAuthAccountC::clear_has_passworld_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADAuthAccountC::clear_passworld_md5() {
  if (passworld_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_md5_->clear();
  }
  clear_has_passworld_md5();
}
inline const ::std::string& ADAuthAccountC::passworld_md5() const {
  // @@protoc_insertion_point(field_get:db_proto.ADAuthAccountC.passworld_md5)
  return *passworld_md5_;
}
inline void ADAuthAccountC::set_passworld_md5(const ::std::string& value) {
  set_has_passworld_md5();
  if (passworld_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_md5_ = new ::std::string;
  }
  passworld_md5_->assign(value);
  // @@protoc_insertion_point(field_set:db_proto.ADAuthAccountC.passworld_md5)
}
inline void ADAuthAccountC::set_passworld_md5(const char* value) {
  set_has_passworld_md5();
  if (passworld_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_md5_ = new ::std::string;
  }
  passworld_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:db_proto.ADAuthAccountC.passworld_md5)
}
inline void ADAuthAccountC::set_passworld_md5(const char* value, size_t size) {
  set_has_passworld_md5();
  if (passworld_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_md5_ = new ::std::string;
  }
  passworld_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_proto.ADAuthAccountC.passworld_md5)
}
inline ::std::string* ADAuthAccountC::mutable_passworld_md5() {
  set_has_passworld_md5();
  if (passworld_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passworld_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:db_proto.ADAuthAccountC.passworld_md5)
  return passworld_md5_;
}
inline ::std::string* ADAuthAccountC::release_passworld_md5() {
  clear_has_passworld_md5();
  if (passworld_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passworld_md5_;
    passworld_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ADAuthAccountC::set_allocated_passworld_md5(::std::string* passworld_md5) {
  if (passworld_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passworld_md5_;
  }
  if (passworld_md5) {
    set_has_passworld_md5();
    passworld_md5_ = passworld_md5;
  } else {
    clear_has_passworld_md5();
    passworld_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:db_proto.ADAuthAccountC.passworld_md5)
}

// required int32 clientid = 3;
inline bool ADAuthAccountC::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADAuthAccountC::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADAuthAccountC::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADAuthAccountC::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 ADAuthAccountC::clientid() const {
  // @@protoc_insertion_point(field_get:db_proto.ADAuthAccountC.clientid)
  return clientid_;
}
inline void ADAuthAccountC::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:db_proto.ADAuthAccountC.clientid)
}

// required int32 sessionid = 4;
inline bool ADAuthAccountC::has_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADAuthAccountC::set_has_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADAuthAccountC::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ADAuthAccountC::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::google::protobuf::int32 ADAuthAccountC::sessionid() const {
  // @@protoc_insertion_point(field_get:db_proto.ADAuthAccountC.sessionid)
  return sessionid_;
}
inline void ADAuthAccountC::set_sessionid(::google::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:db_proto.ADAuthAccountC.sessionid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::db_proto::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db_proto::MsgType>() {
  return ::db_proto::MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2eproto__INCLUDED
